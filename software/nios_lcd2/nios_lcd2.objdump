
nios_lcd2.elf:     file format elf32-littlenios2
nios_lcd2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004230

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002b78 memsz 0x00002b78 flags r-x
    LOAD off    0x00003b98 vaddr 0x00006b98 paddr 0x00006e78 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00004158 vaddr 0x00007158 paddr 0x00007158 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000286c  00004230  00004230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000fc  00006a9c  00006a9c  00003a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00006b98  00006e78  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00007158  00007158  00004158  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00007280  00007280  00003e78  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000638  00000000  00000000  00003ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000085fd  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002dae  00000000  00000000  0000cad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003147  00000000  00000000  0000f883  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d48  00000000  00000000  000129cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e87  00000000  00000000  00013714  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ee  00000000  00000000  0001559b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001698c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  000169d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000187ca  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000187cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000187d9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000187da  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000187db  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000187e6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000187f1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000187fc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000012  00000000  00000000  00018802  2**0
                  CONTENTS, READONLY
 26 .jdi          00003e85  00000000  00000000  00018814  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005fba1  00000000  00000000  0001c699  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004230 l    d  .text	00000000 .text
00006a9c l    d  .rodata	00000000 .rodata
00006b98 l    d  .rwdata	00000000 .rwdata
00007158 l    d  .bss	00000000 .bss
00007280 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_lcd2_bsp//obj/HAL/src/crt0.o
00004268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
00007158 l     O .bss	00000001 count
0000426c l     F .text	00000024 lcd_init
00004290 l     F .text	00000058 initial_message
000042e8 l     F .text	00000020 count_led
00004308 l     F .text	00000020 count_sevenseg
00004328 l     F .text	0000002c count_lcd
00004354 l     F .text	00000054 count_all
000043a8 l     F .text	0000013c handle_button_press
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000049b8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006b98 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00005258 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000053e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000551c l     F .text	00000034 alt_dev_reg
00006c78 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00005814 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00005a60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005b94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005bc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005f60 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000060c0 l     F .text	0000003c alt_get_errno
000060fc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000717c g     O .bss	00000004 alt_instruction_exception_handler
00005344 g     F .text	0000006c alt_main
00004908 g     F .text	00000080 _puts_r
00007180 g     O .bss	00000100 alt_irq
00006e78 g       *ABS*	00000000 __flash_rwdata_start
000048bc g     F .text	0000004c printf
0000656c g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
0000715c g     O .bss	00000004 edge_capture
00004020 g       *ABS*	00000000 __flash_exceptions_start
00007160 g     O .bss	00000004 errno
00007168 g     O .bss	00000004 alt_argv
0000ee4c g       *ABS*	00000000 _gp
000053b0 g     F .text	00000030 usleep
00006ccc g     O .rwdata	00000180 alt_fd_list
00006590 g     F .text	00000090 alt_find_dev
00006044 g     F .text	0000007c alt_io_redirect
00004988 g     F .text	00000014 puts
000067ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
000045ec g     F .text	00000108 init_ports
00005694 g     F .text	000000ec altera_avalon_jtag_uart_read
00004880 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005174 g     F .text	00000064 .hidden __udivsi3
000047f0 g     F .text	00000048 writecommand
00006e64 g     O .rwdata	00000004 alt_max_fd
00006e4c g     O .rwdata	00000004 _global_impure_ptr
00007280 g       *ABS*	00000000 __bss_end
00005e70 g     F .text	000000f0 alt_iic_isr_register
00006464 g     F .text	00000108 alt_tick
000047bc g     F .text	00000034 xmitbyte
00005e24 g     F .text	0000004c alt_ic_irq_enabled
000063c8 g     F .text	0000009c alt_alarm_stop
00007170 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	000000d4 alt_irq_handler
00006ca4 g     O .rwdata	00000028 alt_dev_null
00005b74 g     F .text	00000020 alt_dcache_flush_all
00006e78 g       *ABS*	00000000 __ram_rwdata_end
00006e5c g     O .rwdata	00000008 alt_dev_list
0000541c g     F .text	00000100 write
00006b98 g       *ABS*	00000000 __ram_rodata_end
000051d8 g     F .text	00000058 .hidden __umodsi3
00007280 g       *ABS*	00000000 end
000041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
0000588c g     F .text	0000007c alt_avalon_timer_sc_init
00005780 g     F .text	00000094 altera_avalon_jtag_uart_write
00004a24 g     F .text	0000052c ___vfprintf_internal_r
000068d8 g     F .text	00000190 __call_exitprocs
00004230 g     F .text	0000003c _start
00007174 g     O .bss	00000004 _alt_tick_rate
00007178 g     O .bss	00000004 _alt_nticks
00005588 g     F .text	0000004c alt_sys_init
00005230 g     F .text	00000028 .hidden __mulsi3
00006b98 g       *ABS*	00000000 __ram_rwdata_start
00006a9c g       *ABS*	00000000 __ram_rodata_start
000055d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006728 g     F .text	000000c4 alt_get_fd
00005908 g     F .text	00000158 alt_busy_sleep
000068a8 g     F .text	00000030 memcmp
00007280 g       *ABS*	00000000 __alt_stack_base
00006620 g     F .text	00000108 alt_find_file
00005bfc g     F .text	000000a4 alt_dev_llist_insert
00004f6c g     F .text	000000b8 __sfvwrite_small_dev
00007158 g       *ABS*	00000000 __bss_start
000044e4 g     F .text	00000108 main
0000716c g     O .bss	00000004 alt_envp
00005634 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00006e68 g     O .rwdata	00000004 alt_errno
0000507c g     F .text	00000084 .hidden __divsi3
00006a9c g       *ABS*	00000000 __flash_rodata_start
00005550 g     F .text	00000038 alt_irq_init
00006344 g     F .text	00000084 alt_release_fd
00005024 g     F .text	00000058 _write_r
00004838 g     F .text	00000048 writedata
00006e50 g     O .rwdata	00000004 _impure_ptr
00007164 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00006e54 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005cc0 g     F .text	00000050 alt_ic_isr_register
00006e78 g       *ABS*	00000000 _edata
00007280 g       *ABS*	00000000 _end
00004230 g       *ABS*	00000000 __ram_exceptions_end
00005d98 g     F .text	0000008c alt_ic_irq_disable
00006888 g     F .text	00000020 exit
00005100 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00006a68 g     F .text	00000034 _exit
0000499c g     F .text	0000001c strlen
000061e8 g     F .text	0000015c open
00005ca0 g     F .text	00000020 alt_icache_flush_all
00006e6c g     O .rwdata	00000004 alt_priority_mask
00005d10 g     F .text	00000088 alt_ic_irq_enable
00004f50 g     F .text	0000001c __vfprintf_internal
00006e70 g     O .rwdata	00000008 alt_alarm_list
00005a9c g     F .text	000000d8 close
000052c0 g     F .text	00000084 alt_load
000046f4 g     F .text	000000c8 setpixel



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08508c14 	ori	at,at,16944
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	00041d00 	call	41d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4110:	0005313a 	rdctl	r2,ipending
    4114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    4118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    4120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4124:	00800044 	movi	r2,1
    4128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1884703a 	and	r2,r3,r2
    4138:	10001426 	beq	r2,zero,418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    413c:	00800034 	movhi	r2,0
    4140:	109c6004 	addi	r2,r2,29056
    4144:	e0fffd17 	ldw	r3,-12(fp)
    4148:	180690fa 	slli	r3,r3,3
    414c:	10c5883a 	add	r2,r2,r3
    4150:	10c00017 	ldw	r3,0(r2)
    4154:	00800034 	movhi	r2,0
    4158:	109c6004 	addi	r2,r2,29056
    415c:	e13ffd17 	ldw	r4,-12(fp)
    4160:	200890fa 	slli	r4,r4,3
    4164:	1105883a 	add	r2,r2,r4
    4168:	10800104 	addi	r2,r2,4
    416c:	10800017 	ldw	r2,0(r2)
    4170:	1009883a 	mov	r4,r2
    4174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    4178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    417c:	0005313a 	rdctl	r2,ipending
    4180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	00000706 	br	41a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	1085883a 	add	r2,r2,r2
    4194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    41a4:	003fe106 	br	412c <_gp+0xffff52e0>

    active = alt_irq_pending ();
    41a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    41ac:	e0bffb17 	ldw	r2,-20(fp)
    41b0:	103fdb1e 	bne	r2,zero,4120 <_gp+0xffff52d4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    41b4:	0001883a 	nop
}
    41b8:	0001883a 	nop
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    41d0:	defffb04 	addi	sp,sp,-20
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	df000315 	stw	fp,12(sp)
    41dc:	df000304 	addi	fp,sp,12
    41e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    41e4:	00bfffc4 	movi	r2,-1
    41e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    41ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    41f0:	d0a0cc17 	ldw	r2,-31952(gp)
    41f4:	10000726 	beq	r2,zero,4214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    41f8:	d0a0cc17 	ldw	r2,-31952(gp)
    41fc:	e0fffd17 	ldw	r3,-12(fp)
    4200:	e1bffe17 	ldw	r6,-8(fp)
    4204:	e17fff17 	ldw	r5,-4(fp)
    4208:	1809883a 	mov	r4,r3
    420c:	103ee83a 	callr	r2
    4210:	00000206 	br	421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    4218:	0005883a 	mov	r2,zero
}
    421c:	e037883a 	mov	sp,fp
    4220:	dfc00117 	ldw	ra,4(sp)
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00204 	addi	sp,sp,8
    422c:	f800283a 	ret

Disassembly of section .text:

00004230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    423c:	d6bb9314 	ori	gp,gp,61004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4244:	109c5614 	ori	r2,r2,29016

    movhi r3, %hi(__bss_end)
    4248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    424c:	18dca014 	ori	r3,r3,29312

    beq r2, r3, 1f
    4250:	10c00326 	beq	r2,r3,4260 <_start+0x30>

0:
    stw zero, (r2)
    4254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    425c:	10fffd36 	bltu	r2,r3,4254 <_gp+0xffff5408>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4260:	00052c00 	call	52c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4264:	00053440 	call	5344 <alt_main>

00004268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4268:	003fff06 	br	4268 <_gp+0xffff541c>

0000426c <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    426c:	defffe04 	addi	sp,sp,-8
    4270:	df000115 	stw	fp,4(sp)
    4274:	df000104 	addi	fp,sp,4
    4278:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    427c:	0001883a 	nop
    4280:	e037883a 	mov	sp,fp
    4284:	df000017 	ldw	fp,0(sp)
    4288:	dec00104 	addi	sp,sp,4
    428c:	f800283a 	ret

00004290 <initial_message>:

static void initial_message()
{
    4290:	defffe04 	addi	sp,sp,-8
    4294:	dfc00115 	stw	ra,4(sp)
    4298:	df000015 	stw	fp,0(sp)
    429c:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    42a0:	01000034 	movhi	r4,0
    42a4:	211aa704 	addi	r4,r4,27292
    42a8:	00049880 	call	4988 <puts>
    printf("* Hello from Nios II!    *\n");
    42ac:	01000034 	movhi	r4,0
    42b0:	211aaf04 	addi	r4,r4,27324
    42b4:	00049880 	call	4988 <puts>
    printf("* Counting from 00 to ff *\n");
    42b8:	01000034 	movhi	r4,0
    42bc:	211ab604 	addi	r4,r4,27352
    42c0:	00049880 	call	4988 <puts>
    printf("**************************\n");
    42c4:	01000034 	movhi	r4,0
    42c8:	211abd04 	addi	r4,r4,27380
    42cc:	00049880 	call	4988 <puts>
}
    42d0:	0001883a 	nop
    42d4:	e037883a 	mov	sp,fp
    42d8:	dfc00117 	ldw	ra,4(sp)
    42dc:	df000017 	ldw	fp,0(sp)
    42e0:	dec00204 	addi	sp,sp,8
    42e4:	f800283a 	ret

000042e8 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    42e8:	deffff04 	addi	sp,sp,-4
    42ec:	df000015 	stw	fp,0(sp)
    42f0:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(
        LED_PIO_BASE,
        count
        );
#endif
}
    42f4:	0001883a 	nop
    42f8:	e037883a 	mov	sp,fp
    42fc:	df000017 	ldw	fp,0(sp)
    4300:	dec00104 	addi	sp,sp,4
    4304:	f800283a 	ret

00004308 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    4308:	deffff04 	addi	sp,sp,-4
    430c:	df000015 	stw	fp,0(sp)
    4310:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    4314:	0001883a 	nop
    4318:	e037883a 	mov	sp,fp
    431c:	df000017 	ldw	fp,0(sp)
    4320:	dec00104 	addi	sp,sp,4
    4324:	f800283a 	ret

00004328 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    4328:	defffd04 	addi	sp,sp,-12
    432c:	df000215 	stw	fp,8(sp)
    4330:	df000204 	addi	fp,sp,8
    4334:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    4338:	e0bfff17 	ldw	r2,-4(fp)
    433c:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    4340:	0001883a 	nop
    4344:	e037883a 	mov	sp,fp
    4348:	df000017 	ldw	fp,0(sp)
    434c:	dec00104 	addi	sp,sp,4
    4350:	f800283a 	ret

00004354 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    4354:	defffd04 	addi	sp,sp,-12
    4358:	dfc00215 	stw	ra,8(sp)
    435c:	df000115 	stw	fp,4(sp)
    4360:	df000104 	addi	fp,sp,4
    4364:	e13fff15 	stw	r4,-4(fp)
    count_led();
    4368:	00042e80 	call	42e8 <count_led>
    count_sevenseg();
    436c:	00043080 	call	4308 <count_sevenseg>
    count_lcd( arg );
    4370:	e13fff17 	ldw	r4,-4(fp)
    4374:	00043280 	call	4328 <count_lcd>
    printf("%02x,  ", count);
    4378:	d0a0c303 	ldbu	r2,-31988(gp)
    437c:	10803fcc 	andi	r2,r2,255
    4380:	100b883a 	mov	r5,r2
    4384:	01000034 	movhi	r4,0
    4388:	211ac404 	addi	r4,r4,27408
    438c:	00048bc0 	call	48bc <printf>
}
    4390:	0001883a 	nop
    4394:	e037883a 	mov	sp,fp
    4398:	dfc00117 	ldw	ra,4(sp)
    439c:	df000017 	ldw	fp,0(sp)
    43a0:	dec00204 	addi	sp,sp,8
    43a4:	f800283a 	ret

000043a8 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    43a8:	defffc04 	addi	sp,sp,-16
    43ac:	dfc00315 	stw	ra,12(sp)
    43b0:	df000215 	stw	fp,8(sp)
    43b4:	df000204 	addi	fp,sp,8
    43b8:	2005883a 	mov	r2,r4
    43bc:	e17fff15 	stw	r5,-4(fp)
    43c0:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    43c4:	e0bffe03 	ldbu	r2,-8(fp)
    43c8:	108018d8 	cmpnei	r2,r2,99
    43cc:	10001b1e 	bne	r2,zero,443c <handle_button_press+0x94>
    {
        switch (edge_capture) 
    43d0:	d0a0c417 	ldw	r2,-31984(gp)
    43d4:	10c000a0 	cmpeqi	r3,r2,2
    43d8:	18000c1e 	bne	r3,zero,440c <handle_button_press+0x64>
    43dc:	10c000c8 	cmpgei	r3,r2,3
    43e0:	1800031e 	bne	r3,zero,43f0 <handle_button_press+0x48>
    43e4:	10800060 	cmpeqi	r2,r2,1
    43e8:	1000061e 	bne	r2,zero,4404 <handle_button_press+0x5c>
    43ec:	00000f06 	br	442c <handle_button_press+0x84>
    43f0:	10c00120 	cmpeqi	r3,r2,4
    43f4:	1800071e 	bne	r3,zero,4414 <handle_button_press+0x6c>
    43f8:	10800220 	cmpeqi	r2,r2,8
    43fc:	1000081e 	bne	r2,zero,4420 <handle_button_press+0x78>
    4400:	00000a06 	br	442c <handle_button_press+0x84>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    4404:	00042e80 	call	42e8 <count_led>
            break;
    4408:	00003006 	br	44cc <handle_button_press+0x124>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    440c:	00043080 	call	4308 <count_sevenseg>
            break;
    4410:	00002e06 	br	44cc <handle_button_press+0x124>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    4414:	e13fff17 	ldw	r4,-4(fp)
    4418:	00043280 	call	4328 <count_lcd>
            break;
    441c:	00002b06 	br	44cc <handle_button_press+0x124>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    4420:	e13fff17 	ldw	r4,-4(fp)
    4424:	00043540 	call	4354 <count_all>
            break;
    4428:	00002806 	br	44cc <handle_button_press+0x124>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    442c:	e13fff17 	ldw	r4,-4(fp)
    4430:	00043540 	call	4354 <count_all>
            break;
    4434:	0001883a 	nop
    4438:	00002406 	br	44cc <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    443c:	d0a0c417 	ldw	r2,-31984(gp)
    4440:	10c000a0 	cmpeqi	r3,r2,2
    4444:	18000f1e 	bne	r3,zero,4484 <handle_button_press+0xdc>
    4448:	10c000c8 	cmpgei	r3,r2,3
    444c:	1800031e 	bne	r3,zero,445c <handle_button_press+0xb4>
    4450:	10800060 	cmpeqi	r2,r2,1
    4454:	1000061e 	bne	r2,zero,4470 <handle_button_press+0xc8>
    4458:	00001906 	br	44c0 <handle_button_press+0x118>
    445c:	10c00120 	cmpeqi	r3,r2,4
    4460:	18000d1e 	bne	r3,zero,4498 <handle_button_press+0xf0>
    4464:	10800220 	cmpeqi	r2,r2,8
    4468:	1000101e 	bne	r2,zero,44ac <handle_button_press+0x104>
    446c:	00001406 	br	44c0 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
    4470:	01000034 	movhi	r4,0
    4474:	211ac604 	addi	r4,r4,27416
    4478:	00049880 	call	4988 <puts>
            edge_capture = 0;
    447c:	d020c415 	stw	zero,-31984(gp)
            break;
    4480:	00001206 	br	44cc <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
    4484:	01000034 	movhi	r4,0
    4488:	211ac904 	addi	r4,r4,27428
    448c:	00049880 	call	4988 <puts>
            edge_capture = 0;
    4490:	d020c415 	stw	zero,-31984(gp)
            break;
    4494:	00000d06 	br	44cc <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
    4498:	01000034 	movhi	r4,0
    449c:	211acc04 	addi	r4,r4,27440
    44a0:	00049880 	call	4988 <puts>
            edge_capture = 0;
    44a4:	d020c415 	stw	zero,-31984(gp)
            break;
    44a8:	00000806 	br	44cc <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
    44ac:	01000034 	movhi	r4,0
    44b0:	211acf04 	addi	r4,r4,27452
    44b4:	00049880 	call	4988 <puts>
            edge_capture = 0;
    44b8:	d020c415 	stw	zero,-31984(gp)
            break;
    44bc:	00000306 	br	44cc <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
    44c0:	01000034 	movhi	r4,0
    44c4:	211ad204 	addi	r4,r4,27464
    44c8:	00049880 	call	4988 <puts>
        }
    }
}
    44cc:	0001883a 	nop
    44d0:	e037883a 	mov	sp,fp
    44d4:	dfc00117 	ldw	ra,4(sp)
    44d8:	df000017 	ldw	fp,0(sp)
    44dc:	dec00204 	addi	sp,sp,8
    44e0:	f800283a 	ret

000044e4 <main>:
#define PORT_0_BASE 0x9020



int main(void)
{
    44e4:	defffa04 	addi	sp,sp,-24
    44e8:	dfc00515 	stw	ra,20(sp)
    44ec:	df000415 	stw	fp,16(sp)
    44f0:	df000404 	addi	fp,sp,16
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    unsigned short R =255, G= 0, B= 0;
    44f4:	00803fc4 	movi	r2,255
    44f8:	e0bffc0d 	sth	r2,-16(fp)
    44fc:	e03ffc8d 	sth	zero,-14(fp)
    4500:	e03fff0d 	sth	zero,-4(fp)
    int x,y;

    usleep(100000);
    4504:	010000b4 	movhi	r4,2
    4508:	2121a804 	addi	r4,r4,-31072
    450c:	00053b00 	call	53b0 <usleep>
    init_ports();
    4510:	00045ec0 	call	45ec <init_ports>


    while( 1 )
    {

    	   R = ~R;
    4514:	e0bffc0b 	ldhu	r2,-16(fp)
    4518:	0084303a 	nor	r2,zero,r2
    451c:	e0bffc0d 	sth	r2,-16(fp)
    	   G = ~G;
    4520:	e0bffc8b 	ldhu	r2,-14(fp)
    4524:	0084303a 	nor	r2,zero,r2
    4528:	e0bffc8d 	sth	r2,-14(fp)
    writecommand(ST7735_RAMWR);
    452c:	01000b04 	movi	r4,44
    4530:	00047f00 	call	47f0 <writecommand>
    usleep(10000);
    4534:	0109c404 	movi	r4,10000
    4538:	00053b00 	call	53b0 <usleep>
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, A0);
    453c:	00c00104 	movi	r3,4
    4540:	00a40c14 	movui	r2,36912
    4544:	10c00035 	stwio	r3,0(r2)
    for(x=0;x<128;x++)
    4548:	e03ffd15 	stw	zero,-12(fp)
    454c:	00001706 	br	45ac <main+0xc8>
       for(y=0;y<160;y++)
    4550:	e03ffe15 	stw	zero,-8(fp)
    4554:	00000f06 	br	4594 <main+0xb0>
       {

           //setpixel(x,y,0,0,100);
           xmitbyte(R);
    4558:	e0bffc0b 	ldhu	r2,-16(fp)
    455c:	10803fcc 	andi	r2,r2,255
    4560:	1009883a 	mov	r4,r2
    4564:	00047bc0 	call	47bc <xmitbyte>
           xmitbyte(G);
    4568:	e0bffc8b 	ldhu	r2,-14(fp)
    456c:	10803fcc 	andi	r2,r2,255
    4570:	1009883a 	mov	r4,r2
    4574:	00047bc0 	call	47bc <xmitbyte>
           xmitbyte(B);
    4578:	e0bfff0b 	ldhu	r2,-4(fp)
    457c:	10803fcc 	andi	r2,r2,255
    4580:	1009883a 	mov	r4,r2
    4584:	00047bc0 	call	47bc <xmitbyte>
    	   G = ~G;
    writecommand(ST7735_RAMWR);
    usleep(10000);
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, A0);
    for(x=0;x<128;x++)
       for(y=0;y<160;y++)
    4588:	e0bffe17 	ldw	r2,-8(fp)
    458c:	10800044 	addi	r2,r2,1
    4590:	e0bffe15 	stw	r2,-8(fp)
    4594:	e0bffe17 	ldw	r2,-8(fp)
    4598:	10802810 	cmplti	r2,r2,160
    459c:	103fee1e 	bne	r2,zero,4558 <_gp+0xffff570c>
    	   R = ~R;
    	   G = ~G;
    writecommand(ST7735_RAMWR);
    usleep(10000);
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, A0);
    for(x=0;x<128;x++)
    45a0:	e0bffd17 	ldw	r2,-12(fp)
    45a4:	10800044 	addi	r2,r2,1
    45a8:	e0bffd15 	stw	r2,-12(fp)
    45ac:	e0bffd17 	ldw	r2,-12(fp)
    45b0:	10802010 	cmplti	r2,r2,128
    45b4:	103fe61e 	bne	r2,zero,4550 <_gp+0xffff5704>
           xmitbyte(G);
           xmitbyte(B);
       }


    	IOWR_ALTERA_AVALON_PIO_SET_BITS(0x9020, BIT7);
    45b8:	00c02004 	movi	r3,128
    45bc:	00a40c14 	movui	r2,36912
    45c0:	10c00035 	stwio	r3,0(r2)

        usleep(100000);
    45c4:	010000b4 	movhi	r4,2
    45c8:	2121a804 	addi	r4,r4,-31072
    45cc:	00053b00 	call	53b0 <usleep>

        IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(0x9020, BIT7);
    45d0:	00c02004 	movi	r3,128
    45d4:	00a40d14 	movui	r2,36916
    45d8:	10c00035 	stwio	r3,0(r2)

    	usleep(100000);
    45dc:	010000b4 	movhi	r4,2
    45e0:	2121a804 	addi	r4,r4,-31072
    45e4:	00053b00 	call	53b0 <usleep>
    }
    45e8:	003fca06 	br	4514 <_gp+0xffff56c8>

000045ec <init_ports>:
#include "lcd.h"
#include "altera_avalon_spi_regs.h"

///Init [PORTS]
void init_ports()
{
    45ec:	defffe04 	addi	sp,sp,-8
    45f0:	dfc00115 	stw	ra,4(sp)
    45f4:	df000015 	stw	fp,0(sp)
    45f8:	d839883a 	mov	fp,sp

    //Start LCD init here
    //RSET = 1;
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, RST);
    45fc:	00c00204 	movi	r3,8
    4600:	00a40c14 	movui	r2,36912
    4604:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
    4608:	0100fa04 	movi	r4,1000
    460c:	00053b00 	call	53b0 <usleep>
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PORT_0_BASE, RST);
    4610:	00c00204 	movi	r3,8
    4614:	00a40d14 	movui	r2,36916
    4618:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
    461c:	0100fa04 	movi	r4,1000
    4620:	00053b00 	call	53b0 <usleep>
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, RST);
    4624:	00c00204 	movi	r3,8
    4628:	00a40c14 	movui	r2,36912
    462c:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
    4630:	0100fa04 	movi	r4,1000
    4634:	00053b00 	call	53b0 <usleep>

    writecommand(ST7735_SWRESET);
    4638:	01000044 	movi	r4,1
    463c:	00047f00 	call	47f0 <writecommand>
    usleep(120000);
    4640:	010000b4 	movhi	r4,2
    4644:	21353004 	addi	r4,r4,-11072
    4648:	00053b00 	call	53b0 <usleep>
    writecommand(ST7735_SLPOUT);
    464c:	01000444 	movi	r4,17
    4650:	00047f00 	call	47f0 <writecommand>
    usleep(120000);
    4654:	010000b4 	movhi	r4,2
    4658:	21353004 	addi	r4,r4,-11072
    465c:	00053b00 	call	53b0 <usleep>
    writecommand(ST7735_DISPON);
    4660:	01000a44 	movi	r4,41
    4664:	00047f00 	call	47f0 <writecommand>
    usleep(120000);
    4668:	010000b4 	movhi	r4,2
    466c:	21353004 	addi	r4,r4,-11072
    4670:	00053b00 	call	53b0 <usleep>

    writecommand(ST7735_CASET);
    4674:	01000a84 	movi	r4,42
    4678:	00047f00 	call	47f0 <writecommand>
	writedata(0x00);
    467c:	0009883a 	mov	r4,zero
    4680:	00048380 	call	4838 <writedata>
	writedata(0x00);   // XSTART = 2
    4684:	0009883a 	mov	r4,zero
    4688:	00048380 	call	4838 <writedata>
	writedata(0x00);
    468c:	0009883a 	mov	r4,zero
    4690:	00048380 	call	4838 <writedata>
	writedata(127);   // XEND = 128
    4694:	01001fc4 	movi	r4,127
    4698:	00048380 	call	4838 <writedata>

    usleep(100000);
    469c:	010000b4 	movhi	r4,2
    46a0:	2121a804 	addi	r4,r4,-31072
    46a4:	00053b00 	call	53b0 <usleep>

    writecommand(ST7735_RASET);
    46a8:	01000ac4 	movi	r4,43
    46ac:	00047f00 	call	47f0 <writecommand>
	writedata(0x00);
    46b0:	0009883a 	mov	r4,zero
    46b4:	00048380 	call	4838 <writedata>
	writedata(0x00);   // XSTART = 2]]
    46b8:	0009883a 	mov	r4,zero
    46bc:	00048380 	call	4838 <writedata>
	writedata(0x00);
    46c0:	0009883a 	mov	r4,zero
    46c4:	00048380 	call	4838 <writedata>
	writedata(159);   // XEND = 160
    46c8:	010027c4 	movi	r4,159
    46cc:	00048380 	call	4838 <writedata>

    usleep(100000);
    46d0:	010000b4 	movhi	r4,2
    46d4:	2121a804 	addi	r4,r4,-31072
    46d8:	00053b00 	call	53b0 <usleep>
}
    46dc:	0001883a 	nop
    46e0:	e037883a 	mov	sp,fp
    46e4:	dfc00117 	ldw	ra,4(sp)
    46e8:	df000017 	ldw	fp,0(sp)
    46ec:	dec00204 	addi	sp,sp,8
    46f0:	f800283a 	ret

000046f4 <setpixel>:

//set pixel
void setpixel(BYTE x, BYTE y, BYTE R, BYTE G, BYTE B)
{
    46f4:	defff904 	addi	sp,sp,-28
    46f8:	dfc00615 	stw	ra,24(sp)
    46fc:	df000515 	stw	fp,20(sp)
    4700:	df000504 	addi	fp,sp,20
    4704:	2011883a 	mov	r8,r4
    4708:	3009883a 	mov	r4,r6
    470c:	3807883a 	mov	r3,r7
    4710:	e0800217 	ldw	r2,8(fp)
    4714:	e23ffb05 	stb	r8,-20(fp)
    4718:	e17ffc05 	stb	r5,-16(fp)
    471c:	e13ffd05 	stb	r4,-12(fp)
    4720:	e0fffe05 	stb	r3,-8(fp)
    4724:	e0bfff05 	stb	r2,-4(fp)
    writecommand(ST7735_CASET);
    4728:	01000a84 	movi	r4,42
    472c:	00047f00 	call	47f0 <writecommand>
	writedata(0x00);
    4730:	0009883a 	mov	r4,zero
    4734:	00048380 	call	4838 <writedata>
	writedata(0x02);   // XSTART = 2
    4738:	01000084 	movi	r4,2
    473c:	00048380 	call	4838 <writedata>
	writedata(0x00);
    4740:	0009883a 	mov	r4,zero
    4744:	00048380 	call	4838 <writedata>
	writedata(0x81);   // XEND = 129
    4748:	01002044 	movi	r4,129
    474c:	00048380 	call	4838 <writedata>
   // DelayMs(10);
    writecommand(ST7735_RASET);
    4750:	01000ac4 	movi	r4,43
    4754:	00047f00 	call	47f0 <writecommand>
	writedata(0x00);
    4758:	0009883a 	mov	r4,zero
    475c:	00048380 	call	4838 <writedata>
	writedata(0x02);   // XSTART = 2
    4760:	01000084 	movi	r4,2
    4764:	00048380 	call	4838 <writedata>
	writedata(0x00);
    4768:	0009883a 	mov	r4,zero
    476c:	00048380 	call	4838 <writedata>
	writedata(0x81);   // XEND = 129
    4770:	01002044 	movi	r4,129
    4774:	00048380 	call	4838 <writedata>
    //DelayMs(10);
    writecommand(ST7735_RAMWR);
    4778:	01000b04 	movi	r4,44
    477c:	00047f00 	call	47f0 <writecommand>
    writedata(R);
    4780:	e0bffd03 	ldbu	r2,-12(fp)
    4784:	1009883a 	mov	r4,r2
    4788:	00048380 	call	4838 <writedata>
    writedata(G);
    478c:	e0bffe03 	ldbu	r2,-8(fp)
    4790:	1009883a 	mov	r4,r2
    4794:	00048380 	call	4838 <writedata>
    writedata(B);
    4798:	e0bfff03 	ldbu	r2,-4(fp)
    479c:	1009883a 	mov	r4,r2
    47a0:	00048380 	call	4838 <writedata>
}
    47a4:	0001883a 	nop
    47a8:	e037883a 	mov	sp,fp
    47ac:	dfc00117 	ldw	ra,4(sp)
    47b0:	df000017 	ldw	fp,0(sp)
    47b4:	dec00204 	addi	sp,sp,8
    47b8:	f800283a 	ret

000047bc <xmitbyte>:

//Send Byte
void  xmitbyte(unsigned char dat_a)
{
    47bc:	defffe04 	addi	sp,sp,-8
    47c0:	df000115 	stw	fp,4(sp)
    47c4:	df000104 	addi	fp,sp,4
    47c8:	2005883a 	mov	r2,r4
    47cc:	e0bfff05 	stb	r2,-4(fp)
 	IOWR_ALTERA_AVALON_SPI_TXDATA(0x9000,dat_a);
    47d0:	e0ffff03 	ldbu	r3,-4(fp)
    47d4:	00a40114 	movui	r2,36868
    47d8:	10c00035 	stwio	r3,0(r2)

   //    dat_a = dat_a<<1;
  // 	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, SCK);
 //  }
   	  // usleep(1000);
}
    47dc:	0001883a 	nop
    47e0:	e037883a 	mov	sp,fp
    47e4:	df000017 	ldw	fp,0(sp)
    47e8:	dec00104 	addi	sp,sp,4
    47ec:	f800283a 	ret

000047f0 <writecommand>:

//send command
void writecommand(unsigned char c)
{
    47f0:	defffd04 	addi	sp,sp,-12
    47f4:	dfc00215 	stw	ra,8(sp)
    47f8:	df000115 	stw	fp,4(sp)
    47fc:	df000104 	addi	fp,sp,4
    4800:	2005883a 	mov	r2,r4
    4804:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PORT_0_BASE, A0);
    4808:	00c00104 	movi	r3,4
    480c:	00a40d14 	movui	r2,36916
    4810:	10c00035 	stwio	r3,0(r2)
    xmitbyte(c);
    4814:	e0bfff03 	ldbu	r2,-4(fp)
    4818:	1009883a 	mov	r4,r2
    481c:	00047bc0 	call	47bc <xmitbyte>
}
    4820:	0001883a 	nop
    4824:	e037883a 	mov	sp,fp
    4828:	dfc00117 	ldw	ra,4(sp)
    482c:	df000017 	ldw	fp,0(sp)
    4830:	dec00204 	addi	sp,sp,8
    4834:	f800283a 	ret

00004838 <writedata>:

//send data
void writedata(unsigned char c)
{
    4838:	defffd04 	addi	sp,sp,-12
    483c:	dfc00215 	stw	ra,8(sp)
    4840:	df000115 	stw	fp,4(sp)
    4844:	df000104 	addi	fp,sp,4
    4848:	2005883a 	mov	r2,r4
    484c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PORT_0_BASE, A0);
    4850:	00c00104 	movi	r3,4
    4854:	00a40c14 	movui	r2,36912
    4858:	10c00035 	stwio	r3,0(r2)
    xmitbyte(c);
    485c:	e0bfff03 	ldbu	r2,-4(fp)
    4860:	1009883a 	mov	r4,r2
    4864:	00047bc0 	call	47bc <xmitbyte>
}
    4868:	0001883a 	nop
    486c:	e037883a 	mov	sp,fp
    4870:	dfc00117 	ldw	ra,4(sp)
    4874:	df000017 	ldw	fp,0(sp)
    4878:	dec00204 	addi	sp,sp,8
    487c:	f800283a 	ret

00004880 <_printf_r>:
    4880:	defffd04 	addi	sp,sp,-12
    4884:	dfc00015 	stw	ra,0(sp)
    4888:	d9800115 	stw	r6,4(sp)
    488c:	d9c00215 	stw	r7,8(sp)
    4890:	20c00217 	ldw	r3,8(r4)
    4894:	01800034 	movhi	r6,0
    4898:	3193db04 	addi	r6,r6,20332
    489c:	19800115 	stw	r6,4(r3)
    48a0:	280d883a 	mov	r6,r5
    48a4:	21400217 	ldw	r5,8(r4)
    48a8:	d9c00104 	addi	r7,sp,4
    48ac:	0004a240 	call	4a24 <___vfprintf_internal_r>
    48b0:	dfc00017 	ldw	ra,0(sp)
    48b4:	dec00304 	addi	sp,sp,12
    48b8:	f800283a 	ret

000048bc <printf>:
    48bc:	defffc04 	addi	sp,sp,-16
    48c0:	dfc00015 	stw	ra,0(sp)
    48c4:	d9400115 	stw	r5,4(sp)
    48c8:	d9800215 	stw	r6,8(sp)
    48cc:	d9c00315 	stw	r7,12(sp)
    48d0:	00800034 	movhi	r2,0
    48d4:	109b9404 	addi	r2,r2,28240
    48d8:	10800017 	ldw	r2,0(r2)
    48dc:	01400034 	movhi	r5,0
    48e0:	2953db04 	addi	r5,r5,20332
    48e4:	10c00217 	ldw	r3,8(r2)
    48e8:	d9800104 	addi	r6,sp,4
    48ec:	19400115 	stw	r5,4(r3)
    48f0:	200b883a 	mov	r5,r4
    48f4:	11000217 	ldw	r4,8(r2)
    48f8:	0004f500 	call	4f50 <__vfprintf_internal>
    48fc:	dfc00017 	ldw	ra,0(sp)
    4900:	dec00404 	addi	sp,sp,16
    4904:	f800283a 	ret

00004908 <_puts_r>:
    4908:	defffd04 	addi	sp,sp,-12
    490c:	dc000015 	stw	r16,0(sp)
    4910:	2021883a 	mov	r16,r4
    4914:	2809883a 	mov	r4,r5
    4918:	dfc00215 	stw	ra,8(sp)
    491c:	dc400115 	stw	r17,4(sp)
    4920:	2823883a 	mov	r17,r5
    4924:	000499c0 	call	499c <strlen>
    4928:	81400217 	ldw	r5,8(r16)
    492c:	01000034 	movhi	r4,0
    4930:	2113db04 	addi	r4,r4,20332
    4934:	29000115 	stw	r4,4(r5)
    4938:	100f883a 	mov	r7,r2
    493c:	880d883a 	mov	r6,r17
    4940:	8009883a 	mov	r4,r16
    4944:	0004f6c0 	call	4f6c <__sfvwrite_small_dev>
    4948:	00ffffc4 	movi	r3,-1
    494c:	10c00926 	beq	r2,r3,4974 <_puts_r+0x6c>
    4950:	81400217 	ldw	r5,8(r16)
    4954:	01800034 	movhi	r6,0
    4958:	01c00044 	movi	r7,1
    495c:	28800117 	ldw	r2,4(r5)
    4960:	319ad804 	addi	r6,r6,27488
    4964:	8009883a 	mov	r4,r16
    4968:	103ee83a 	callr	r2
    496c:	10bfffe0 	cmpeqi	r2,r2,-1
    4970:	0085c83a 	sub	r2,zero,r2
    4974:	dfc00217 	ldw	ra,8(sp)
    4978:	dc400117 	ldw	r17,4(sp)
    497c:	dc000017 	ldw	r16,0(sp)
    4980:	dec00304 	addi	sp,sp,12
    4984:	f800283a 	ret

00004988 <puts>:
    4988:	00800034 	movhi	r2,0
    498c:	109b9404 	addi	r2,r2,28240
    4990:	200b883a 	mov	r5,r4
    4994:	11000017 	ldw	r4,0(r2)
    4998:	00049081 	jmpi	4908 <_puts_r>

0000499c <strlen>:
    499c:	2005883a 	mov	r2,r4
    49a0:	10c00007 	ldb	r3,0(r2)
    49a4:	18000226 	beq	r3,zero,49b0 <strlen+0x14>
    49a8:	10800044 	addi	r2,r2,1
    49ac:	003ffc06 	br	49a0 <_gp+0xffff5b54>
    49b0:	1105c83a 	sub	r2,r2,r4
    49b4:	f800283a 	ret

000049b8 <print_repeat>:
    49b8:	defffb04 	addi	sp,sp,-20
    49bc:	dc800315 	stw	r18,12(sp)
    49c0:	dc400215 	stw	r17,8(sp)
    49c4:	dc000115 	stw	r16,4(sp)
    49c8:	dfc00415 	stw	ra,16(sp)
    49cc:	2025883a 	mov	r18,r4
    49d0:	2823883a 	mov	r17,r5
    49d4:	d9800005 	stb	r6,0(sp)
    49d8:	3821883a 	mov	r16,r7
    49dc:	04000a0e 	bge	zero,r16,4a08 <print_repeat+0x50>
    49e0:	88800117 	ldw	r2,4(r17)
    49e4:	01c00044 	movi	r7,1
    49e8:	d80d883a 	mov	r6,sp
    49ec:	880b883a 	mov	r5,r17
    49f0:	9009883a 	mov	r4,r18
    49f4:	103ee83a 	callr	r2
    49f8:	843fffc4 	addi	r16,r16,-1
    49fc:	103ff726 	beq	r2,zero,49dc <_gp+0xffff5b90>
    4a00:	00bfffc4 	movi	r2,-1
    4a04:	00000106 	br	4a0c <print_repeat+0x54>
    4a08:	0005883a 	mov	r2,zero
    4a0c:	dfc00417 	ldw	ra,16(sp)
    4a10:	dc800317 	ldw	r18,12(sp)
    4a14:	dc400217 	ldw	r17,8(sp)
    4a18:	dc000117 	ldw	r16,4(sp)
    4a1c:	dec00504 	addi	sp,sp,20
    4a20:	f800283a 	ret

00004a24 <___vfprintf_internal_r>:
    4a24:	deffe504 	addi	sp,sp,-108
    4a28:	d8c00804 	addi	r3,sp,32
    4a2c:	ddc01815 	stw	r23,96(sp)
    4a30:	dd801715 	stw	r22,92(sp)
    4a34:	dd401615 	stw	r21,88(sp)
    4a38:	dd001515 	stw	r20,84(sp)
    4a3c:	dcc01415 	stw	r19,80(sp)
    4a40:	dc801315 	stw	r18,76(sp)
    4a44:	dc401215 	stw	r17,72(sp)
    4a48:	dc001115 	stw	r16,68(sp)
    4a4c:	dfc01a15 	stw	ra,104(sp)
    4a50:	df001915 	stw	fp,100(sp)
    4a54:	2029883a 	mov	r20,r4
    4a58:	2823883a 	mov	r17,r5
    4a5c:	382d883a 	mov	r22,r7
    4a60:	d9800f15 	stw	r6,60(sp)
    4a64:	0021883a 	mov	r16,zero
    4a68:	d8000e15 	stw	zero,56(sp)
    4a6c:	d8000a15 	stw	zero,40(sp)
    4a70:	002b883a 	mov	r21,zero
    4a74:	0027883a 	mov	r19,zero
    4a78:	0025883a 	mov	r18,zero
    4a7c:	d8000c15 	stw	zero,48(sp)
    4a80:	d8000b15 	stw	zero,44(sp)
    4a84:	002f883a 	mov	r23,zero
    4a88:	d8c00915 	stw	r3,36(sp)
    4a8c:	d8c00f17 	ldw	r3,60(sp)
    4a90:	19000003 	ldbu	r4,0(r3)
    4a94:	20803fcc 	andi	r2,r4,255
    4a98:	1080201c 	xori	r2,r2,128
    4a9c:	10bfe004 	addi	r2,r2,-128
    4aa0:	10011e26 	beq	r2,zero,4f1c <___vfprintf_internal_r+0x4f8>
    4aa4:	00c00044 	movi	r3,1
    4aa8:	b8c01426 	beq	r23,r3,4afc <___vfprintf_internal_r+0xd8>
    4aac:	1dc00216 	blt	r3,r23,4ab8 <___vfprintf_internal_r+0x94>
    4ab0:	b8000626 	beq	r23,zero,4acc <___vfprintf_internal_r+0xa8>
    4ab4:	00011506 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4ab8:	01400084 	movi	r5,2
    4abc:	b9401d26 	beq	r23,r5,4b34 <___vfprintf_internal_r+0x110>
    4ac0:	014000c4 	movi	r5,3
    4ac4:	b9402b26 	beq	r23,r5,4b74 <___vfprintf_internal_r+0x150>
    4ac8:	00011006 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4acc:	01400944 	movi	r5,37
    4ad0:	1140fc26 	beq	r2,r5,4ec4 <___vfprintf_internal_r+0x4a0>
    4ad4:	88800117 	ldw	r2,4(r17)
    4ad8:	d9000005 	stb	r4,0(sp)
    4adc:	01c00044 	movi	r7,1
    4ae0:	d80d883a 	mov	r6,sp
    4ae4:	880b883a 	mov	r5,r17
    4ae8:	a009883a 	mov	r4,r20
    4aec:	103ee83a 	callr	r2
    4af0:	1000d81e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4af4:	84000044 	addi	r16,r16,1
    4af8:	00010406 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4afc:	01400c04 	movi	r5,48
    4b00:	1140fa26 	beq	r2,r5,4eec <___vfprintf_internal_r+0x4c8>
    4b04:	01400944 	movi	r5,37
    4b08:	11400a1e 	bne	r2,r5,4b34 <___vfprintf_internal_r+0x110>
    4b0c:	d8800005 	stb	r2,0(sp)
    4b10:	88800117 	ldw	r2,4(r17)
    4b14:	b80f883a 	mov	r7,r23
    4b18:	d80d883a 	mov	r6,sp
    4b1c:	880b883a 	mov	r5,r17
    4b20:	a009883a 	mov	r4,r20
    4b24:	103ee83a 	callr	r2
    4b28:	1000ca1e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4b2c:	84000044 	addi	r16,r16,1
    4b30:	0000f506 	br	4f08 <___vfprintf_internal_r+0x4e4>
    4b34:	25fff404 	addi	r23,r4,-48
    4b38:	bdc03fcc 	andi	r23,r23,255
    4b3c:	00c00244 	movi	r3,9
    4b40:	1dc00936 	bltu	r3,r23,4b68 <___vfprintf_internal_r+0x144>
    4b44:	00bfffc4 	movi	r2,-1
    4b48:	90800426 	beq	r18,r2,4b5c <___vfprintf_internal_r+0x138>
    4b4c:	01400284 	movi	r5,10
    4b50:	9009883a 	mov	r4,r18
    4b54:	00052300 	call	5230 <__mulsi3>
    4b58:	00000106 	br	4b60 <___vfprintf_internal_r+0x13c>
    4b5c:	0005883a 	mov	r2,zero
    4b60:	b8a5883a 	add	r18,r23,r2
    4b64:	0000e206 	br	4ef0 <___vfprintf_internal_r+0x4cc>
    4b68:	01400b84 	movi	r5,46
    4b6c:	1140e426 	beq	r2,r5,4f00 <___vfprintf_internal_r+0x4dc>
    4b70:	05c00084 	movi	r23,2
    4b74:	213ff404 	addi	r4,r4,-48
    4b78:	27003fcc 	andi	fp,r4,255
    4b7c:	00c00244 	movi	r3,9
    4b80:	1f000936 	bltu	r3,fp,4ba8 <___vfprintf_internal_r+0x184>
    4b84:	00bfffc4 	movi	r2,-1
    4b88:	98800426 	beq	r19,r2,4b9c <___vfprintf_internal_r+0x178>
    4b8c:	01400284 	movi	r5,10
    4b90:	9809883a 	mov	r4,r19
    4b94:	00052300 	call	5230 <__mulsi3>
    4b98:	00000106 	br	4ba0 <___vfprintf_internal_r+0x17c>
    4b9c:	0005883a 	mov	r2,zero
    4ba0:	e0a7883a 	add	r19,fp,r2
    4ba4:	0000d906 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4ba8:	00c01b04 	movi	r3,108
    4bac:	10c0d226 	beq	r2,r3,4ef8 <___vfprintf_internal_r+0x4d4>
    4bb0:	013fffc4 	movi	r4,-1
    4bb4:	99000226 	beq	r19,r4,4bc0 <___vfprintf_internal_r+0x19c>
    4bb8:	d8000b15 	stw	zero,44(sp)
    4bbc:	00000106 	br	4bc4 <___vfprintf_internal_r+0x1a0>
    4bc0:	04c00044 	movi	r19,1
    4bc4:	01001a44 	movi	r4,105
    4bc8:	11001626 	beq	r2,r4,4c24 <___vfprintf_internal_r+0x200>
    4bcc:	20800916 	blt	r4,r2,4bf4 <___vfprintf_internal_r+0x1d0>
    4bd0:	010018c4 	movi	r4,99
    4bd4:	11008826 	beq	r2,r4,4df8 <___vfprintf_internal_r+0x3d4>
    4bd8:	01001904 	movi	r4,100
    4bdc:	11001126 	beq	r2,r4,4c24 <___vfprintf_internal_r+0x200>
    4be0:	01001604 	movi	r4,88
    4be4:	1100c81e 	bne	r2,r4,4f08 <___vfprintf_internal_r+0x4e4>
    4be8:	00c00044 	movi	r3,1
    4bec:	d8c00e15 	stw	r3,56(sp)
    4bf0:	00001506 	br	4c48 <___vfprintf_internal_r+0x224>
    4bf4:	01001cc4 	movi	r4,115
    4bf8:	11009826 	beq	r2,r4,4e5c <___vfprintf_internal_r+0x438>
    4bfc:	20800416 	blt	r4,r2,4c10 <___vfprintf_internal_r+0x1ec>
    4c00:	01001bc4 	movi	r4,111
    4c04:	1100c01e 	bne	r2,r4,4f08 <___vfprintf_internal_r+0x4e4>
    4c08:	05400204 	movi	r21,8
    4c0c:	00000f06 	br	4c4c <___vfprintf_internal_r+0x228>
    4c10:	01001d44 	movi	r4,117
    4c14:	11000d26 	beq	r2,r4,4c4c <___vfprintf_internal_r+0x228>
    4c18:	01001e04 	movi	r4,120
    4c1c:	11000a26 	beq	r2,r4,4c48 <___vfprintf_internal_r+0x224>
    4c20:	0000b906 	br	4f08 <___vfprintf_internal_r+0x4e4>
    4c24:	d8c00a17 	ldw	r3,40(sp)
    4c28:	b7000104 	addi	fp,r22,4
    4c2c:	18000726 	beq	r3,zero,4c4c <___vfprintf_internal_r+0x228>
    4c30:	df000d15 	stw	fp,52(sp)
    4c34:	b5c00017 	ldw	r23,0(r22)
    4c38:	b800080e 	bge	r23,zero,4c5c <___vfprintf_internal_r+0x238>
    4c3c:	05efc83a 	sub	r23,zero,r23
    4c40:	02400044 	movi	r9,1
    4c44:	00000606 	br	4c60 <___vfprintf_internal_r+0x23c>
    4c48:	05400404 	movi	r21,16
    4c4c:	b0c00104 	addi	r3,r22,4
    4c50:	d8c00d15 	stw	r3,52(sp)
    4c54:	b5c00017 	ldw	r23,0(r22)
    4c58:	d8000a15 	stw	zero,40(sp)
    4c5c:	0013883a 	mov	r9,zero
    4c60:	d839883a 	mov	fp,sp
    4c64:	b8001726 	beq	r23,zero,4cc4 <___vfprintf_internal_r+0x2a0>
    4c68:	a80b883a 	mov	r5,r21
    4c6c:	b809883a 	mov	r4,r23
    4c70:	da401015 	stw	r9,64(sp)
    4c74:	00051740 	call	5174 <__udivsi3>
    4c78:	a80b883a 	mov	r5,r21
    4c7c:	1009883a 	mov	r4,r2
    4c80:	102d883a 	mov	r22,r2
    4c84:	00052300 	call	5230 <__mulsi3>
    4c88:	b885c83a 	sub	r2,r23,r2
    4c8c:	00c00244 	movi	r3,9
    4c90:	da401017 	ldw	r9,64(sp)
    4c94:	18800216 	blt	r3,r2,4ca0 <___vfprintf_internal_r+0x27c>
    4c98:	10800c04 	addi	r2,r2,48
    4c9c:	00000506 	br	4cb4 <___vfprintf_internal_r+0x290>
    4ca0:	d8c00e17 	ldw	r3,56(sp)
    4ca4:	18000226 	beq	r3,zero,4cb0 <___vfprintf_internal_r+0x28c>
    4ca8:	10800dc4 	addi	r2,r2,55
    4cac:	00000106 	br	4cb4 <___vfprintf_internal_r+0x290>
    4cb0:	108015c4 	addi	r2,r2,87
    4cb4:	e0800005 	stb	r2,0(fp)
    4cb8:	b02f883a 	mov	r23,r22
    4cbc:	e7000044 	addi	fp,fp,1
    4cc0:	003fe806 	br	4c64 <_gp+0xffff5e18>
    4cc4:	e6efc83a 	sub	r23,fp,sp
    4cc8:	9dc5c83a 	sub	r2,r19,r23
    4ccc:	0080090e 	bge	zero,r2,4cf4 <___vfprintf_internal_r+0x2d0>
    4cd0:	e085883a 	add	r2,fp,r2
    4cd4:	01400c04 	movi	r5,48
    4cd8:	d8c00917 	ldw	r3,36(sp)
    4cdc:	e009883a 	mov	r4,fp
    4ce0:	e0c0032e 	bgeu	fp,r3,4cf0 <___vfprintf_internal_r+0x2cc>
    4ce4:	e7000044 	addi	fp,fp,1
    4ce8:	21400005 	stb	r5,0(r4)
    4cec:	e0bffa1e 	bne	fp,r2,4cd8 <_gp+0xffff5e8c>
    4cf0:	e6efc83a 	sub	r23,fp,sp
    4cf4:	d8c00b17 	ldw	r3,44(sp)
    4cf8:	4dd1883a 	add	r8,r9,r23
    4cfc:	922dc83a 	sub	r22,r18,r8
    4d00:	18001626 	beq	r3,zero,4d5c <___vfprintf_internal_r+0x338>
    4d04:	48000a26 	beq	r9,zero,4d30 <___vfprintf_internal_r+0x30c>
    4d08:	00800b44 	movi	r2,45
    4d0c:	d8800805 	stb	r2,32(sp)
    4d10:	88800117 	ldw	r2,4(r17)
    4d14:	01c00044 	movi	r7,1
    4d18:	d9800804 	addi	r6,sp,32
    4d1c:	880b883a 	mov	r5,r17
    4d20:	a009883a 	mov	r4,r20
    4d24:	103ee83a 	callr	r2
    4d28:	10004a1e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4d2c:	84000044 	addi	r16,r16,1
    4d30:	0580070e 	bge	zero,r22,4d50 <___vfprintf_internal_r+0x32c>
    4d34:	b00f883a 	mov	r7,r22
    4d38:	01800c04 	movi	r6,48
    4d3c:	880b883a 	mov	r5,r17
    4d40:	a009883a 	mov	r4,r20
    4d44:	00049b80 	call	49b8 <print_repeat>
    4d48:	1000421e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4d4c:	85a1883a 	add	r16,r16,r22
    4d50:	e02d883a 	mov	r22,fp
    4d54:	bf2fc83a 	sub	r23,r23,fp
    4d58:	00002006 	br	4ddc <___vfprintf_internal_r+0x3b8>
    4d5c:	0580090e 	bge	zero,r22,4d84 <___vfprintf_internal_r+0x360>
    4d60:	b00f883a 	mov	r7,r22
    4d64:	01800804 	movi	r6,32
    4d68:	880b883a 	mov	r5,r17
    4d6c:	a009883a 	mov	r4,r20
    4d70:	da401015 	stw	r9,64(sp)
    4d74:	00049b80 	call	49b8 <print_repeat>
    4d78:	da401017 	ldw	r9,64(sp)
    4d7c:	1000351e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4d80:	85a1883a 	add	r16,r16,r22
    4d84:	483ff226 	beq	r9,zero,4d50 <_gp+0xffff5f04>
    4d88:	00800b44 	movi	r2,45
    4d8c:	d8800805 	stb	r2,32(sp)
    4d90:	88800117 	ldw	r2,4(r17)
    4d94:	01c00044 	movi	r7,1
    4d98:	d9800804 	addi	r6,sp,32
    4d9c:	880b883a 	mov	r5,r17
    4da0:	a009883a 	mov	r4,r20
    4da4:	103ee83a 	callr	r2
    4da8:	10002a1e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4dac:	84000044 	addi	r16,r16,1
    4db0:	003fe706 	br	4d50 <_gp+0xffff5f04>
    4db4:	b5bfffc4 	addi	r22,r22,-1
    4db8:	b0800003 	ldbu	r2,0(r22)
    4dbc:	01c00044 	movi	r7,1
    4dc0:	d9800804 	addi	r6,sp,32
    4dc4:	d8800805 	stb	r2,32(sp)
    4dc8:	88800117 	ldw	r2,4(r17)
    4dcc:	880b883a 	mov	r5,r17
    4dd0:	a009883a 	mov	r4,r20
    4dd4:	103ee83a 	callr	r2
    4dd8:	10001e1e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4ddc:	8585c83a 	sub	r2,r16,r22
    4de0:	b5c9883a 	add	r4,r22,r23
    4de4:	e085883a 	add	r2,fp,r2
    4de8:	013ff216 	blt	zero,r4,4db4 <_gp+0xffff5f68>
    4dec:	1021883a 	mov	r16,r2
    4df0:	dd800d17 	ldw	r22,52(sp)
    4df4:	00004406 	br	4f08 <___vfprintf_internal_r+0x4e4>
    4df8:	00800044 	movi	r2,1
    4dfc:	1480080e 	bge	r2,r18,4e20 <___vfprintf_internal_r+0x3fc>
    4e00:	95ffffc4 	addi	r23,r18,-1
    4e04:	b80f883a 	mov	r7,r23
    4e08:	01800804 	movi	r6,32
    4e0c:	880b883a 	mov	r5,r17
    4e10:	a009883a 	mov	r4,r20
    4e14:	00049b80 	call	49b8 <print_repeat>
    4e18:	10000e1e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4e1c:	85e1883a 	add	r16,r16,r23
    4e20:	b0800017 	ldw	r2,0(r22)
    4e24:	01c00044 	movi	r7,1
    4e28:	d80d883a 	mov	r6,sp
    4e2c:	d8800005 	stb	r2,0(sp)
    4e30:	88800117 	ldw	r2,4(r17)
    4e34:	880b883a 	mov	r5,r17
    4e38:	a009883a 	mov	r4,r20
    4e3c:	b5c00104 	addi	r23,r22,4
    4e40:	103ee83a 	callr	r2
    4e44:	1000031e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x430>
    4e48:	84000044 	addi	r16,r16,1
    4e4c:	b82d883a 	mov	r22,r23
    4e50:	00002d06 	br	4f08 <___vfprintf_internal_r+0x4e4>
    4e54:	00bfffc4 	movi	r2,-1
    4e58:	00003106 	br	4f20 <___vfprintf_internal_r+0x4fc>
    4e5c:	b5c00017 	ldw	r23,0(r22)
    4e60:	b7000104 	addi	fp,r22,4
    4e64:	b809883a 	mov	r4,r23
    4e68:	000499c0 	call	499c <strlen>
    4e6c:	9091c83a 	sub	r8,r18,r2
    4e70:	102d883a 	mov	r22,r2
    4e74:	0200090e 	bge	zero,r8,4e9c <___vfprintf_internal_r+0x478>
    4e78:	400f883a 	mov	r7,r8
    4e7c:	01800804 	movi	r6,32
    4e80:	880b883a 	mov	r5,r17
    4e84:	a009883a 	mov	r4,r20
    4e88:	da001015 	stw	r8,64(sp)
    4e8c:	00049b80 	call	49b8 <print_repeat>
    4e90:	da001017 	ldw	r8,64(sp)
    4e94:	103fef1e 	bne	r2,zero,4e54 <_gp+0xffff6008>
    4e98:	8221883a 	add	r16,r16,r8
    4e9c:	88800117 	ldw	r2,4(r17)
    4ea0:	b00f883a 	mov	r7,r22
    4ea4:	b80d883a 	mov	r6,r23
    4ea8:	880b883a 	mov	r5,r17
    4eac:	a009883a 	mov	r4,r20
    4eb0:	103ee83a 	callr	r2
    4eb4:	103fe71e 	bne	r2,zero,4e54 <_gp+0xffff6008>
    4eb8:	85a1883a 	add	r16,r16,r22
    4ebc:	e02d883a 	mov	r22,fp
    4ec0:	00001106 	br	4f08 <___vfprintf_internal_r+0x4e4>
    4ec4:	00c00044 	movi	r3,1
    4ec8:	04ffffc4 	movi	r19,-1
    4ecc:	d8000e15 	stw	zero,56(sp)
    4ed0:	d8c00a15 	stw	r3,40(sp)
    4ed4:	05400284 	movi	r21,10
    4ed8:	9825883a 	mov	r18,r19
    4edc:	d8000c15 	stw	zero,48(sp)
    4ee0:	d8000b15 	stw	zero,44(sp)
    4ee4:	182f883a 	mov	r23,r3
    4ee8:	00000806 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4eec:	ddc00b15 	stw	r23,44(sp)
    4ef0:	05c00084 	movi	r23,2
    4ef4:	00000506 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4ef8:	00c00044 	movi	r3,1
    4efc:	d8c00c15 	stw	r3,48(sp)
    4f00:	05c000c4 	movi	r23,3
    4f04:	00000106 	br	4f0c <___vfprintf_internal_r+0x4e8>
    4f08:	002f883a 	mov	r23,zero
    4f0c:	d8c00f17 	ldw	r3,60(sp)
    4f10:	18c00044 	addi	r3,r3,1
    4f14:	d8c00f15 	stw	r3,60(sp)
    4f18:	003edc06 	br	4a8c <_gp+0xffff5c40>
    4f1c:	8005883a 	mov	r2,r16
    4f20:	dfc01a17 	ldw	ra,104(sp)
    4f24:	df001917 	ldw	fp,100(sp)
    4f28:	ddc01817 	ldw	r23,96(sp)
    4f2c:	dd801717 	ldw	r22,92(sp)
    4f30:	dd401617 	ldw	r21,88(sp)
    4f34:	dd001517 	ldw	r20,84(sp)
    4f38:	dcc01417 	ldw	r19,80(sp)
    4f3c:	dc801317 	ldw	r18,76(sp)
    4f40:	dc401217 	ldw	r17,72(sp)
    4f44:	dc001117 	ldw	r16,68(sp)
    4f48:	dec01b04 	addi	sp,sp,108
    4f4c:	f800283a 	ret

00004f50 <__vfprintf_internal>:
    4f50:	00800034 	movhi	r2,0
    4f54:	109b9404 	addi	r2,r2,28240
    4f58:	300f883a 	mov	r7,r6
    4f5c:	280d883a 	mov	r6,r5
    4f60:	200b883a 	mov	r5,r4
    4f64:	11000017 	ldw	r4,0(r2)
    4f68:	0004a241 	jmpi	4a24 <___vfprintf_internal_r>

00004f6c <__sfvwrite_small_dev>:
    4f6c:	2880000b 	ldhu	r2,0(r5)
    4f70:	1080020c 	andi	r2,r2,8
    4f74:	10002126 	beq	r2,zero,4ffc <__sfvwrite_small_dev+0x90>
    4f78:	2880008f 	ldh	r2,2(r5)
    4f7c:	defffa04 	addi	sp,sp,-24
    4f80:	dc000015 	stw	r16,0(sp)
    4f84:	dfc00515 	stw	ra,20(sp)
    4f88:	dd000415 	stw	r20,16(sp)
    4f8c:	dcc00315 	stw	r19,12(sp)
    4f90:	dc800215 	stw	r18,8(sp)
    4f94:	dc400115 	stw	r17,4(sp)
    4f98:	2821883a 	mov	r16,r5
    4f9c:	10001216 	blt	r2,zero,4fe8 <__sfvwrite_small_dev+0x7c>
    4fa0:	2027883a 	mov	r19,r4
    4fa4:	3025883a 	mov	r18,r6
    4fa8:	3823883a 	mov	r17,r7
    4fac:	05010004 	movi	r20,1024
    4fb0:	04400b0e 	bge	zero,r17,4fe0 <__sfvwrite_small_dev+0x74>
    4fb4:	880f883a 	mov	r7,r17
    4fb8:	a440010e 	bge	r20,r17,4fc0 <__sfvwrite_small_dev+0x54>
    4fbc:	01c10004 	movi	r7,1024
    4fc0:	8140008f 	ldh	r5,2(r16)
    4fc4:	900d883a 	mov	r6,r18
    4fc8:	9809883a 	mov	r4,r19
    4fcc:	00050240 	call	5024 <_write_r>
    4fd0:	0080050e 	bge	zero,r2,4fe8 <__sfvwrite_small_dev+0x7c>
    4fd4:	88a3c83a 	sub	r17,r17,r2
    4fd8:	90a5883a 	add	r18,r18,r2
    4fdc:	003ff406 	br	4fb0 <_gp+0xffff6164>
    4fe0:	0005883a 	mov	r2,zero
    4fe4:	00000706 	br	5004 <__sfvwrite_small_dev+0x98>
    4fe8:	8080000b 	ldhu	r2,0(r16)
    4fec:	10801014 	ori	r2,r2,64
    4ff0:	8080000d 	sth	r2,0(r16)
    4ff4:	00bfffc4 	movi	r2,-1
    4ff8:	00000206 	br	5004 <__sfvwrite_small_dev+0x98>
    4ffc:	00bfffc4 	movi	r2,-1
    5000:	f800283a 	ret
    5004:	dfc00517 	ldw	ra,20(sp)
    5008:	dd000417 	ldw	r20,16(sp)
    500c:	dcc00317 	ldw	r19,12(sp)
    5010:	dc800217 	ldw	r18,8(sp)
    5014:	dc400117 	ldw	r17,4(sp)
    5018:	dc000017 	ldw	r16,0(sp)
    501c:	dec00604 	addi	sp,sp,24
    5020:	f800283a 	ret

00005024 <_write_r>:
    5024:	defffd04 	addi	sp,sp,-12
    5028:	dc000015 	stw	r16,0(sp)
    502c:	04000034 	movhi	r16,0
    5030:	dc400115 	stw	r17,4(sp)
    5034:	841c5804 	addi	r16,r16,29024
    5038:	2023883a 	mov	r17,r4
    503c:	2809883a 	mov	r4,r5
    5040:	300b883a 	mov	r5,r6
    5044:	380d883a 	mov	r6,r7
    5048:	dfc00215 	stw	ra,8(sp)
    504c:	80000015 	stw	zero,0(r16)
    5050:	000541c0 	call	541c <write>
    5054:	00ffffc4 	movi	r3,-1
    5058:	10c0031e 	bne	r2,r3,5068 <_write_r+0x44>
    505c:	80c00017 	ldw	r3,0(r16)
    5060:	18000126 	beq	r3,zero,5068 <_write_r+0x44>
    5064:	88c00015 	stw	r3,0(r17)
    5068:	dfc00217 	ldw	ra,8(sp)
    506c:	dc400117 	ldw	r17,4(sp)
    5070:	dc000017 	ldw	r16,0(sp)
    5074:	dec00304 	addi	sp,sp,12
    5078:	f800283a 	ret

0000507c <__divsi3>:
    507c:	20001b16 	blt	r4,zero,50ec <__divsi3+0x70>
    5080:	000f883a 	mov	r7,zero
    5084:	28001616 	blt	r5,zero,50e0 <__divsi3+0x64>
    5088:	200d883a 	mov	r6,r4
    508c:	29001a2e 	bgeu	r5,r4,50f8 <__divsi3+0x7c>
    5090:	00800804 	movi	r2,32
    5094:	00c00044 	movi	r3,1
    5098:	00000106 	br	50a0 <__divsi3+0x24>
    509c:	10000d26 	beq	r2,zero,50d4 <__divsi3+0x58>
    50a0:	294b883a 	add	r5,r5,r5
    50a4:	10bfffc4 	addi	r2,r2,-1
    50a8:	18c7883a 	add	r3,r3,r3
    50ac:	293ffb36 	bltu	r5,r4,509c <_gp+0xffff6250>
    50b0:	0005883a 	mov	r2,zero
    50b4:	18000726 	beq	r3,zero,50d4 <__divsi3+0x58>
    50b8:	0005883a 	mov	r2,zero
    50bc:	31400236 	bltu	r6,r5,50c8 <__divsi3+0x4c>
    50c0:	314dc83a 	sub	r6,r6,r5
    50c4:	10c4b03a 	or	r2,r2,r3
    50c8:	1806d07a 	srli	r3,r3,1
    50cc:	280ad07a 	srli	r5,r5,1
    50d0:	183ffa1e 	bne	r3,zero,50bc <_gp+0xffff6270>
    50d4:	38000126 	beq	r7,zero,50dc <__divsi3+0x60>
    50d8:	0085c83a 	sub	r2,zero,r2
    50dc:	f800283a 	ret
    50e0:	014bc83a 	sub	r5,zero,r5
    50e4:	39c0005c 	xori	r7,r7,1
    50e8:	003fe706 	br	5088 <_gp+0xffff623c>
    50ec:	0109c83a 	sub	r4,zero,r4
    50f0:	01c00044 	movi	r7,1
    50f4:	003fe306 	br	5084 <_gp+0xffff6238>
    50f8:	00c00044 	movi	r3,1
    50fc:	003fee06 	br	50b8 <_gp+0xffff626c>

00005100 <__modsi3>:
    5100:	20001716 	blt	r4,zero,5160 <__modsi3+0x60>
    5104:	000f883a 	mov	r7,zero
    5108:	2005883a 	mov	r2,r4
    510c:	28001216 	blt	r5,zero,5158 <__modsi3+0x58>
    5110:	2900162e 	bgeu	r5,r4,516c <__modsi3+0x6c>
    5114:	01800804 	movi	r6,32
    5118:	00c00044 	movi	r3,1
    511c:	00000106 	br	5124 <__modsi3+0x24>
    5120:	30000a26 	beq	r6,zero,514c <__modsi3+0x4c>
    5124:	294b883a 	add	r5,r5,r5
    5128:	31bfffc4 	addi	r6,r6,-1
    512c:	18c7883a 	add	r3,r3,r3
    5130:	293ffb36 	bltu	r5,r4,5120 <_gp+0xffff62d4>
    5134:	18000526 	beq	r3,zero,514c <__modsi3+0x4c>
    5138:	1806d07a 	srli	r3,r3,1
    513c:	11400136 	bltu	r2,r5,5144 <__modsi3+0x44>
    5140:	1145c83a 	sub	r2,r2,r5
    5144:	280ad07a 	srli	r5,r5,1
    5148:	183ffb1e 	bne	r3,zero,5138 <_gp+0xffff62ec>
    514c:	38000126 	beq	r7,zero,5154 <__modsi3+0x54>
    5150:	0085c83a 	sub	r2,zero,r2
    5154:	f800283a 	ret
    5158:	014bc83a 	sub	r5,zero,r5
    515c:	003fec06 	br	5110 <_gp+0xffff62c4>
    5160:	0109c83a 	sub	r4,zero,r4
    5164:	01c00044 	movi	r7,1
    5168:	003fe706 	br	5108 <_gp+0xffff62bc>
    516c:	00c00044 	movi	r3,1
    5170:	003ff106 	br	5138 <_gp+0xffff62ec>

00005174 <__udivsi3>:
    5174:	200d883a 	mov	r6,r4
    5178:	2900152e 	bgeu	r5,r4,51d0 <__udivsi3+0x5c>
    517c:	28001416 	blt	r5,zero,51d0 <__udivsi3+0x5c>
    5180:	00800804 	movi	r2,32
    5184:	00c00044 	movi	r3,1
    5188:	00000206 	br	5194 <__udivsi3+0x20>
    518c:	10000e26 	beq	r2,zero,51c8 <__udivsi3+0x54>
    5190:	28000516 	blt	r5,zero,51a8 <__udivsi3+0x34>
    5194:	294b883a 	add	r5,r5,r5
    5198:	10bfffc4 	addi	r2,r2,-1
    519c:	18c7883a 	add	r3,r3,r3
    51a0:	293ffa36 	bltu	r5,r4,518c <_gp+0xffff6340>
    51a4:	18000826 	beq	r3,zero,51c8 <__udivsi3+0x54>
    51a8:	0005883a 	mov	r2,zero
    51ac:	31400236 	bltu	r6,r5,51b8 <__udivsi3+0x44>
    51b0:	314dc83a 	sub	r6,r6,r5
    51b4:	10c4b03a 	or	r2,r2,r3
    51b8:	1806d07a 	srli	r3,r3,1
    51bc:	280ad07a 	srli	r5,r5,1
    51c0:	183ffa1e 	bne	r3,zero,51ac <_gp+0xffff6360>
    51c4:	f800283a 	ret
    51c8:	0005883a 	mov	r2,zero
    51cc:	f800283a 	ret
    51d0:	00c00044 	movi	r3,1
    51d4:	003ff406 	br	51a8 <_gp+0xffff635c>

000051d8 <__umodsi3>:
    51d8:	2005883a 	mov	r2,r4
    51dc:	2900122e 	bgeu	r5,r4,5228 <__umodsi3+0x50>
    51e0:	28001116 	blt	r5,zero,5228 <__umodsi3+0x50>
    51e4:	01800804 	movi	r6,32
    51e8:	00c00044 	movi	r3,1
    51ec:	00000206 	br	51f8 <__umodsi3+0x20>
    51f0:	30000c26 	beq	r6,zero,5224 <__umodsi3+0x4c>
    51f4:	28000516 	blt	r5,zero,520c <__umodsi3+0x34>
    51f8:	294b883a 	add	r5,r5,r5
    51fc:	31bfffc4 	addi	r6,r6,-1
    5200:	18c7883a 	add	r3,r3,r3
    5204:	293ffa36 	bltu	r5,r4,51f0 <_gp+0xffff63a4>
    5208:	18000626 	beq	r3,zero,5224 <__umodsi3+0x4c>
    520c:	1806d07a 	srli	r3,r3,1
    5210:	11400136 	bltu	r2,r5,5218 <__umodsi3+0x40>
    5214:	1145c83a 	sub	r2,r2,r5
    5218:	280ad07a 	srli	r5,r5,1
    521c:	183ffb1e 	bne	r3,zero,520c <_gp+0xffff63c0>
    5220:	f800283a 	ret
    5224:	f800283a 	ret
    5228:	00c00044 	movi	r3,1
    522c:	003ff706 	br	520c <_gp+0xffff63c0>

00005230 <__mulsi3>:
    5230:	0005883a 	mov	r2,zero
    5234:	20000726 	beq	r4,zero,5254 <__mulsi3+0x24>
    5238:	20c0004c 	andi	r3,r4,1
    523c:	2008d07a 	srli	r4,r4,1
    5240:	18000126 	beq	r3,zero,5248 <__mulsi3+0x18>
    5244:	1145883a 	add	r2,r2,r5
    5248:	294b883a 	add	r5,r5,r5
    524c:	203ffa1e 	bne	r4,zero,5238 <_gp+0xffff63ec>
    5250:	f800283a 	ret
    5254:	f800283a 	ret

00005258 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    5258:	defffc04 	addi	sp,sp,-16
    525c:	df000315 	stw	fp,12(sp)
    5260:	df000304 	addi	fp,sp,12
    5264:	e13ffd15 	stw	r4,-12(fp)
    5268:	e17ffe15 	stw	r5,-8(fp)
    526c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    5270:	e0fffe17 	ldw	r3,-8(fp)
    5274:	e0bffd17 	ldw	r2,-12(fp)
    5278:	18800c26 	beq	r3,r2,52ac <alt_load_section+0x54>
  {
    while( to != end )
    527c:	00000806 	br	52a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    5280:	e0bffe17 	ldw	r2,-8(fp)
    5284:	10c00104 	addi	r3,r2,4
    5288:	e0fffe15 	stw	r3,-8(fp)
    528c:	e0fffd17 	ldw	r3,-12(fp)
    5290:	19000104 	addi	r4,r3,4
    5294:	e13ffd15 	stw	r4,-12(fp)
    5298:	18c00017 	ldw	r3,0(r3)
    529c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    52a0:	e0fffe17 	ldw	r3,-8(fp)
    52a4:	e0bfff17 	ldw	r2,-4(fp)
    52a8:	18bff51e 	bne	r3,r2,5280 <_gp+0xffff6434>
    {
      *to++ = *from++;
    }
  }
}
    52ac:	0001883a 	nop
    52b0:	e037883a 	mov	sp,fp
    52b4:	df000017 	ldw	fp,0(sp)
    52b8:	dec00104 	addi	sp,sp,4
    52bc:	f800283a 	ret

000052c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    52c0:	defffe04 	addi	sp,sp,-8
    52c4:	dfc00115 	stw	ra,4(sp)
    52c8:	df000015 	stw	fp,0(sp)
    52cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    52d0:	01800034 	movhi	r6,0
    52d4:	319b9e04 	addi	r6,r6,28280
    52d8:	01400034 	movhi	r5,0
    52dc:	295ae604 	addi	r5,r5,27544
    52e0:	01000034 	movhi	r4,0
    52e4:	211b9e04 	addi	r4,r4,28280
    52e8:	00052580 	call	5258 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    52ec:	01800034 	movhi	r6,0
    52f0:	31908c04 	addi	r6,r6,16944
    52f4:	01400034 	movhi	r5,0
    52f8:	29500804 	addi	r5,r5,16416
    52fc:	01000034 	movhi	r4,0
    5300:	21100804 	addi	r4,r4,16416
    5304:	00052580 	call	5258 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    5308:	01800034 	movhi	r6,0
    530c:	319ae604 	addi	r6,r6,27544
    5310:	01400034 	movhi	r5,0
    5314:	295aa704 	addi	r5,r5,27292
    5318:	01000034 	movhi	r4,0
    531c:	211aa704 	addi	r4,r4,27292
    5320:	00052580 	call	5258 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5324:	0005b740 	call	5b74 <alt_dcache_flush_all>
  alt_icache_flush_all();
    5328:	0005ca00 	call	5ca0 <alt_icache_flush_all>
}
    532c:	0001883a 	nop
    5330:	e037883a 	mov	sp,fp
    5334:	dfc00117 	ldw	ra,4(sp)
    5338:	df000017 	ldw	fp,0(sp)
    533c:	dec00204 	addi	sp,sp,8
    5340:	f800283a 	ret

00005344 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5344:	defffd04 	addi	sp,sp,-12
    5348:	dfc00215 	stw	ra,8(sp)
    534c:	df000115 	stw	fp,4(sp)
    5350:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5354:	0009883a 	mov	r4,zero
    5358:	00055500 	call	5550 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    535c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5360:	00055880 	call	5588 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    5364:	01800034 	movhi	r6,0
    5368:	319ad904 	addi	r6,r6,27492
    536c:	01400034 	movhi	r5,0
    5370:	295ad904 	addi	r5,r5,27492
    5374:	01000034 	movhi	r4,0
    5378:	211ad904 	addi	r4,r4,27492
    537c:	00060440 	call	6044 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    5380:	d0a0c617 	ldw	r2,-31976(gp)
    5384:	d0e0c717 	ldw	r3,-31972(gp)
    5388:	d120c817 	ldw	r4,-31968(gp)
    538c:	200d883a 	mov	r6,r4
    5390:	180b883a 	mov	r5,r3
    5394:	1009883a 	mov	r4,r2
    5398:	00044e40 	call	44e4 <main>
    539c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    53a0:	01000044 	movi	r4,1
    53a4:	0005a9c0 	call	5a9c <close>
  exit (result);
    53a8:	e13fff17 	ldw	r4,-4(fp)
    53ac:	00068880 	call	6888 <exit>

000053b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    53b0:	defffd04 	addi	sp,sp,-12
    53b4:	dfc00215 	stw	ra,8(sp)
    53b8:	df000115 	stw	fp,4(sp)
    53bc:	df000104 	addi	fp,sp,4
    53c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    53c4:	e13fff17 	ldw	r4,-4(fp)
    53c8:	00059080 	call	5908 <alt_busy_sleep>
}
    53cc:	e037883a 	mov	sp,fp
    53d0:	dfc00117 	ldw	ra,4(sp)
    53d4:	df000017 	ldw	fp,0(sp)
    53d8:	dec00204 	addi	sp,sp,8
    53dc:	f800283a 	ret

000053e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    53e0:	defffe04 	addi	sp,sp,-8
    53e4:	dfc00115 	stw	ra,4(sp)
    53e8:	df000015 	stw	fp,0(sp)
    53ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    53f0:	d0a00717 	ldw	r2,-32740(gp)
    53f4:	10000326 	beq	r2,zero,5404 <alt_get_errno+0x24>
    53f8:	d0a00717 	ldw	r2,-32740(gp)
    53fc:	103ee83a 	callr	r2
    5400:	00000106 	br	5408 <alt_get_errno+0x28>
    5404:	d0a0c504 	addi	r2,gp,-31980
}
    5408:	e037883a 	mov	sp,fp
    540c:	dfc00117 	ldw	ra,4(sp)
    5410:	df000017 	ldw	fp,0(sp)
    5414:	dec00204 	addi	sp,sp,8
    5418:	f800283a 	ret

0000541c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    541c:	defff904 	addi	sp,sp,-28
    5420:	dfc00615 	stw	ra,24(sp)
    5424:	df000515 	stw	fp,20(sp)
    5428:	df000504 	addi	fp,sp,20
    542c:	e13ffd15 	stw	r4,-12(fp)
    5430:	e17ffe15 	stw	r5,-8(fp)
    5434:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5438:	e0bffd17 	ldw	r2,-12(fp)
    543c:	10000816 	blt	r2,zero,5460 <write+0x44>
    5440:	01400304 	movi	r5,12
    5444:	e13ffd17 	ldw	r4,-12(fp)
    5448:	00052300 	call	5230 <__mulsi3>
    544c:	1007883a 	mov	r3,r2
    5450:	00800034 	movhi	r2,0
    5454:	109b3304 	addi	r2,r2,27852
    5458:	1885883a 	add	r2,r3,r2
    545c:	00000106 	br	5464 <write+0x48>
    5460:	0005883a 	mov	r2,zero
    5464:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5468:	e0bffb17 	ldw	r2,-20(fp)
    546c:	10002126 	beq	r2,zero,54f4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5470:	e0bffb17 	ldw	r2,-20(fp)
    5474:	10800217 	ldw	r2,8(r2)
    5478:	108000cc 	andi	r2,r2,3
    547c:	10001826 	beq	r2,zero,54e0 <write+0xc4>
    5480:	e0bffb17 	ldw	r2,-20(fp)
    5484:	10800017 	ldw	r2,0(r2)
    5488:	10800617 	ldw	r2,24(r2)
    548c:	10001426 	beq	r2,zero,54e0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5490:	e0bffb17 	ldw	r2,-20(fp)
    5494:	10800017 	ldw	r2,0(r2)
    5498:	10800617 	ldw	r2,24(r2)
    549c:	e0ffff17 	ldw	r3,-4(fp)
    54a0:	180d883a 	mov	r6,r3
    54a4:	e17ffe17 	ldw	r5,-8(fp)
    54a8:	e13ffb17 	ldw	r4,-20(fp)
    54ac:	103ee83a 	callr	r2
    54b0:	e0bffc15 	stw	r2,-16(fp)
    54b4:	e0bffc17 	ldw	r2,-16(fp)
    54b8:	1000070e 	bge	r2,zero,54d8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    54bc:	00053e00 	call	53e0 <alt_get_errno>
    54c0:	1007883a 	mov	r3,r2
    54c4:	e0bffc17 	ldw	r2,-16(fp)
    54c8:	0085c83a 	sub	r2,zero,r2
    54cc:	18800015 	stw	r2,0(r3)
        return -1;
    54d0:	00bfffc4 	movi	r2,-1
    54d4:	00000c06 	br	5508 <write+0xec>
      }
      return rval;
    54d8:	e0bffc17 	ldw	r2,-16(fp)
    54dc:	00000a06 	br	5508 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    54e0:	00053e00 	call	53e0 <alt_get_errno>
    54e4:	1007883a 	mov	r3,r2
    54e8:	00800344 	movi	r2,13
    54ec:	18800015 	stw	r2,0(r3)
    54f0:	00000406 	br	5504 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    54f4:	00053e00 	call	53e0 <alt_get_errno>
    54f8:	1007883a 	mov	r3,r2
    54fc:	00801444 	movi	r2,81
    5500:	18800015 	stw	r2,0(r3)
  }
  return -1;
    5504:	00bfffc4 	movi	r2,-1
}
    5508:	e037883a 	mov	sp,fp
    550c:	dfc00117 	ldw	ra,4(sp)
    5510:	df000017 	ldw	fp,0(sp)
    5514:	dec00204 	addi	sp,sp,8
    5518:	f800283a 	ret

0000551c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    551c:	defffd04 	addi	sp,sp,-12
    5520:	dfc00215 	stw	ra,8(sp)
    5524:	df000115 	stw	fp,4(sp)
    5528:	df000104 	addi	fp,sp,4
    552c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    5530:	d1600404 	addi	r5,gp,-32752
    5534:	e13fff17 	ldw	r4,-4(fp)
    5538:	0005bfc0 	call	5bfc <alt_dev_llist_insert>
}
    553c:	e037883a 	mov	sp,fp
    5540:	dfc00117 	ldw	ra,4(sp)
    5544:	df000017 	ldw	fp,0(sp)
    5548:	dec00204 	addi	sp,sp,8
    554c:	f800283a 	ret

00005550 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5550:	defffd04 	addi	sp,sp,-12
    5554:	dfc00215 	stw	ra,8(sp)
    5558:	df000115 	stw	fp,4(sp)
    555c:	df000104 	addi	fp,sp,4
    5560:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    5564:	000656c0 	call	656c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5568:	00800044 	movi	r2,1
    556c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5570:	0001883a 	nop
    5574:	e037883a 	mov	sp,fp
    5578:	dfc00117 	ldw	ra,4(sp)
    557c:	df000017 	ldw	fp,0(sp)
    5580:	dec00204 	addi	sp,sp,8
    5584:	f800283a 	ret

00005588 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5588:	defffe04 	addi	sp,sp,-8
    558c:	dfc00115 	stw	ra,4(sp)
    5590:	df000015 	stw	fp,0(sp)
    5594:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    5598:	01c0fa04 	movi	r7,1000
    559c:	000d883a 	mov	r6,zero
    55a0:	000b883a 	mov	r5,zero
    55a4:	01241014 	movui	r4,36928
    55a8:	000588c0 	call	588c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    55ac:	01000034 	movhi	r4,0
    55b0:	211b1e04 	addi	r4,r4,27768
    55b4:	000551c0 	call	551c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    55b8:	0001883a 	nop
}
    55bc:	0001883a 	nop
    55c0:	e037883a 	mov	sp,fp
    55c4:	dfc00117 	ldw	ra,4(sp)
    55c8:	df000017 	ldw	fp,0(sp)
    55cc:	dec00204 	addi	sp,sp,8
    55d0:	f800283a 	ret

000055d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    55d4:	defffa04 	addi	sp,sp,-24
    55d8:	dfc00515 	stw	ra,20(sp)
    55dc:	df000415 	stw	fp,16(sp)
    55e0:	df000404 	addi	fp,sp,16
    55e4:	e13ffd15 	stw	r4,-12(fp)
    55e8:	e17ffe15 	stw	r5,-8(fp)
    55ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    55f0:	e0bffd17 	ldw	r2,-12(fp)
    55f4:	10800017 	ldw	r2,0(r2)
    55f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    55fc:	e0bffc17 	ldw	r2,-16(fp)
    5600:	10c00a04 	addi	r3,r2,40
    5604:	e0bffd17 	ldw	r2,-12(fp)
    5608:	10800217 	ldw	r2,8(r2)
    560c:	100f883a 	mov	r7,r2
    5610:	e1bfff17 	ldw	r6,-4(fp)
    5614:	e17ffe17 	ldw	r5,-8(fp)
    5618:	1809883a 	mov	r4,r3
    561c:	00056940 	call	5694 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5620:	e037883a 	mov	sp,fp
    5624:	dfc00117 	ldw	ra,4(sp)
    5628:	df000017 	ldw	fp,0(sp)
    562c:	dec00204 	addi	sp,sp,8
    5630:	f800283a 	ret

00005634 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5634:	defffa04 	addi	sp,sp,-24
    5638:	dfc00515 	stw	ra,20(sp)
    563c:	df000415 	stw	fp,16(sp)
    5640:	df000404 	addi	fp,sp,16
    5644:	e13ffd15 	stw	r4,-12(fp)
    5648:	e17ffe15 	stw	r5,-8(fp)
    564c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5650:	e0bffd17 	ldw	r2,-12(fp)
    5654:	10800017 	ldw	r2,0(r2)
    5658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    565c:	e0bffc17 	ldw	r2,-16(fp)
    5660:	10c00a04 	addi	r3,r2,40
    5664:	e0bffd17 	ldw	r2,-12(fp)
    5668:	10800217 	ldw	r2,8(r2)
    566c:	100f883a 	mov	r7,r2
    5670:	e1bfff17 	ldw	r6,-4(fp)
    5674:	e17ffe17 	ldw	r5,-8(fp)
    5678:	1809883a 	mov	r4,r3
    567c:	00057800 	call	5780 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5680:	e037883a 	mov	sp,fp
    5684:	dfc00117 	ldw	ra,4(sp)
    5688:	df000017 	ldw	fp,0(sp)
    568c:	dec00204 	addi	sp,sp,8
    5690:	f800283a 	ret

00005694 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    5694:	defff704 	addi	sp,sp,-36
    5698:	df000815 	stw	fp,32(sp)
    569c:	df000804 	addi	fp,sp,32
    56a0:	e13ffc15 	stw	r4,-16(fp)
    56a4:	e17ffd15 	stw	r5,-12(fp)
    56a8:	e1bffe15 	stw	r6,-8(fp)
    56ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    56b0:	e0bffc17 	ldw	r2,-16(fp)
    56b4:	10800017 	ldw	r2,0(r2)
    56b8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    56bc:	e0bffd17 	ldw	r2,-12(fp)
    56c0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    56c4:	e0bffe17 	ldw	r2,-8(fp)
    56c8:	e0fffd17 	ldw	r3,-12(fp)
    56cc:	1885883a 	add	r2,r3,r2
    56d0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    56d4:	00001206 	br	5720 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    56d8:	e0bff917 	ldw	r2,-28(fp)
    56dc:	10800037 	ldwio	r2,0(r2)
    56e0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    56e4:	e0bffb17 	ldw	r2,-20(fp)
    56e8:	10a0000c 	andi	r2,r2,32768
    56ec:	10000626 	beq	r2,zero,5708 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    56f0:	e0bff817 	ldw	r2,-32(fp)
    56f4:	10c00044 	addi	r3,r2,1
    56f8:	e0fff815 	stw	r3,-32(fp)
    56fc:	e0fffb17 	ldw	r3,-20(fp)
    5700:	10c00005 	stb	r3,0(r2)
    5704:	00000606 	br	5720 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    5708:	e0fff817 	ldw	r3,-32(fp)
    570c:	e0bffd17 	ldw	r2,-12(fp)
    5710:	1880071e 	bne	r3,r2,5730 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    5714:	e0bfff17 	ldw	r2,-4(fp)
    5718:	1090000c 	andi	r2,r2,16384
    571c:	1000061e 	bne	r2,zero,5738 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5720:	e0fff817 	ldw	r3,-32(fp)
    5724:	e0bffa17 	ldw	r2,-24(fp)
    5728:	18bfeb36 	bltu	r3,r2,56d8 <_gp+0xffff688c>
    572c:	00000306 	br	573c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    5730:	0001883a 	nop
    5734:	00000106 	br	573c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    5738:	0001883a 	nop
    
  }

  if (ptr != buffer)
    573c:	e0fff817 	ldw	r3,-32(fp)
    5740:	e0bffd17 	ldw	r2,-12(fp)
    5744:	18800426 	beq	r3,r2,5758 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    5748:	e0fff817 	ldw	r3,-32(fp)
    574c:	e0bffd17 	ldw	r2,-12(fp)
    5750:	1885c83a 	sub	r2,r3,r2
    5754:	00000606 	br	5770 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    5758:	e0bfff17 	ldw	r2,-4(fp)
    575c:	1090000c 	andi	r2,r2,16384
    5760:	10000226 	beq	r2,zero,576c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    5764:	00bffd44 	movi	r2,-11
    5768:	00000106 	br	5770 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    576c:	00bffec4 	movi	r2,-5
}
    5770:	e037883a 	mov	sp,fp
    5774:	df000017 	ldw	fp,0(sp)
    5778:	dec00104 	addi	sp,sp,4
    577c:	f800283a 	ret

00005780 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5780:	defff904 	addi	sp,sp,-28
    5784:	df000615 	stw	fp,24(sp)
    5788:	df000604 	addi	fp,sp,24
    578c:	e13ffc15 	stw	r4,-16(fp)
    5790:	e17ffd15 	stw	r5,-12(fp)
    5794:	e1bffe15 	stw	r6,-8(fp)
    5798:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    579c:	e0bffc17 	ldw	r2,-16(fp)
    57a0:	10800017 	ldw	r2,0(r2)
    57a4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    57a8:	e0bffe17 	ldw	r2,-8(fp)
    57ac:	e0fffd17 	ldw	r3,-12(fp)
    57b0:	1885883a 	add	r2,r3,r2
    57b4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    57b8:	00000e06 	br	57f4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    57bc:	e0bffa17 	ldw	r2,-24(fp)
    57c0:	10800104 	addi	r2,r2,4
    57c4:	10800037 	ldwio	r2,0(r2)
    57c8:	10bfffec 	andhi	r2,r2,65535
    57cc:	10000926 	beq	r2,zero,57f4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    57d0:	e0fffa17 	ldw	r3,-24(fp)
    57d4:	e0bffd17 	ldw	r2,-12(fp)
    57d8:	11000044 	addi	r4,r2,1
    57dc:	e13ffd15 	stw	r4,-12(fp)
    57e0:	10800003 	ldbu	r2,0(r2)
    57e4:	10803fcc 	andi	r2,r2,255
    57e8:	1080201c 	xori	r2,r2,128
    57ec:	10bfe004 	addi	r2,r2,-128
    57f0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    57f4:	e0fffd17 	ldw	r3,-12(fp)
    57f8:	e0bffb17 	ldw	r2,-20(fp)
    57fc:	18bfef36 	bltu	r3,r2,57bc <_gp+0xffff6970>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5800:	e0bffe17 	ldw	r2,-8(fp)
}
    5804:	e037883a 	mov	sp,fp
    5808:	df000017 	ldw	fp,0(sp)
    580c:	dec00104 	addi	sp,sp,4
    5810:	f800283a 	ret

00005814 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    5814:	defffa04 	addi	sp,sp,-24
    5818:	dfc00515 	stw	ra,20(sp)
    581c:	df000415 	stw	fp,16(sp)
    5820:	df000404 	addi	fp,sp,16
    5824:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    5828:	0007883a 	mov	r3,zero
    582c:	e0bfff17 	ldw	r2,-4(fp)
    5830:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    5834:	e0bfff17 	ldw	r2,-4(fp)
    5838:	10800104 	addi	r2,r2,4
    583c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5840:	0005303a 	rdctl	r2,status
    5844:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5848:	e0fffd17 	ldw	r3,-12(fp)
    584c:	00bfff84 	movi	r2,-2
    5850:	1884703a 	and	r2,r3,r2
    5854:	1001703a 	wrctl	status,r2
  
  return context;
    5858:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    585c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    5860:	00064640 	call	6464 <alt_tick>
    5864:	e0bffc17 	ldw	r2,-16(fp)
    5868:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    586c:	e0bffe17 	ldw	r2,-8(fp)
    5870:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    5874:	0001883a 	nop
    5878:	e037883a 	mov	sp,fp
    587c:	dfc00117 	ldw	ra,4(sp)
    5880:	df000017 	ldw	fp,0(sp)
    5884:	dec00204 	addi	sp,sp,8
    5888:	f800283a 	ret

0000588c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    588c:	defff804 	addi	sp,sp,-32
    5890:	dfc00715 	stw	ra,28(sp)
    5894:	df000615 	stw	fp,24(sp)
    5898:	df000604 	addi	fp,sp,24
    589c:	e13ffc15 	stw	r4,-16(fp)
    58a0:	e17ffd15 	stw	r5,-12(fp)
    58a4:	e1bffe15 	stw	r6,-8(fp)
    58a8:	e1ffff15 	stw	r7,-4(fp)
    58ac:	e0bfff17 	ldw	r2,-4(fp)
    58b0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    58b4:	d0a0ca17 	ldw	r2,-31960(gp)
    58b8:	1000021e 	bne	r2,zero,58c4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    58bc:	e0bffb17 	ldw	r2,-20(fp)
    58c0:	d0a0ca15 	stw	r2,-31960(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    58c4:	e0bffc17 	ldw	r2,-16(fp)
    58c8:	10800104 	addi	r2,r2,4
    58cc:	00c001c4 	movi	r3,7
    58d0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    58d4:	d8000015 	stw	zero,0(sp)
    58d8:	e1fffc17 	ldw	r7,-16(fp)
    58dc:	01800034 	movhi	r6,0
    58e0:	31960504 	addi	r6,r6,22548
    58e4:	e17ffe17 	ldw	r5,-8(fp)
    58e8:	e13ffd17 	ldw	r4,-12(fp)
    58ec:	0005cc00 	call	5cc0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    58f0:	0001883a 	nop
    58f4:	e037883a 	mov	sp,fp
    58f8:	dfc00117 	ldw	ra,4(sp)
    58fc:	df000017 	ldw	fp,0(sp)
    5900:	dec00204 	addi	sp,sp,8
    5904:	f800283a 	ret

00005908 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5908:	defffa04 	addi	sp,sp,-24
    590c:	dfc00515 	stw	ra,20(sp)
    5910:	df000415 	stw	fp,16(sp)
    5914:	df000404 	addi	fp,sp,16
    5918:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    591c:	00800244 	movi	r2,9
    5920:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    5924:	014003f4 	movhi	r5,15
    5928:	29509004 	addi	r5,r5,16960
    592c:	e13ffd17 	ldw	r4,-12(fp)
    5930:	00052300 	call	5230 <__mulsi3>
    5934:	100b883a 	mov	r5,r2
    5938:	01017db4 	movhi	r4,1526
    593c:	21384004 	addi	r4,r4,-7936
    5940:	00051740 	call	5174 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5944:	100b883a 	mov	r5,r2
    5948:	01200034 	movhi	r4,32768
    594c:	213fffc4 	addi	r4,r4,-1
    5950:	00051740 	call	5174 <__udivsi3>
    5954:	100b883a 	mov	r5,r2
    5958:	e13fff17 	ldw	r4,-4(fp)
    595c:	00051740 	call	5174 <__udivsi3>
    5960:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5964:	e0bffe17 	ldw	r2,-8(fp)
    5968:	10002a26 	beq	r2,zero,5a14 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    596c:	e03ffc15 	stw	zero,-16(fp)
    5970:	00001706 	br	59d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5974:	00a00034 	movhi	r2,32768
    5978:	10bfffc4 	addi	r2,r2,-1
    597c:	10bfffc4 	addi	r2,r2,-1
    5980:	103ffe1e 	bne	r2,zero,597c <_gp+0xffff6b30>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    5984:	014003f4 	movhi	r5,15
    5988:	29509004 	addi	r5,r5,16960
    598c:	e13ffd17 	ldw	r4,-12(fp)
    5990:	00052300 	call	5230 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5994:	100b883a 	mov	r5,r2
    5998:	01017db4 	movhi	r4,1526
    599c:	21384004 	addi	r4,r4,-7936
    59a0:	00051740 	call	5174 <__udivsi3>
    59a4:	100b883a 	mov	r5,r2
    59a8:	01200034 	movhi	r4,32768
    59ac:	213fffc4 	addi	r4,r4,-1
    59b0:	00051740 	call	5174 <__udivsi3>
    59b4:	1007883a 	mov	r3,r2
    59b8:	e0bfff17 	ldw	r2,-4(fp)
    59bc:	10c5c83a 	sub	r2,r2,r3
    59c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    59c4:	e0bffc17 	ldw	r2,-16(fp)
    59c8:	10800044 	addi	r2,r2,1
    59cc:	e0bffc15 	stw	r2,-16(fp)
    59d0:	e0fffc17 	ldw	r3,-16(fp)
    59d4:	e0bffe17 	ldw	r2,-8(fp)
    59d8:	18bfe616 	blt	r3,r2,5974 <_gp+0xffff6b28>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    59dc:	014003f4 	movhi	r5,15
    59e0:	29509004 	addi	r5,r5,16960
    59e4:	e13ffd17 	ldw	r4,-12(fp)
    59e8:	00052300 	call	5230 <__mulsi3>
    59ec:	100b883a 	mov	r5,r2
    59f0:	01017db4 	movhi	r4,1526
    59f4:	21384004 	addi	r4,r4,-7936
    59f8:	00051740 	call	5174 <__udivsi3>
    59fc:	e17fff17 	ldw	r5,-4(fp)
    5a00:	1009883a 	mov	r4,r2
    5a04:	00052300 	call	5230 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5a08:	10bfffc4 	addi	r2,r2,-1
    5a0c:	103ffe1e 	bne	r2,zero,5a08 <_gp+0xffff6bbc>
    5a10:	00000d06 	br	5a48 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5a14:	014003f4 	movhi	r5,15
    5a18:	29509004 	addi	r5,r5,16960
    5a1c:	e13ffd17 	ldw	r4,-12(fp)
    5a20:	00052300 	call	5230 <__mulsi3>
    5a24:	100b883a 	mov	r5,r2
    5a28:	01017db4 	movhi	r4,1526
    5a2c:	21384004 	addi	r4,r4,-7936
    5a30:	00051740 	call	5174 <__udivsi3>
    5a34:	e17fff17 	ldw	r5,-4(fp)
    5a38:	1009883a 	mov	r4,r2
    5a3c:	00052300 	call	5230 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5a40:	10bfffc4 	addi	r2,r2,-1
    5a44:	00bffe16 	blt	zero,r2,5a40 <_gp+0xffff6bf4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    5a48:	0005883a 	mov	r2,zero
}
    5a4c:	e037883a 	mov	sp,fp
    5a50:	dfc00117 	ldw	ra,4(sp)
    5a54:	df000017 	ldw	fp,0(sp)
    5a58:	dec00204 	addi	sp,sp,8
    5a5c:	f800283a 	ret

00005a60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5a60:	defffe04 	addi	sp,sp,-8
    5a64:	dfc00115 	stw	ra,4(sp)
    5a68:	df000015 	stw	fp,0(sp)
    5a6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5a70:	d0a00717 	ldw	r2,-32740(gp)
    5a74:	10000326 	beq	r2,zero,5a84 <alt_get_errno+0x24>
    5a78:	d0a00717 	ldw	r2,-32740(gp)
    5a7c:	103ee83a 	callr	r2
    5a80:	00000106 	br	5a88 <alt_get_errno+0x28>
    5a84:	d0a0c504 	addi	r2,gp,-31980
}
    5a88:	e037883a 	mov	sp,fp
    5a8c:	dfc00117 	ldw	ra,4(sp)
    5a90:	df000017 	ldw	fp,0(sp)
    5a94:	dec00204 	addi	sp,sp,8
    5a98:	f800283a 	ret

00005a9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5a9c:	defffb04 	addi	sp,sp,-20
    5aa0:	dfc00415 	stw	ra,16(sp)
    5aa4:	df000315 	stw	fp,12(sp)
    5aa8:	df000304 	addi	fp,sp,12
    5aac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5ab0:	e0bfff17 	ldw	r2,-4(fp)
    5ab4:	10000816 	blt	r2,zero,5ad8 <close+0x3c>
    5ab8:	01400304 	movi	r5,12
    5abc:	e13fff17 	ldw	r4,-4(fp)
    5ac0:	00052300 	call	5230 <__mulsi3>
    5ac4:	1007883a 	mov	r3,r2
    5ac8:	00800034 	movhi	r2,0
    5acc:	109b3304 	addi	r2,r2,27852
    5ad0:	1885883a 	add	r2,r3,r2
    5ad4:	00000106 	br	5adc <close+0x40>
    5ad8:	0005883a 	mov	r2,zero
    5adc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    5ae0:	e0bffd17 	ldw	r2,-12(fp)
    5ae4:	10001926 	beq	r2,zero,5b4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5ae8:	e0bffd17 	ldw	r2,-12(fp)
    5aec:	10800017 	ldw	r2,0(r2)
    5af0:	10800417 	ldw	r2,16(r2)
    5af4:	10000626 	beq	r2,zero,5b10 <close+0x74>
    5af8:	e0bffd17 	ldw	r2,-12(fp)
    5afc:	10800017 	ldw	r2,0(r2)
    5b00:	10800417 	ldw	r2,16(r2)
    5b04:	e13ffd17 	ldw	r4,-12(fp)
    5b08:	103ee83a 	callr	r2
    5b0c:	00000106 	br	5b14 <close+0x78>
    5b10:	0005883a 	mov	r2,zero
    5b14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5b18:	e13fff17 	ldw	r4,-4(fp)
    5b1c:	00063440 	call	6344 <alt_release_fd>
    if (rval < 0)
    5b20:	e0bffe17 	ldw	r2,-8(fp)
    5b24:	1000070e 	bge	r2,zero,5b44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    5b28:	0005a600 	call	5a60 <alt_get_errno>
    5b2c:	1007883a 	mov	r3,r2
    5b30:	e0bffe17 	ldw	r2,-8(fp)
    5b34:	0085c83a 	sub	r2,zero,r2
    5b38:	18800015 	stw	r2,0(r3)
      return -1;
    5b3c:	00bfffc4 	movi	r2,-1
    5b40:	00000706 	br	5b60 <close+0xc4>
    }
    return 0;
    5b44:	0005883a 	mov	r2,zero
    5b48:	00000506 	br	5b60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5b4c:	0005a600 	call	5a60 <alt_get_errno>
    5b50:	1007883a 	mov	r3,r2
    5b54:	00801444 	movi	r2,81
    5b58:	18800015 	stw	r2,0(r3)
    return -1;
    5b5c:	00bfffc4 	movi	r2,-1
  }
}
    5b60:	e037883a 	mov	sp,fp
    5b64:	dfc00117 	ldw	ra,4(sp)
    5b68:	df000017 	ldw	fp,0(sp)
    5b6c:	dec00204 	addi	sp,sp,8
    5b70:	f800283a 	ret

00005b74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5b74:	deffff04 	addi	sp,sp,-4
    5b78:	df000015 	stw	fp,0(sp)
    5b7c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5b80:	0001883a 	nop
    5b84:	e037883a 	mov	sp,fp
    5b88:	df000017 	ldw	fp,0(sp)
    5b8c:	dec00104 	addi	sp,sp,4
    5b90:	f800283a 	ret

00005b94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5b94:	defffc04 	addi	sp,sp,-16
    5b98:	df000315 	stw	fp,12(sp)
    5b9c:	df000304 	addi	fp,sp,12
    5ba0:	e13ffd15 	stw	r4,-12(fp)
    5ba4:	e17ffe15 	stw	r5,-8(fp)
    5ba8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5bac:	e0bfff17 	ldw	r2,-4(fp)
}
    5bb0:	e037883a 	mov	sp,fp
    5bb4:	df000017 	ldw	fp,0(sp)
    5bb8:	dec00104 	addi	sp,sp,4
    5bbc:	f800283a 	ret

00005bc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5bc0:	defffe04 	addi	sp,sp,-8
    5bc4:	dfc00115 	stw	ra,4(sp)
    5bc8:	df000015 	stw	fp,0(sp)
    5bcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5bd0:	d0a00717 	ldw	r2,-32740(gp)
    5bd4:	10000326 	beq	r2,zero,5be4 <alt_get_errno+0x24>
    5bd8:	d0a00717 	ldw	r2,-32740(gp)
    5bdc:	103ee83a 	callr	r2
    5be0:	00000106 	br	5be8 <alt_get_errno+0x28>
    5be4:	d0a0c504 	addi	r2,gp,-31980
}
    5be8:	e037883a 	mov	sp,fp
    5bec:	dfc00117 	ldw	ra,4(sp)
    5bf0:	df000017 	ldw	fp,0(sp)
    5bf4:	dec00204 	addi	sp,sp,8
    5bf8:	f800283a 	ret

00005bfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5bfc:	defffa04 	addi	sp,sp,-24
    5c00:	dfc00515 	stw	ra,20(sp)
    5c04:	df000415 	stw	fp,16(sp)
    5c08:	df000404 	addi	fp,sp,16
    5c0c:	e13ffe15 	stw	r4,-8(fp)
    5c10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5c14:	e0bffe17 	ldw	r2,-8(fp)
    5c18:	10000326 	beq	r2,zero,5c28 <alt_dev_llist_insert+0x2c>
    5c1c:	e0bffe17 	ldw	r2,-8(fp)
    5c20:	10800217 	ldw	r2,8(r2)
    5c24:	1000061e 	bne	r2,zero,5c40 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    5c28:	0005bc00 	call	5bc0 <alt_get_errno>
    5c2c:	1007883a 	mov	r3,r2
    5c30:	00800584 	movi	r2,22
    5c34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5c38:	00bffa84 	movi	r2,-22
    5c3c:	00001306 	br	5c8c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5c40:	e0bffe17 	ldw	r2,-8(fp)
    5c44:	e0ffff17 	ldw	r3,-4(fp)
    5c48:	e0fffc15 	stw	r3,-16(fp)
    5c4c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5c50:	e0bffd17 	ldw	r2,-12(fp)
    5c54:	e0fffc17 	ldw	r3,-16(fp)
    5c58:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5c5c:	e0bffc17 	ldw	r2,-16(fp)
    5c60:	10c00017 	ldw	r3,0(r2)
    5c64:	e0bffd17 	ldw	r2,-12(fp)
    5c68:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5c6c:	e0bffc17 	ldw	r2,-16(fp)
    5c70:	10800017 	ldw	r2,0(r2)
    5c74:	e0fffd17 	ldw	r3,-12(fp)
    5c78:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5c7c:	e0bffc17 	ldw	r2,-16(fp)
    5c80:	e0fffd17 	ldw	r3,-12(fp)
    5c84:	10c00015 	stw	r3,0(r2)

  return 0;  
    5c88:	0005883a 	mov	r2,zero
}
    5c8c:	e037883a 	mov	sp,fp
    5c90:	dfc00117 	ldw	ra,4(sp)
    5c94:	df000017 	ldw	fp,0(sp)
    5c98:	dec00204 	addi	sp,sp,8
    5c9c:	f800283a 	ret

00005ca0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5ca0:	deffff04 	addi	sp,sp,-4
    5ca4:	df000015 	stw	fp,0(sp)
    5ca8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5cac:	0001883a 	nop
    5cb0:	e037883a 	mov	sp,fp
    5cb4:	df000017 	ldw	fp,0(sp)
    5cb8:	dec00104 	addi	sp,sp,4
    5cbc:	f800283a 	ret

00005cc0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5cc0:	defff904 	addi	sp,sp,-28
    5cc4:	dfc00615 	stw	ra,24(sp)
    5cc8:	df000515 	stw	fp,20(sp)
    5ccc:	df000504 	addi	fp,sp,20
    5cd0:	e13ffc15 	stw	r4,-16(fp)
    5cd4:	e17ffd15 	stw	r5,-12(fp)
    5cd8:	e1bffe15 	stw	r6,-8(fp)
    5cdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5ce0:	e0800217 	ldw	r2,8(fp)
    5ce4:	d8800015 	stw	r2,0(sp)
    5ce8:	e1ffff17 	ldw	r7,-4(fp)
    5cec:	e1bffe17 	ldw	r6,-8(fp)
    5cf0:	e17ffd17 	ldw	r5,-12(fp)
    5cf4:	e13ffc17 	ldw	r4,-16(fp)
    5cf8:	0005e700 	call	5e70 <alt_iic_isr_register>
}  
    5cfc:	e037883a 	mov	sp,fp
    5d00:	dfc00117 	ldw	ra,4(sp)
    5d04:	df000017 	ldw	fp,0(sp)
    5d08:	dec00204 	addi	sp,sp,8
    5d0c:	f800283a 	ret

00005d10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5d10:	defff904 	addi	sp,sp,-28
    5d14:	df000615 	stw	fp,24(sp)
    5d18:	df000604 	addi	fp,sp,24
    5d1c:	e13ffe15 	stw	r4,-8(fp)
    5d20:	e17fff15 	stw	r5,-4(fp)
    5d24:	e0bfff17 	ldw	r2,-4(fp)
    5d28:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d2c:	0005303a 	rdctl	r2,status
    5d30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d34:	e0fffb17 	ldw	r3,-20(fp)
    5d38:	00bfff84 	movi	r2,-2
    5d3c:	1884703a 	and	r2,r3,r2
    5d40:	1001703a 	wrctl	status,r2
  
  return context;
    5d44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5d48:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    5d4c:	00c00044 	movi	r3,1
    5d50:	e0bffa17 	ldw	r2,-24(fp)
    5d54:	1884983a 	sll	r2,r3,r2
    5d58:	1007883a 	mov	r3,r2
    5d5c:	d0a0c917 	ldw	r2,-31964(gp)
    5d60:	1884b03a 	or	r2,r3,r2
    5d64:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5d68:	d0a0c917 	ldw	r2,-31964(gp)
    5d6c:	100170fa 	wrctl	ienable,r2
    5d70:	e0bffc17 	ldw	r2,-16(fp)
    5d74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d78:	e0bffd17 	ldw	r2,-12(fp)
    5d7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5d80:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    5d84:	0001883a 	nop
}
    5d88:	e037883a 	mov	sp,fp
    5d8c:	df000017 	ldw	fp,0(sp)
    5d90:	dec00104 	addi	sp,sp,4
    5d94:	f800283a 	ret

00005d98 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5d98:	defff904 	addi	sp,sp,-28
    5d9c:	df000615 	stw	fp,24(sp)
    5da0:	df000604 	addi	fp,sp,24
    5da4:	e13ffe15 	stw	r4,-8(fp)
    5da8:	e17fff15 	stw	r5,-4(fp)
    5dac:	e0bfff17 	ldw	r2,-4(fp)
    5db0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5db4:	0005303a 	rdctl	r2,status
    5db8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5dbc:	e0fffb17 	ldw	r3,-20(fp)
    5dc0:	00bfff84 	movi	r2,-2
    5dc4:	1884703a 	and	r2,r3,r2
    5dc8:	1001703a 	wrctl	status,r2
  
  return context;
    5dcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5dd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5dd4:	00c00044 	movi	r3,1
    5dd8:	e0bffa17 	ldw	r2,-24(fp)
    5ddc:	1884983a 	sll	r2,r3,r2
    5de0:	0084303a 	nor	r2,zero,r2
    5de4:	1007883a 	mov	r3,r2
    5de8:	d0a0c917 	ldw	r2,-31964(gp)
    5dec:	1884703a 	and	r2,r3,r2
    5df0:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5df4:	d0a0c917 	ldw	r2,-31964(gp)
    5df8:	100170fa 	wrctl	ienable,r2
    5dfc:	e0bffc17 	ldw	r2,-16(fp)
    5e00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e04:	e0bffd17 	ldw	r2,-12(fp)
    5e08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5e0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    5e10:	0001883a 	nop
}
    5e14:	e037883a 	mov	sp,fp
    5e18:	df000017 	ldw	fp,0(sp)
    5e1c:	dec00104 	addi	sp,sp,4
    5e20:	f800283a 	ret

00005e24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5e24:	defffc04 	addi	sp,sp,-16
    5e28:	df000315 	stw	fp,12(sp)
    5e2c:	df000304 	addi	fp,sp,12
    5e30:	e13ffe15 	stw	r4,-8(fp)
    5e34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5e38:	000530fa 	rdctl	r2,ienable
    5e3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5e40:	00c00044 	movi	r3,1
    5e44:	e0bfff17 	ldw	r2,-4(fp)
    5e48:	1884983a 	sll	r2,r3,r2
    5e4c:	1007883a 	mov	r3,r2
    5e50:	e0bffd17 	ldw	r2,-12(fp)
    5e54:	1884703a 	and	r2,r3,r2
    5e58:	1004c03a 	cmpne	r2,r2,zero
    5e5c:	10803fcc 	andi	r2,r2,255
}
    5e60:	e037883a 	mov	sp,fp
    5e64:	df000017 	ldw	fp,0(sp)
    5e68:	dec00104 	addi	sp,sp,4
    5e6c:	f800283a 	ret

00005e70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5e70:	defff504 	addi	sp,sp,-44
    5e74:	dfc00a15 	stw	ra,40(sp)
    5e78:	df000915 	stw	fp,36(sp)
    5e7c:	df000904 	addi	fp,sp,36
    5e80:	e13ffc15 	stw	r4,-16(fp)
    5e84:	e17ffd15 	stw	r5,-12(fp)
    5e88:	e1bffe15 	stw	r6,-8(fp)
    5e8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5e90:	00bffa84 	movi	r2,-22
    5e94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5e98:	e0bffd17 	ldw	r2,-12(fp)
    5e9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5ea0:	e0bff817 	ldw	r2,-32(fp)
    5ea4:	10800808 	cmpgei	r2,r2,32
    5ea8:	1000271e 	bne	r2,zero,5f48 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5eac:	0005303a 	rdctl	r2,status
    5eb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5eb4:	e0fffb17 	ldw	r3,-20(fp)
    5eb8:	00bfff84 	movi	r2,-2
    5ebc:	1884703a 	and	r2,r3,r2
    5ec0:	1001703a 	wrctl	status,r2
  
  return context;
    5ec4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5ec8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    5ecc:	00800034 	movhi	r2,0
    5ed0:	109c6004 	addi	r2,r2,29056
    5ed4:	e0fff817 	ldw	r3,-32(fp)
    5ed8:	180690fa 	slli	r3,r3,3
    5edc:	10c5883a 	add	r2,r2,r3
    5ee0:	e0fffe17 	ldw	r3,-8(fp)
    5ee4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5ee8:	00800034 	movhi	r2,0
    5eec:	109c6004 	addi	r2,r2,29056
    5ef0:	e0fff817 	ldw	r3,-32(fp)
    5ef4:	180690fa 	slli	r3,r3,3
    5ef8:	10c5883a 	add	r2,r2,r3
    5efc:	10800104 	addi	r2,r2,4
    5f00:	e0ffff17 	ldw	r3,-4(fp)
    5f04:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5f08:	e0bffe17 	ldw	r2,-8(fp)
    5f0c:	10000526 	beq	r2,zero,5f24 <alt_iic_isr_register+0xb4>
    5f10:	e0bff817 	ldw	r2,-32(fp)
    5f14:	100b883a 	mov	r5,r2
    5f18:	e13ffc17 	ldw	r4,-16(fp)
    5f1c:	0005d100 	call	5d10 <alt_ic_irq_enable>
    5f20:	00000406 	br	5f34 <alt_iic_isr_register+0xc4>
    5f24:	e0bff817 	ldw	r2,-32(fp)
    5f28:	100b883a 	mov	r5,r2
    5f2c:	e13ffc17 	ldw	r4,-16(fp)
    5f30:	0005d980 	call	5d98 <alt_ic_irq_disable>
    5f34:	e0bff715 	stw	r2,-36(fp)
    5f38:	e0bffa17 	ldw	r2,-24(fp)
    5f3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f40:	e0bff917 	ldw	r2,-28(fp)
    5f44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5f48:	e0bff717 	ldw	r2,-36(fp)
}
    5f4c:	e037883a 	mov	sp,fp
    5f50:	dfc00117 	ldw	ra,4(sp)
    5f54:	df000017 	ldw	fp,0(sp)
    5f58:	dec00204 	addi	sp,sp,8
    5f5c:	f800283a 	ret

00005f60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5f60:	defff804 	addi	sp,sp,-32
    5f64:	dfc00715 	stw	ra,28(sp)
    5f68:	df000615 	stw	fp,24(sp)
    5f6c:	dc000515 	stw	r16,20(sp)
    5f70:	df000604 	addi	fp,sp,24
    5f74:	e13ffb15 	stw	r4,-20(fp)
    5f78:	e17ffc15 	stw	r5,-16(fp)
    5f7c:	e1bffd15 	stw	r6,-12(fp)
    5f80:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    5f84:	e1bffe17 	ldw	r6,-8(fp)
    5f88:	e17ffd17 	ldw	r5,-12(fp)
    5f8c:	e13ffc17 	ldw	r4,-16(fp)
    5f90:	00061e80 	call	61e8 <open>
    5f94:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5f98:	e0bffa17 	ldw	r2,-24(fp)
    5f9c:	10002216 	blt	r2,zero,6028 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5fa0:	04000034 	movhi	r16,0
    5fa4:	841b3304 	addi	r16,r16,27852
    5fa8:	e0bffa17 	ldw	r2,-24(fp)
    5fac:	01400304 	movi	r5,12
    5fb0:	1009883a 	mov	r4,r2
    5fb4:	00052300 	call	5230 <__mulsi3>
    5fb8:	8085883a 	add	r2,r16,r2
    5fbc:	10c00017 	ldw	r3,0(r2)
    5fc0:	e0bffb17 	ldw	r2,-20(fp)
    5fc4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5fc8:	04000034 	movhi	r16,0
    5fcc:	841b3304 	addi	r16,r16,27852
    5fd0:	e0bffa17 	ldw	r2,-24(fp)
    5fd4:	01400304 	movi	r5,12
    5fd8:	1009883a 	mov	r4,r2
    5fdc:	00052300 	call	5230 <__mulsi3>
    5fe0:	8085883a 	add	r2,r16,r2
    5fe4:	10800104 	addi	r2,r2,4
    5fe8:	10c00017 	ldw	r3,0(r2)
    5fec:	e0bffb17 	ldw	r2,-20(fp)
    5ff0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5ff4:	04000034 	movhi	r16,0
    5ff8:	841b3304 	addi	r16,r16,27852
    5ffc:	e0bffa17 	ldw	r2,-24(fp)
    6000:	01400304 	movi	r5,12
    6004:	1009883a 	mov	r4,r2
    6008:	00052300 	call	5230 <__mulsi3>
    600c:	8085883a 	add	r2,r16,r2
    6010:	10800204 	addi	r2,r2,8
    6014:	10c00017 	ldw	r3,0(r2)
    6018:	e0bffb17 	ldw	r2,-20(fp)
    601c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    6020:	e13ffa17 	ldw	r4,-24(fp)
    6024:	00063440 	call	6344 <alt_release_fd>
  }
} 
    6028:	0001883a 	nop
    602c:	e6ffff04 	addi	sp,fp,-4
    6030:	dfc00217 	ldw	ra,8(sp)
    6034:	df000117 	ldw	fp,4(sp)
    6038:	dc000017 	ldw	r16,0(sp)
    603c:	dec00304 	addi	sp,sp,12
    6040:	f800283a 	ret

00006044 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    6044:	defffb04 	addi	sp,sp,-20
    6048:	dfc00415 	stw	ra,16(sp)
    604c:	df000315 	stw	fp,12(sp)
    6050:	df000304 	addi	fp,sp,12
    6054:	e13ffd15 	stw	r4,-12(fp)
    6058:	e17ffe15 	stw	r5,-8(fp)
    605c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    6060:	01c07fc4 	movi	r7,511
    6064:	01800044 	movi	r6,1
    6068:	e17ffd17 	ldw	r5,-12(fp)
    606c:	01000034 	movhi	r4,0
    6070:	211b3604 	addi	r4,r4,27864
    6074:	0005f600 	call	5f60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    6078:	01c07fc4 	movi	r7,511
    607c:	000d883a 	mov	r6,zero
    6080:	e17ffe17 	ldw	r5,-8(fp)
    6084:	01000034 	movhi	r4,0
    6088:	211b3304 	addi	r4,r4,27852
    608c:	0005f600 	call	5f60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    6090:	01c07fc4 	movi	r7,511
    6094:	01800044 	movi	r6,1
    6098:	e17fff17 	ldw	r5,-4(fp)
    609c:	01000034 	movhi	r4,0
    60a0:	211b3904 	addi	r4,r4,27876
    60a4:	0005f600 	call	5f60 <alt_open_fd>
}  
    60a8:	0001883a 	nop
    60ac:	e037883a 	mov	sp,fp
    60b0:	dfc00117 	ldw	ra,4(sp)
    60b4:	df000017 	ldw	fp,0(sp)
    60b8:	dec00204 	addi	sp,sp,8
    60bc:	f800283a 	ret

000060c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    60c0:	defffe04 	addi	sp,sp,-8
    60c4:	dfc00115 	stw	ra,4(sp)
    60c8:	df000015 	stw	fp,0(sp)
    60cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    60d0:	d0a00717 	ldw	r2,-32740(gp)
    60d4:	10000326 	beq	r2,zero,60e4 <alt_get_errno+0x24>
    60d8:	d0a00717 	ldw	r2,-32740(gp)
    60dc:	103ee83a 	callr	r2
    60e0:	00000106 	br	60e8 <alt_get_errno+0x28>
    60e4:	d0a0c504 	addi	r2,gp,-31980
}
    60e8:	e037883a 	mov	sp,fp
    60ec:	dfc00117 	ldw	ra,4(sp)
    60f0:	df000017 	ldw	fp,0(sp)
    60f4:	dec00204 	addi	sp,sp,8
    60f8:	f800283a 	ret

000060fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    60fc:	defffb04 	addi	sp,sp,-20
    6100:	dfc00415 	stw	ra,16(sp)
    6104:	df000315 	stw	fp,12(sp)
    6108:	dc000215 	stw	r16,8(sp)
    610c:	df000304 	addi	fp,sp,12
    6110:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6114:	e0bffe17 	ldw	r2,-8(fp)
    6118:	10800217 	ldw	r2,8(r2)
    611c:	10d00034 	orhi	r3,r2,16384
    6120:	e0bffe17 	ldw	r2,-8(fp)
    6124:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6128:	e03ffd15 	stw	zero,-12(fp)
    612c:	00002306 	br	61bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6130:	04000034 	movhi	r16,0
    6134:	841b3304 	addi	r16,r16,27852
    6138:	e0bffd17 	ldw	r2,-12(fp)
    613c:	01400304 	movi	r5,12
    6140:	1009883a 	mov	r4,r2
    6144:	00052300 	call	5230 <__mulsi3>
    6148:	8085883a 	add	r2,r16,r2
    614c:	10c00017 	ldw	r3,0(r2)
    6150:	e0bffe17 	ldw	r2,-8(fp)
    6154:	10800017 	ldw	r2,0(r2)
    6158:	1880151e 	bne	r3,r2,61b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    615c:	04000034 	movhi	r16,0
    6160:	841b3304 	addi	r16,r16,27852
    6164:	e0bffd17 	ldw	r2,-12(fp)
    6168:	01400304 	movi	r5,12
    616c:	1009883a 	mov	r4,r2
    6170:	00052300 	call	5230 <__mulsi3>
    6174:	8085883a 	add	r2,r16,r2
    6178:	10800204 	addi	r2,r2,8
    617c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6180:	10000b0e 	bge	r2,zero,61b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    6184:	01400304 	movi	r5,12
    6188:	e13ffd17 	ldw	r4,-12(fp)
    618c:	00052300 	call	5230 <__mulsi3>
    6190:	1007883a 	mov	r3,r2
    6194:	00800034 	movhi	r2,0
    6198:	109b3304 	addi	r2,r2,27852
    619c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    61a0:	e0bffe17 	ldw	r2,-8(fp)
    61a4:	18800226 	beq	r3,r2,61b0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    61a8:	00bffcc4 	movi	r2,-13
    61ac:	00000806 	br	61d0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    61b0:	e0bffd17 	ldw	r2,-12(fp)
    61b4:	10800044 	addi	r2,r2,1
    61b8:	e0bffd15 	stw	r2,-12(fp)
    61bc:	d0a00617 	ldw	r2,-32744(gp)
    61c0:	1007883a 	mov	r3,r2
    61c4:	e0bffd17 	ldw	r2,-12(fp)
    61c8:	18bfd92e 	bgeu	r3,r2,6130 <_gp+0xffff72e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    61cc:	0005883a 	mov	r2,zero
}
    61d0:	e6ffff04 	addi	sp,fp,-4
    61d4:	dfc00217 	ldw	ra,8(sp)
    61d8:	df000117 	ldw	fp,4(sp)
    61dc:	dc000017 	ldw	r16,0(sp)
    61e0:	dec00304 	addi	sp,sp,12
    61e4:	f800283a 	ret

000061e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    61e8:	defff604 	addi	sp,sp,-40
    61ec:	dfc00915 	stw	ra,36(sp)
    61f0:	df000815 	stw	fp,32(sp)
    61f4:	df000804 	addi	fp,sp,32
    61f8:	e13ffd15 	stw	r4,-12(fp)
    61fc:	e17ffe15 	stw	r5,-8(fp)
    6200:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6204:	00bfffc4 	movi	r2,-1
    6208:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    620c:	00bffb44 	movi	r2,-19
    6210:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6214:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6218:	d1600404 	addi	r5,gp,-32752
    621c:	e13ffd17 	ldw	r4,-12(fp)
    6220:	00065900 	call	6590 <alt_find_dev>
    6224:	e0bff815 	stw	r2,-32(fp)
    6228:	e0bff817 	ldw	r2,-32(fp)
    622c:	1000051e 	bne	r2,zero,6244 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6230:	e13ffd17 	ldw	r4,-12(fp)
    6234:	00066200 	call	6620 <alt_find_file>
    6238:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    623c:	00800044 	movi	r2,1
    6240:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6244:	e0bff817 	ldw	r2,-32(fp)
    6248:	10002b26 	beq	r2,zero,62f8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    624c:	e13ff817 	ldw	r4,-32(fp)
    6250:	00067280 	call	6728 <alt_get_fd>
    6254:	e0bff915 	stw	r2,-28(fp)
    6258:	e0bff917 	ldw	r2,-28(fp)
    625c:	1000030e 	bge	r2,zero,626c <open+0x84>
    {
      status = index;
    6260:	e0bff917 	ldw	r2,-28(fp)
    6264:	e0bffa15 	stw	r2,-24(fp)
    6268:	00002506 	br	6300 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    626c:	01400304 	movi	r5,12
    6270:	e13ff917 	ldw	r4,-28(fp)
    6274:	00052300 	call	5230 <__mulsi3>
    6278:	1007883a 	mov	r3,r2
    627c:	00800034 	movhi	r2,0
    6280:	109b3304 	addi	r2,r2,27852
    6284:	1885883a 	add	r2,r3,r2
    6288:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    628c:	e0fffe17 	ldw	r3,-8(fp)
    6290:	00900034 	movhi	r2,16384
    6294:	10bfffc4 	addi	r2,r2,-1
    6298:	1886703a 	and	r3,r3,r2
    629c:	e0bffc17 	ldw	r2,-16(fp)
    62a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    62a4:	e0bffb17 	ldw	r2,-20(fp)
    62a8:	1000051e 	bne	r2,zero,62c0 <open+0xd8>
    62ac:	e13ffc17 	ldw	r4,-16(fp)
    62b0:	00060fc0 	call	60fc <alt_file_locked>
    62b4:	e0bffa15 	stw	r2,-24(fp)
    62b8:	e0bffa17 	ldw	r2,-24(fp)
    62bc:	10001016 	blt	r2,zero,6300 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    62c0:	e0bff817 	ldw	r2,-32(fp)
    62c4:	10800317 	ldw	r2,12(r2)
    62c8:	10000826 	beq	r2,zero,62ec <open+0x104>
    62cc:	e0bff817 	ldw	r2,-32(fp)
    62d0:	10800317 	ldw	r2,12(r2)
    62d4:	e1ffff17 	ldw	r7,-4(fp)
    62d8:	e1bffe17 	ldw	r6,-8(fp)
    62dc:	e17ffd17 	ldw	r5,-12(fp)
    62e0:	e13ffc17 	ldw	r4,-16(fp)
    62e4:	103ee83a 	callr	r2
    62e8:	00000106 	br	62f0 <open+0x108>
    62ec:	0005883a 	mov	r2,zero
    62f0:	e0bffa15 	stw	r2,-24(fp)
    62f4:	00000206 	br	6300 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    62f8:	00bffb44 	movi	r2,-19
    62fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6300:	e0bffa17 	ldw	r2,-24(fp)
    6304:	1000090e 	bge	r2,zero,632c <open+0x144>
  {
    alt_release_fd (index);  
    6308:	e13ff917 	ldw	r4,-28(fp)
    630c:	00063440 	call	6344 <alt_release_fd>
    ALT_ERRNO = -status;
    6310:	00060c00 	call	60c0 <alt_get_errno>
    6314:	1007883a 	mov	r3,r2
    6318:	e0bffa17 	ldw	r2,-24(fp)
    631c:	0085c83a 	sub	r2,zero,r2
    6320:	18800015 	stw	r2,0(r3)
    return -1;
    6324:	00bfffc4 	movi	r2,-1
    6328:	00000106 	br	6330 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    632c:	e0bff917 	ldw	r2,-28(fp)
}
    6330:	e037883a 	mov	sp,fp
    6334:	dfc00117 	ldw	ra,4(sp)
    6338:	df000017 	ldw	fp,0(sp)
    633c:	dec00204 	addi	sp,sp,8
    6340:	f800283a 	ret

00006344 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    6344:	defffc04 	addi	sp,sp,-16
    6348:	dfc00315 	stw	ra,12(sp)
    634c:	df000215 	stw	fp,8(sp)
    6350:	dc000115 	stw	r16,4(sp)
    6354:	df000204 	addi	fp,sp,8
    6358:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    635c:	e0bffe17 	ldw	r2,-8(fp)
    6360:	108000d0 	cmplti	r2,r2,3
    6364:	1000111e 	bne	r2,zero,63ac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    6368:	04000034 	movhi	r16,0
    636c:	841b3304 	addi	r16,r16,27852
    6370:	e0bffe17 	ldw	r2,-8(fp)
    6374:	01400304 	movi	r5,12
    6378:	1009883a 	mov	r4,r2
    637c:	00052300 	call	5230 <__mulsi3>
    6380:	8085883a 	add	r2,r16,r2
    6384:	10800204 	addi	r2,r2,8
    6388:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    638c:	04000034 	movhi	r16,0
    6390:	841b3304 	addi	r16,r16,27852
    6394:	e0bffe17 	ldw	r2,-8(fp)
    6398:	01400304 	movi	r5,12
    639c:	1009883a 	mov	r4,r2
    63a0:	00052300 	call	5230 <__mulsi3>
    63a4:	8085883a 	add	r2,r16,r2
    63a8:	10000015 	stw	zero,0(r2)
  }
}
    63ac:	0001883a 	nop
    63b0:	e6ffff04 	addi	sp,fp,-4
    63b4:	dfc00217 	ldw	ra,8(sp)
    63b8:	df000117 	ldw	fp,4(sp)
    63bc:	dc000017 	ldw	r16,0(sp)
    63c0:	dec00304 	addi	sp,sp,12
    63c4:	f800283a 	ret

000063c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    63c8:	defffa04 	addi	sp,sp,-24
    63cc:	df000515 	stw	fp,20(sp)
    63d0:	df000504 	addi	fp,sp,20
    63d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    63d8:	0005303a 	rdctl	r2,status
    63dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63e0:	e0fffc17 	ldw	r3,-16(fp)
    63e4:	00bfff84 	movi	r2,-2
    63e8:	1884703a 	and	r2,r3,r2
    63ec:	1001703a 	wrctl	status,r2
  
  return context;
    63f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    63f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    63f8:	e0bfff17 	ldw	r2,-4(fp)
    63fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    6400:	e0bffd17 	ldw	r2,-12(fp)
    6404:	10800017 	ldw	r2,0(r2)
    6408:	e0fffd17 	ldw	r3,-12(fp)
    640c:	18c00117 	ldw	r3,4(r3)
    6410:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    6414:	e0bffd17 	ldw	r2,-12(fp)
    6418:	10800117 	ldw	r2,4(r2)
    641c:	e0fffd17 	ldw	r3,-12(fp)
    6420:	18c00017 	ldw	r3,0(r3)
    6424:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    6428:	e0bffd17 	ldw	r2,-12(fp)
    642c:	e0fffd17 	ldw	r3,-12(fp)
    6430:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    6434:	e0bffd17 	ldw	r2,-12(fp)
    6438:	e0fffd17 	ldw	r3,-12(fp)
    643c:	10c00015 	stw	r3,0(r2)
    6440:	e0bffb17 	ldw	r2,-20(fp)
    6444:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6448:	e0bffe17 	ldw	r2,-8(fp)
    644c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    6450:	0001883a 	nop
    6454:	e037883a 	mov	sp,fp
    6458:	df000017 	ldw	fp,0(sp)
    645c:	dec00104 	addi	sp,sp,4
    6460:	f800283a 	ret

00006464 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    6464:	defffb04 	addi	sp,sp,-20
    6468:	dfc00415 	stw	ra,16(sp)
    646c:	df000315 	stw	fp,12(sp)
    6470:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    6474:	d0a00917 	ldw	r2,-32732(gp)
    6478:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    647c:	d0a0cb17 	ldw	r2,-31956(gp)
    6480:	10800044 	addi	r2,r2,1
    6484:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6488:	00002e06 	br	6544 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    648c:	e0bffd17 	ldw	r2,-12(fp)
    6490:	10800017 	ldw	r2,0(r2)
    6494:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6498:	e0bffd17 	ldw	r2,-12(fp)
    649c:	10800403 	ldbu	r2,16(r2)
    64a0:	10803fcc 	andi	r2,r2,255
    64a4:	10000426 	beq	r2,zero,64b8 <alt_tick+0x54>
    64a8:	d0a0cb17 	ldw	r2,-31956(gp)
    64ac:	1000021e 	bne	r2,zero,64b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    64b0:	e0bffd17 	ldw	r2,-12(fp)
    64b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    64b8:	e0bffd17 	ldw	r2,-12(fp)
    64bc:	10800217 	ldw	r2,8(r2)
    64c0:	d0e0cb17 	ldw	r3,-31956(gp)
    64c4:	18801d36 	bltu	r3,r2,653c <alt_tick+0xd8>
    64c8:	e0bffd17 	ldw	r2,-12(fp)
    64cc:	10800403 	ldbu	r2,16(r2)
    64d0:	10803fcc 	andi	r2,r2,255
    64d4:	1000191e 	bne	r2,zero,653c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    64d8:	e0bffd17 	ldw	r2,-12(fp)
    64dc:	10800317 	ldw	r2,12(r2)
    64e0:	e0fffd17 	ldw	r3,-12(fp)
    64e4:	18c00517 	ldw	r3,20(r3)
    64e8:	1809883a 	mov	r4,r3
    64ec:	103ee83a 	callr	r2
    64f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    64f4:	e0bfff17 	ldw	r2,-4(fp)
    64f8:	1000031e 	bne	r2,zero,6508 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    64fc:	e13ffd17 	ldw	r4,-12(fp)
    6500:	00063c80 	call	63c8 <alt_alarm_stop>
    6504:	00000d06 	br	653c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    6508:	e0bffd17 	ldw	r2,-12(fp)
    650c:	10c00217 	ldw	r3,8(r2)
    6510:	e0bfff17 	ldw	r2,-4(fp)
    6514:	1887883a 	add	r3,r3,r2
    6518:	e0bffd17 	ldw	r2,-12(fp)
    651c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    6520:	e0bffd17 	ldw	r2,-12(fp)
    6524:	10c00217 	ldw	r3,8(r2)
    6528:	d0a0cb17 	ldw	r2,-31956(gp)
    652c:	1880032e 	bgeu	r3,r2,653c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    6530:	e0bffd17 	ldw	r2,-12(fp)
    6534:	00c00044 	movi	r3,1
    6538:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    653c:	e0bffe17 	ldw	r2,-8(fp)
    6540:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6544:	e0fffd17 	ldw	r3,-12(fp)
    6548:	d0a00904 	addi	r2,gp,-32732
    654c:	18bfcf1e 	bne	r3,r2,648c <_gp+0xffff7640>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    6550:	0001883a 	nop
}
    6554:	0001883a 	nop
    6558:	e037883a 	mov	sp,fp
    655c:	dfc00117 	ldw	ra,4(sp)
    6560:	df000017 	ldw	fp,0(sp)
    6564:	dec00204 	addi	sp,sp,8
    6568:	f800283a 	ret

0000656c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    656c:	deffff04 	addi	sp,sp,-4
    6570:	df000015 	stw	fp,0(sp)
    6574:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6578:	000170fa 	wrctl	ienable,zero
}
    657c:	0001883a 	nop
    6580:	e037883a 	mov	sp,fp
    6584:	df000017 	ldw	fp,0(sp)
    6588:	dec00104 	addi	sp,sp,4
    658c:	f800283a 	ret

00006590 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6590:	defffa04 	addi	sp,sp,-24
    6594:	dfc00515 	stw	ra,20(sp)
    6598:	df000415 	stw	fp,16(sp)
    659c:	df000404 	addi	fp,sp,16
    65a0:	e13ffe15 	stw	r4,-8(fp)
    65a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    65a8:	e0bfff17 	ldw	r2,-4(fp)
    65ac:	10800017 	ldw	r2,0(r2)
    65b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    65b4:	e13ffe17 	ldw	r4,-8(fp)
    65b8:	000499c0 	call	499c <strlen>
    65bc:	10800044 	addi	r2,r2,1
    65c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    65c4:	00000d06 	br	65fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    65c8:	e0bffc17 	ldw	r2,-16(fp)
    65cc:	10800217 	ldw	r2,8(r2)
    65d0:	e0fffd17 	ldw	r3,-12(fp)
    65d4:	180d883a 	mov	r6,r3
    65d8:	e17ffe17 	ldw	r5,-8(fp)
    65dc:	1009883a 	mov	r4,r2
    65e0:	00068a80 	call	68a8 <memcmp>
    65e4:	1000021e 	bne	r2,zero,65f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    65e8:	e0bffc17 	ldw	r2,-16(fp)
    65ec:	00000706 	br	660c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    65f0:	e0bffc17 	ldw	r2,-16(fp)
    65f4:	10800017 	ldw	r2,0(r2)
    65f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    65fc:	e0fffc17 	ldw	r3,-16(fp)
    6600:	e0bfff17 	ldw	r2,-4(fp)
    6604:	18bff01e 	bne	r3,r2,65c8 <_gp+0xffff777c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6608:	0005883a 	mov	r2,zero
}
    660c:	e037883a 	mov	sp,fp
    6610:	dfc00117 	ldw	ra,4(sp)
    6614:	df000017 	ldw	fp,0(sp)
    6618:	dec00204 	addi	sp,sp,8
    661c:	f800283a 	ret

00006620 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6620:	defffb04 	addi	sp,sp,-20
    6624:	dfc00415 	stw	ra,16(sp)
    6628:	df000315 	stw	fp,12(sp)
    662c:	df000304 	addi	fp,sp,12
    6630:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6634:	d0a00217 	ldw	r2,-32760(gp)
    6638:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    663c:	00003106 	br	6704 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    6640:	e0bffd17 	ldw	r2,-12(fp)
    6644:	10800217 	ldw	r2,8(r2)
    6648:	1009883a 	mov	r4,r2
    664c:	000499c0 	call	499c <strlen>
    6650:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    6654:	e0bffd17 	ldw	r2,-12(fp)
    6658:	10c00217 	ldw	r3,8(r2)
    665c:	e0bffe17 	ldw	r2,-8(fp)
    6660:	10bfffc4 	addi	r2,r2,-1
    6664:	1885883a 	add	r2,r3,r2
    6668:	10800003 	ldbu	r2,0(r2)
    666c:	10803fcc 	andi	r2,r2,255
    6670:	1080201c 	xori	r2,r2,128
    6674:	10bfe004 	addi	r2,r2,-128
    6678:	10800bd8 	cmpnei	r2,r2,47
    667c:	1000031e 	bne	r2,zero,668c <alt_find_file+0x6c>
    {
      len -= 1;
    6680:	e0bffe17 	ldw	r2,-8(fp)
    6684:	10bfffc4 	addi	r2,r2,-1
    6688:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    668c:	e0bffe17 	ldw	r2,-8(fp)
    6690:	e0ffff17 	ldw	r3,-4(fp)
    6694:	1885883a 	add	r2,r3,r2
    6698:	10800003 	ldbu	r2,0(r2)
    669c:	10803fcc 	andi	r2,r2,255
    66a0:	1080201c 	xori	r2,r2,128
    66a4:	10bfe004 	addi	r2,r2,-128
    66a8:	10800be0 	cmpeqi	r2,r2,47
    66ac:	1000081e 	bne	r2,zero,66d0 <alt_find_file+0xb0>
    66b0:	e0bffe17 	ldw	r2,-8(fp)
    66b4:	e0ffff17 	ldw	r3,-4(fp)
    66b8:	1885883a 	add	r2,r3,r2
    66bc:	10800003 	ldbu	r2,0(r2)
    66c0:	10803fcc 	andi	r2,r2,255
    66c4:	1080201c 	xori	r2,r2,128
    66c8:	10bfe004 	addi	r2,r2,-128
    66cc:	10000a1e 	bne	r2,zero,66f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    66d0:	e0bffd17 	ldw	r2,-12(fp)
    66d4:	10800217 	ldw	r2,8(r2)
    66d8:	e0fffe17 	ldw	r3,-8(fp)
    66dc:	180d883a 	mov	r6,r3
    66e0:	e17fff17 	ldw	r5,-4(fp)
    66e4:	1009883a 	mov	r4,r2
    66e8:	00068a80 	call	68a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    66ec:	1000021e 	bne	r2,zero,66f8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    66f0:	e0bffd17 	ldw	r2,-12(fp)
    66f4:	00000706 	br	6714 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    66f8:	e0bffd17 	ldw	r2,-12(fp)
    66fc:	10800017 	ldw	r2,0(r2)
    6700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6704:	e0fffd17 	ldw	r3,-12(fp)
    6708:	d0a00204 	addi	r2,gp,-32760
    670c:	18bfcc1e 	bne	r3,r2,6640 <_gp+0xffff77f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6710:	0005883a 	mov	r2,zero
}
    6714:	e037883a 	mov	sp,fp
    6718:	dfc00117 	ldw	ra,4(sp)
    671c:	df000017 	ldw	fp,0(sp)
    6720:	dec00204 	addi	sp,sp,8
    6724:	f800283a 	ret

00006728 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6728:	defffa04 	addi	sp,sp,-24
    672c:	dfc00515 	stw	ra,20(sp)
    6730:	df000415 	stw	fp,16(sp)
    6734:	dc000315 	stw	r16,12(sp)
    6738:	df000404 	addi	fp,sp,16
    673c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    6740:	00bffa04 	movi	r2,-24
    6744:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6748:	e03ffc15 	stw	zero,-16(fp)
    674c:	00001d06 	br	67c4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    6750:	04000034 	movhi	r16,0
    6754:	841b3304 	addi	r16,r16,27852
    6758:	e0bffc17 	ldw	r2,-16(fp)
    675c:	01400304 	movi	r5,12
    6760:	1009883a 	mov	r4,r2
    6764:	00052300 	call	5230 <__mulsi3>
    6768:	8085883a 	add	r2,r16,r2
    676c:	10800017 	ldw	r2,0(r2)
    6770:	1000111e 	bne	r2,zero,67b8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    6774:	04000034 	movhi	r16,0
    6778:	841b3304 	addi	r16,r16,27852
    677c:	e0bffc17 	ldw	r2,-16(fp)
    6780:	01400304 	movi	r5,12
    6784:	1009883a 	mov	r4,r2
    6788:	00052300 	call	5230 <__mulsi3>
    678c:	8085883a 	add	r2,r16,r2
    6790:	e0fffe17 	ldw	r3,-8(fp)
    6794:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6798:	d0e00617 	ldw	r3,-32744(gp)
    679c:	e0bffc17 	ldw	r2,-16(fp)
    67a0:	1880020e 	bge	r3,r2,67ac <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    67a4:	e0bffc17 	ldw	r2,-16(fp)
    67a8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    67ac:	e0bffc17 	ldw	r2,-16(fp)
    67b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    67b4:	00000606 	br	67d0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    67b8:	e0bffc17 	ldw	r2,-16(fp)
    67bc:	10800044 	addi	r2,r2,1
    67c0:	e0bffc15 	stw	r2,-16(fp)
    67c4:	e0bffc17 	ldw	r2,-16(fp)
    67c8:	10800810 	cmplti	r2,r2,32
    67cc:	103fe01e 	bne	r2,zero,6750 <_gp+0xffff7904>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    67d0:	e0bffd17 	ldw	r2,-12(fp)
}
    67d4:	e6ffff04 	addi	sp,fp,-4
    67d8:	dfc00217 	ldw	ra,8(sp)
    67dc:	df000117 	ldw	fp,4(sp)
    67e0:	dc000017 	ldw	r16,0(sp)
    67e4:	dec00304 	addi	sp,sp,12
    67e8:	f800283a 	ret

000067ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    67ec:	defffe04 	addi	sp,sp,-8
    67f0:	df000115 	stw	fp,4(sp)
    67f4:	df000104 	addi	fp,sp,4
    67f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    67fc:	e0bfff17 	ldw	r2,-4(fp)
    6800:	10bffe84 	addi	r2,r2,-6
    6804:	10c00428 	cmpgeui	r3,r2,16
    6808:	18001a1e 	bne	r3,zero,6874 <alt_exception_cause_generated_bad_addr+0x88>
    680c:	100690ba 	slli	r3,r2,2
    6810:	00800034 	movhi	r2,0
    6814:	109a0904 	addi	r2,r2,26660
    6818:	1885883a 	add	r2,r3,r2
    681c:	10800017 	ldw	r2,0(r2)
    6820:	1000683a 	jmp	r2
    6824:	00006864 	muli	zero,zero,417
    6828:	00006864 	muli	zero,zero,417
    682c:	00006874 	movhi	zero,417
    6830:	00006874 	movhi	zero,417
    6834:	00006874 	movhi	zero,417
    6838:	00006864 	muli	zero,zero,417
    683c:	0000686c 	andhi	zero,zero,417
    6840:	00006874 	movhi	zero,417
    6844:	00006864 	muli	zero,zero,417
    6848:	00006864 	muli	zero,zero,417
    684c:	00006874 	movhi	zero,417
    6850:	00006864 	muli	zero,zero,417
    6854:	0000686c 	andhi	zero,zero,417
    6858:	00006874 	movhi	zero,417
    685c:	00006874 	movhi	zero,417
    6860:	00006864 	muli	zero,zero,417
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    6864:	00800044 	movi	r2,1
    6868:	00000306 	br	6878 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    686c:	0005883a 	mov	r2,zero
    6870:	00000106 	br	6878 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    6874:	0005883a 	mov	r2,zero
  }
}
    6878:	e037883a 	mov	sp,fp
    687c:	df000017 	ldw	fp,0(sp)
    6880:	dec00104 	addi	sp,sp,4
    6884:	f800283a 	ret

00006888 <exit>:
    6888:	defffe04 	addi	sp,sp,-8
    688c:	000b883a 	mov	r5,zero
    6890:	dc000015 	stw	r16,0(sp)
    6894:	dfc00115 	stw	ra,4(sp)
    6898:	2021883a 	mov	r16,r4
    689c:	00068d80 	call	68d8 <__call_exitprocs>
    68a0:	8009883a 	mov	r4,r16
    68a4:	0006a680 	call	6a68 <_exit>

000068a8 <memcmp>:
    68a8:	218d883a 	add	r6,r4,r6
    68ac:	21800826 	beq	r4,r6,68d0 <memcmp+0x28>
    68b0:	20800003 	ldbu	r2,0(r4)
    68b4:	28c00003 	ldbu	r3,0(r5)
    68b8:	10c00226 	beq	r2,r3,68c4 <memcmp+0x1c>
    68bc:	10c5c83a 	sub	r2,r2,r3
    68c0:	f800283a 	ret
    68c4:	21000044 	addi	r4,r4,1
    68c8:	29400044 	addi	r5,r5,1
    68cc:	003ff706 	br	68ac <_gp+0xffff7a60>
    68d0:	0005883a 	mov	r2,zero
    68d4:	f800283a 	ret

000068d8 <__call_exitprocs>:
    68d8:	defff504 	addi	sp,sp,-44
    68dc:	dd000515 	stw	r20,20(sp)
    68e0:	05000034 	movhi	r20,0
    68e4:	dc800315 	stw	r18,12(sp)
    68e8:	dfc00a15 	stw	ra,40(sp)
    68ec:	df000915 	stw	fp,36(sp)
    68f0:	ddc00815 	stw	r23,32(sp)
    68f4:	dd800715 	stw	r22,28(sp)
    68f8:	dd400615 	stw	r21,24(sp)
    68fc:	dcc00415 	stw	r19,16(sp)
    6900:	dc400215 	stw	r17,8(sp)
    6904:	dc000115 	stw	r16,4(sp)
    6908:	d9000015 	stw	r4,0(sp)
    690c:	2825883a 	mov	r18,r5
    6910:	a51b9304 	addi	r20,r20,28236
    6914:	a4400017 	ldw	r17,0(r20)
    6918:	8cc00c17 	ldw	r19,48(r17)
    691c:	8c400c04 	addi	r17,r17,48
    6920:	98004526 	beq	r19,zero,6a38 <__call_exitprocs+0x160>
    6924:	9c000117 	ldw	r16,4(r19)
    6928:	00900034 	movhi	r2,16384
    692c:	10bfffc4 	addi	r2,r2,-1
    6930:	9d402217 	ldw	r21,136(r19)
    6934:	85bfffc4 	addi	r22,r16,-1
    6938:	80a1883a 	add	r16,r16,r2
    693c:	8421883a 	add	r16,r16,r16
    6940:	8421883a 	add	r16,r16,r16
    6944:	ac2f883a 	add	r23,r21,r16
    6948:	84000204 	addi	r16,r16,8
    694c:	9c21883a 	add	r16,r19,r16
    6950:	b0002716 	blt	r22,zero,69f0 <__call_exitprocs+0x118>
    6954:	90000726 	beq	r18,zero,6974 <__call_exitprocs+0x9c>
    6958:	a800041e 	bne	r21,zero,696c <__call_exitprocs+0x94>
    695c:	b5bfffc4 	addi	r22,r22,-1
    6960:	bdffff04 	addi	r23,r23,-4
    6964:	843fff04 	addi	r16,r16,-4
    6968:	003ff906 	br	6950 <_gp+0xffff7b04>
    696c:	b9002017 	ldw	r4,128(r23)
    6970:	913ffa1e 	bne	r18,r4,695c <_gp+0xffff7b10>
    6974:	99000117 	ldw	r4,4(r19)
    6978:	82000017 	ldw	r8,0(r16)
    697c:	213fffc4 	addi	r4,r4,-1
    6980:	b100021e 	bne	r22,r4,698c <__call_exitprocs+0xb4>
    6984:	9d800115 	stw	r22,4(r19)
    6988:	00000106 	br	6990 <__call_exitprocs+0xb8>
    698c:	80000015 	stw	zero,0(r16)
    6990:	403ff226 	beq	r8,zero,695c <_gp+0xffff7b10>
    6994:	9f000117 	ldw	fp,4(r19)
    6998:	a8000526 	beq	r21,zero,69b0 <__call_exitprocs+0xd8>
    699c:	00800044 	movi	r2,1
    69a0:	1592983a 	sll	r9,r2,r22
    69a4:	a9404017 	ldw	r5,256(r21)
    69a8:	494a703a 	and	r5,r9,r5
    69ac:	2800021e 	bne	r5,zero,69b8 <__call_exitprocs+0xe0>
    69b0:	403ee83a 	callr	r8
    69b4:	00000906 	br	69dc <__call_exitprocs+0x104>
    69b8:	a9004117 	ldw	r4,260(r21)
    69bc:	4908703a 	and	r4,r9,r4
    69c0:	2000041e 	bne	r4,zero,69d4 <__call_exitprocs+0xfc>
    69c4:	b9400017 	ldw	r5,0(r23)
    69c8:	d9000017 	ldw	r4,0(sp)
    69cc:	403ee83a 	callr	r8
    69d0:	00000206 	br	69dc <__call_exitprocs+0x104>
    69d4:	b9000017 	ldw	r4,0(r23)
    69d8:	403ee83a 	callr	r8
    69dc:	99000117 	ldw	r4,4(r19)
    69e0:	e13fcc1e 	bne	fp,r4,6914 <_gp+0xffff7ac8>
    69e4:	89000017 	ldw	r4,0(r17)
    69e8:	993fdc26 	beq	r19,r4,695c <_gp+0xffff7b10>
    69ec:	003fc906 	br	6914 <_gp+0xffff7ac8>
    69f0:	00800034 	movhi	r2,0
    69f4:	10800004 	addi	r2,r2,0
    69f8:	10000f26 	beq	r2,zero,6a38 <__call_exitprocs+0x160>
    69fc:	99400117 	ldw	r5,4(r19)
    6a00:	99000017 	ldw	r4,0(r19)
    6a04:	2800091e 	bne	r5,zero,6a2c <__call_exitprocs+0x154>
    6a08:	20000826 	beq	r4,zero,6a2c <__call_exitprocs+0x154>
    6a0c:	89000015 	stw	r4,0(r17)
    6a10:	a8000226 	beq	r21,zero,6a1c <__call_exitprocs+0x144>
    6a14:	a809883a 	mov	r4,r21
    6a18:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    6a1c:	9809883a 	mov	r4,r19
    6a20:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    6a24:	8cc00017 	ldw	r19,0(r17)
    6a28:	003fbd06 	br	6920 <_gp+0xffff7ad4>
    6a2c:	9823883a 	mov	r17,r19
    6a30:	2027883a 	mov	r19,r4
    6a34:	003fba06 	br	6920 <_gp+0xffff7ad4>
    6a38:	dfc00a17 	ldw	ra,40(sp)
    6a3c:	df000917 	ldw	fp,36(sp)
    6a40:	ddc00817 	ldw	r23,32(sp)
    6a44:	dd800717 	ldw	r22,28(sp)
    6a48:	dd400617 	ldw	r21,24(sp)
    6a4c:	dd000517 	ldw	r20,20(sp)
    6a50:	dcc00417 	ldw	r19,16(sp)
    6a54:	dc800317 	ldw	r18,12(sp)
    6a58:	dc400217 	ldw	r17,8(sp)
    6a5c:	dc000117 	ldw	r16,4(sp)
    6a60:	dec00b04 	addi	sp,sp,44
    6a64:	f800283a 	ret

00006a68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6a68:	defffd04 	addi	sp,sp,-12
    6a6c:	df000215 	stw	fp,8(sp)
    6a70:	df000204 	addi	fp,sp,8
    6a74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6a78:	0001883a 	nop
    6a7c:	e0bfff17 	ldw	r2,-4(fp)
    6a80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6a84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6a88:	10000226 	beq	r2,zero,6a94 <_exit+0x2c>
    ALT_SIM_FAIL();
    6a8c:	002af070 	cmpltui	zero,zero,43969
    6a90:	00000106 	br	6a98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6a94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6a98:	003fff06 	br	6a98 <_gp+0xffff7c4c>
