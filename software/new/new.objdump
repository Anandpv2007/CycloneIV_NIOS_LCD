
new.elf:     file format elf32-littlenios2
new.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800230

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00009e34 memsz 0x00009e34 flags r-x
    LOAD off    0x0000ae54 vaddr 0x00809e54 paddr 0x0080a1b0 align 2**12
         filesz 0x0000035c memsz 0x0000035c flags rw-
    LOAD off    0x0000b50c vaddr 0x0080a50c paddr 0x0080a50c align 2**12
         filesz 0x00000000 memsz 0x000073a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009aa0  00800230  00800230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  00809cd0  00809cd0  0000acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000035c  00809e54  0080a1b0  0000ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073a8  0080a50c  0080a50c  0000b50c  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  008118b4  008118b4  0000b1b0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  01004000  01004000  0000b1b0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b1b0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000720  00000000  00000000  0000b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000fcde  00000000  00000000  0000b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004074  00000000  00000000  0001b5d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004eee  00000000  00000000  0001f64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001b04  00000000  00000000  00024538  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c1e  00000000  00000000  0002603c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000a79  00000000  00000000  00028c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000296d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d0  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0002cada  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0002cae0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002caec  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002caed  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0002caee  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0002caf9  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0002cb04  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000006  00000000  00000000  0002cb0f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000012  00000000  00000000  0002cb15  2**0
                  CONTENTS, READONLY
 27 .jdi          00003e85  00000000  00000000  0002cb27  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004f568  00000000  00000000  000309ac  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800230 l    d  .text	00000000 .text
00809cd0 l    d  .rodata	00000000 .rodata
00809e54 l    d  .rwdata	00000000 .rwdata
0080a50c l    d  .bss	00000000 .bss
008118b4 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
01004000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../new_bsp//obj/HAL/src/crt0.o
00800268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00809e54 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00800548 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
008006e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0080a110 l     O .rwdata	00000004 lockid
0080a51c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0080a114 l     O .rwdata	00000004 lockid
0080a524 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00802118 l     F .text	00000048 OS_InitMisc
00802160 l     F .text	0000006c OS_InitRdyList
008022cc l     F .text	000000e4 OS_InitTCBList
00802038 l     F .text	000000e0 OS_InitEventList
008021cc l     F .text	00000080 OS_InitTaskIdle
0080224c l     F .text	00000080 OS_InitTaskStat
0080253c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080424c l     F .text	000000f4 OS_FlagTaskRdy
0080400c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00808324 l     F .text	00000034 alt_dev_reg
00809f34 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080861c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00808710 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00808844 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00808870 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00808c10 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00808d70 l     F .text	0000003c alt_get_errno
00808dac l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080a58c g     O .bss	00000004 alt_instruction_exception_handler
0080a162 g     O .rwdata	00000002 OSTaskNameSize
00800634 g     F .text	000000ac alt_main
00800388 g     F .text	00000080 _puts_r
008117b4 g     O .bss	00000100 alt_irq
00804a6c g     F .text	000000d8 OS_MemInit
0080a1b0 g       *ABS*	00000000 __flash_rwdata_start
008082c4 g     F .text	00000060 OSTimeSet
00800d8c g     F .text	00000610 OSEventPendMulti
0080946c g     F .text	00000024 OSTaskCreateHook
0080a590 g     O .bss	00002000 task1_stk
0080a13a g     O .rwdata	00000002 OSMboxEn
008013f4 g     F .text	0000004c OSIntEnter
0080a14a g     O .rwdata	00000002 OSQEn
00800a60 g     F .text	000000cc __malloc_unlock
008094d4 g     F .text	00000020 OSTaskStatHook
0080a52c g     O .bss	00000001 OSLockNesting
0080a188 g     O .rwdata	00000002 OSDataSize
0080a52d g     O .bss	00000001 OSRunning
00809514 g     F .text	00000020 OSInitHookBegin
0080a180 g     O .rwdata	00000002 OSTmrSize
0080a530 g     O .bss	00000004 OSIdleCtr
0080921c g     F .text	00000024 altera_nios2_gen2_irq_init
008092ec g       .text	00000000 OSStartTsk
0080286c g     F .text	000002d4 OS_TCBInit
00800000 g     F .entry	0000000c __reset
0080a186 g     O .rwdata	00000002 OSTmrWheelTblSize
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080a126 g     O .rwdata	00000002 OSEventSize
0080a534 g     O .bss	00000001 OSPrioHighRdy
00809490 g     F .text	00000024 OSTaskDelHook
0080a50c g     O .bss	00000004 errno
008092cc g       .text	00000000 OSStartHighRdy
00806d44 g     F .text	000001e4 OSTaskCreateExt
00803b54 g     F .text	00000060 OSFlagPendGetFlagsRdy
0080a166 g     O .rwdata	00000002 OSTaskStatStkSize
00802cd0 g     F .text	00000308 OSFlagAccept
008050b0 g     F .text	000000b8 OSQFlush
00804b44 g     F .text	00000140 OSQAccept
0080a514 g     O .bss	00000004 alt_argv
00812108 g       *ABS*	00000000 _gp
00806b98 g     F .text	000001ac OSTaskCreate
008066a8 g     F .text	000004f0 OSTaskChangePrio
0080a528 g     O .bss	00000004 alt_heapsem
00802b40 g     F .text	00000190 OSDebugInit
00806f28 g     F .text	00000344 OSTaskDel
00809f88 g     O .rwdata	00000180 alt_fd_list
0080e590 g     O .bss	00000370 OSFlagTbl
00801e18 g     F .text	000000b8 OS_EventTaskRemove
00809598 g     F .text	00000090 alt_find_dev
0080a150 g     O .rwdata	00000002 OSRdyTblSize
00808cf4 g     F .text	0000007c alt_io_redirect
00800408 g     F .text	00000014 puts
00809824 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00800b2c g     F .text	00000120 OSEventNameGet
0080a134 g     O .rwdata	00000002 OSFlagMax
00801440 g     F .text	000000f8 OSIntExit
0080a16e g     O .rwdata	00000002 OSTCBSize
0080a535 g     O .bss	00000001 OSPrioCur
0080849c g     F .text	000000ec altera_avalon_jtag_uart_read
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00809bb8 g     F .text	00000064 .hidden __udivsi3
0080a154 g     O .rwdata	00000002 OSStkWidth
0080a148 g     O .rwdata	00000002 OSPtrSize
0080a128 g     O .rwdata	00000002 OSEventTblSize
00809240 g       .text	00000000 OSCtxSw
0080a538 g     O .bss	00000004 OSTCBList
0080a57c g     O .bss	00000004 alt_fd_list_lock
0080e900 g     O .bss	00000c30 OSMemTbl
0080a53c g     O .bss	00000001 OSTickStepState
0080a14c g     O .rwdata	00000002 OSQMax
0080f530 g     O .bss	00000800 OSTaskStatStk
008046a8 g     F .text	000000f0 OSMemNameGet
0080a12c g     O .rwdata	00000002 OSFlagEn
0080a172 g     O .rwdata	00000002 OSTimeTickHookEn
00805560 g     F .text	00000168 OSQPost
00804340 g     F .text	000000a4 OS_FlagUnlink
0080a19c g     O .rwdata	00000004 alt_max_fd
00802404 g     F .text	00000068 OS_MemCopy
0080246c g     F .text	000000d0 OS_Sched
008045b8 g     F .text	000000f0 OSMemGet
00807554 g     F .text	000001b4 OSTaskNameSet
0080a540 g     O .bss	00000004 OSCtxSwCtr
008094f4 g     F .text	00000020 OSTimeTickHook
0080a136 g     O .rwdata	00000002 OSFlagNameSize
00801ed0 g     F .text	00000100 OS_EventTaskRemoveMulti
00801cc8 g     F .text	00000150 OS_EventTaskWaitMulti
0080a14e g     O .rwdata	00000002 OSQSize
00806010 g     F .text	0000020c OSSemPend
0080a108 g     O .rwdata	00000004 _global_impure_ptr
0080a138 g     O .rwdata	00000002 OSLowestPrio
008118b4 g       *ABS*	00000000 __bss_end
00808b20 g     F .text	000000f0 alt_iic_isr_register
00809574 g     F .text	00000024 OSTCBInitHook
0080a17e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00809114 g     F .text	00000108 alt_tick
0080a120 g     O .rwdata	00000002 OSEventEn
0080a17a g     O .rwdata	00000002 OSTmrCfgNameSize
00808ad4 g     F .text	0000004c alt_ic_irq_enabled
0080416c g     F .text	000000e0 OS_FlagInit
00809078 g     F .text	0000009c alt_alarm_stop
0080a15c g     O .rwdata	00000002 OSTaskIdleStkSize
0080a580 g     O .bss	00000004 alt_irq_active
00805c48 g     F .text	000000b0 OSSemAccept
008048ac g     F .text	000000d8 OSMemPut
008043e4 g     F .text	000001d4 OSMemCreate
0080a544 g     O .bss	00000004 OSIdleCtrMax
008000fc g     F .exceptions	000000d4 alt_irq_handler
00809f60 g     O .rwdata	00000028 alt_dev_null
0080a170 g     O .rwdata	00000002 OSTicksPerSec
00809240 g       .text	00000000 OSIntCtxSw
00808824 g     F .text	00000020 alt_dcache_flush_all
0080a548 g     O .bss	00000004 OSTCBFreeList
0080a1b0 g       *ABS*	00000000 __ram_rwdata_end
0080621c g     F .text	0000016c OSSemPendAbort
0080a194 g     O .rwdata	00000008 alt_dev_list
0080071c g     F .text	00000100 write
0080a174 g     O .rwdata	00000002 OSVersionNbr
00809e54 g       *ABS*	00000000 __ram_rodata_end
0080a11c g     O .rwdata	00000004 OSEndiannessTest
00809c1c g     F .text	00000058 .hidden __umodsi3
0080a12e g     O .rwdata	00000002 OSFlagGrpSize
008118b4 g       *ABS*	00000000 end
008026d4 g     F .text	000000cc OS_TaskStat
008001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00808694 g     F .text	0000007c alt_avalon_timer_sc_init
00808588 g     F .text	00000094 altera_avalon_jtag_uart_write
008023b0 g     F .text	00000054 OS_MemClr
00809310 g     F .text	0000015c OSTaskStkInit
0080026c g     F .text	00000038 task1
00801a20 g     F .text	00000198 OS_EventTaskRdy
00809930 g     F .text	00000190 __call_exitprocs
0080a54c g     O .bss	00000001 OSCPUUsage
00800230 g     F .text	0000003c _start
008002a4 g     F .text	00000038 task2
0080a584 g     O .bss	00000004 _alt_tick_rate
00805168 g     F .text	0000028c OSQPend
00807e14 g     F .text	00000104 OSTimeDly
0080a588 g     O .bss	00000004 _alt_nticks
00808390 g     F .text	0000004c alt_sys_init
0080a54d g     O .bss	00000001 OSTaskCtr
00807f18 g     F .text	0000017c OSTimeDlyHMSM
00809c74 g     F .text	00000028 .hidden __mulsi3
00809e54 g       *ABS*	00000000 __ram_rwdata_start
00809cd0 g       *ABS*	00000000 __ram_rodata_start
0080a122 g     O .rwdata	00000002 OSEventMax
00806388 g     F .text	00000110 OSSemPost
008015c4 g     F .text	000000dc OSSchedUnlock
008083dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00809730 g     F .text	000000f4 alt_get_fd
0080a550 g     O .bss	00000004 OSMemFreeList
00801710 g     F .text	000000b0 OSStatInit
00803f48 g     F .text	000000c4 OSFlagQuery
0080a158 g     O .rwdata	00000002 OSTaskCreateExtEn
008098e0 g     F .text	00000030 memcmp
00801a00 g     F .text	00000020 OS_Dummy
008118b4 g       *ABS*	00000000 __alt_stack_base
0080fd30 g     O .bss	000001e0 OSQTbl
0080a554 g     O .bss	00000004 OSTCBHighRdy
0080a558 g     O .bss	00000004 OSQFreeList
00809628 g     F .text	00000108 alt_find_file
008088ac g     F .text	000000a4 alt_dev_llist_insert
00800940 g     F .text	00000120 __malloc_lock
00800c4c g     F .text	00000140 OSEventNameSet
0080a55c g     O .bss	00000001 OSRdyGrp
00800438 g     F .text	000000b8 __sfvwrite_small_dev
0080a50c g       *ABS*	00000000 __bss_start
00809910 g     F .text	00000020 memset
008002dc g     F .text	000000ac main
0080a518 g     O .bss	00000004 alt_envp
0080843c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809d10 g     O .rodata	00000100 OSUnMapTbl
0080a152 g     O .rwdata	00000002 OSSemEn
00803bb4 g     F .text	00000394 OSFlagPost
00801bb8 g     F .text	00000110 OS_EventTaskWait
0080c590 g     O .bss	00002000 task2_stk
008027a0 g     F .text	000000cc OS_TaskStatStkChk
0080726c g     F .text	00000150 OSTaskDelReq
0080a1a0 g     O .rwdata	00000004 alt_errno
008016a0 g     F .text	00000070 OSStart
008008e0 g     F .text	00000060 __env_unlock
00807708 g     F .text	000001d4 OSTaskResume
00804984 g     F .text	000000e8 OSMemQuery
0080a164 g     O .rwdata	00000002 OSTaskStatEn
0080a13e g     O .rwdata	00000002 OSMemMax
008056c8 g     F .text	00000170 OSQPostFront
00809ac0 g     F .text	00000084 .hidden __divsi3
0080a55d g     O .bss	00000003 OSRdyTbl
0080a118 g     O .rwdata	00000002 OSDebugEn
0080a130 g     O .rwdata	00000002 OSFlagNodeSize
0080a178 g     O .rwdata	00000002 OSTmrCfgMax
00804c84 g     F .text	000001ac OSQCreate
008073bc g     F .text	00000198 OSTaskNameGet
00809cd0 g       *ABS*	00000000 __flash_rodata_start
00805838 g     F .text	0000020c OSQPostOpt
008017c0 g     F .text	00000220 OSTimeTick
0080a160 g     O .rwdata	00000002 OSTaskMax
00805cf8 g     F .text	000000d8 OSSemCreate
0080a184 g     O .rwdata	00000002 OSTmrWheelSize
0080a15a g     O .rwdata	00000002 OSTaskDelEn
00806498 g     F .text	00000110 OSSemQuery
00804e30 g     F .text	00000280 OSQDel
008053f4 g     F .text	0000016c OSQPendAbort
00808358 g     F .text	00000038 alt_irq_init
00808ff4 g     F .text	00000084 alt_release_fd
008004f0 g     F .text	00000058 _write_r
00801538 g     F .text	0000008c OSSchedLock
00802fd8 g     F .text	00000108 OSFlagCreate
0080a10c g     O .rwdata	00000004 _impure_ptr
0080a510 g     O .bss	00000004 alt_argc
0080a12a g     O .rwdata	00000002 OSEventMultiEn
008030e0 g     F .text	00000248 OSFlagDel
0080a560 g     O .bss	00000004 OSEventFreeList
00800020 g       .exceptions	00000000 alt_irq_entry
0080359c g     F .text	000005b8 OSFlagPend
0080a176 g     O .rwdata	00000002 OSTmrEn
0080a18c g     O .rwdata	00000008 alt_fs_list
008025b0 g     F .text	00000074 OS_StrCopy
0080a140 g     O .rwdata	00000002 OSMemNameSize
00809534 g     F .text	00000020 OSInitHookEnd
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080a16c g     O .rwdata	00000002 OSTCBPrioTblMax
0080a168 g     O .rwdata	00000002 OSTaskStatStkChkEn
00800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00808970 g     F .text	00000050 alt_ic_isr_register
0080a13c g     O .rwdata	00000002 OSMemEn
0080a146 g     O .rwdata	00000002 OSMutexEn
0080a1b0 g       *ABS*	00000000 _edata
008118b4 g       *ABS*	00000000 _end
0080a564 g     O .bss	00000001 OSIntNesting
00800230 g       *ABS*	00000000 __ram_exceptions_end
00808094 g     F .text	000001d4 OSTimeDlyResume
00803450 g     F .text	0000014c OSFlagNameSet
008078dc g     F .text	000001c0 OSTaskStkChk
00808a48 g     F .text	0000008c alt_ic_irq_disable
0080a142 g     O .rwdata	00000002 OSMemSize
0080a568 g     O .bss	00000004 OSTCBCur
008098c0 g     F .text	00000020 exit
0080a144 g     O .rwdata	00000002 OSMemTblSize
00809b44 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080139c g     F .text	00000058 OSInit
00807c80 g     F .text	00000124 OSTaskQuery
00805ba0 g     F .text	000000a8 OS_QInit
00802624 g     F .text	00000054 OS_StrLen
00804798 g     F .text	00000114 OSMemNameSet
0080a15e g     O .rwdata	00000002 OSTaskProfileEn
0080a56c g     O .bss	00000004 OSTime
0080ff10 g     O .bss	00000800 OSTaskIdleStk
00809c9c g     F .text	00000034 _exit
00803328 g     F .text	00000128 OSFlagNameGet
00808268 g     F .text	0000005c OSTimeGet
0080041c g     F .text	0000001c strlen
008094b4 g     F .text	00000020 OSTaskSwHook
00808e98 g     F .text	0000015c open
00810710 g     O .bss	00000b40 OSEventTbl
00811250 g     O .bss	00000510 OSTCBTbl
008065a8 g     F .text	00000100 OSSemSet
00808950 g     F .text	00000020 alt_icache_flush_all
0080a1a4 g     O .rwdata	00000004 alt_priority_mask
00805dd0 g     F .text	00000240 OSSemDel
0080a570 g     O .bss	00000004 OSFlagFreeList
008089c0 g     F .text	00000088 alt_ic_irq_enable
0080a124 g     O .rwdata	00000002 OSEventNameSize
0080a574 g     O .bss	00000001 OSStatRdy
00811760 g     O .bss	00000054 OSTCBPrioTbl
0080081c g     F .text	000000c4 __env_lock
0080a16a g     O .rwdata	00000002 OSTaskSwHookEn
0080a1a8 g     O .rwdata	00000008 alt_alarm_list
0080a132 g     O .rwdata	00000002 OSFlagWidth
0080874c g     F .text	000000d8 close
0080a520 g     O .bss	00000004 alt_envsem
0080a578 g     O .bss	00000004 OSIdleCtrRun
008019e0 g     F .text	00000020 OSVersion
0080a17c g     O .rwdata	00000002 OSTmrCfgWheelSize
008005b0 g     F .text	00000084 alt_load
00807da4 g     F .text	00000070 OS_TaskStkClr
0080a156 g     O .rwdata	00000002 OSTaskCreateEn
00801fd0 g     F .text	00000068 OS_EventWaitListInit
00809554 g     F .text	00000020 OSTaskIdleHook
00807a9c g     F .text	000001e4 OSTaskSuspend
00802678 g     F .text	0000005c OS_TaskIdle
0080a182 g     O .rwdata	00000002 OSTmrTblSize
00805a44 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08408c14 	ori	at,at,560
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	08013f40 	call	8013f4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	1085ed04 	addi	r2,r2,6068
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	1085ed04 	addi	r2,r2,6068
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_memory2_0+0xff7fc12c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_memory2_0+0xff7fc120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	08014400 	call	801440 <OSIntExit>
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  8001e4:	00bfffc4 	movi	r2,-1
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
  8001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  8001f0:	d0a12117 	ldw	r2,-31612(gp)
  8001f4:	10000726 	beq	r2,zero,800214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  8001f8:	d0a12117 	ldw	r2,-31612(gp)
  8001fc:	e0fffd17 	ldw	r3,-12(fp)
  800200:	e1bffe17 	ldw	r6,-8(fp)
  800204:	e17fff17 	ldw	r5,-4(fp)
  800208:	1809883a 	mov	r4,r3
  80020c:	103ee83a 	callr	r2
  800210:	00000206 	br	80021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800218:	0005883a 	mov	r2,zero
}
  80021c:	e037883a 	mov	sp,fp
  800220:	dfc00117 	ldw	ra,4(sp)
  800224:	df000017 	ldw	fp,0(sp)
  800228:	dec00204 	addi	sp,sp,8
  80022c:	f800283a 	ret

Disassembly of section .text:

00800230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800230:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800238:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  80023c:	d6884214 	ori	gp,gp,8456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800240:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800244:	10a94314 	ori	r2,r2,42252

    movhi r3, %hi(__bss_end)
  800248:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80024c:	18c62d14 	ori	r3,r3,6324

    beq r2, r3, 1f
  800250:	10c00326 	beq	r2,r3,800260 <_start+0x30>

0:
    stw zero, (r2)
  800254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80025c:	10fffd36 	bltu	r2,r3,800254 <__alt_mem_onchip_memory2_0+0xff7fc254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800260:	08005b00 	call	8005b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800264:	08006340 	call	800634 <alt_main>

00800268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800268:	003fff06 	br	800268 <__alt_mem_onchip_memory2_0+0xff7fc268>

0080026c <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  80026c:	defffd04 	addi	sp,sp,-12
  800270:	dfc00215 	stw	ra,8(sp)
  800274:	df000115 	stw	fp,4(sp)
  800278:	df000104 	addi	fp,sp,4
  80027c:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task1\n");
  800280:	01002074 	movhi	r4,129
  800284:	21273404 	addi	r4,r4,-25392
  800288:	08004080 	call	800408 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
  80028c:	000f883a 	mov	r7,zero
  800290:	018000c4 	movi	r6,3
  800294:	000b883a 	mov	r5,zero
  800298:	0009883a 	mov	r4,zero
  80029c:	0807f180 	call	807f18 <OSTimeDlyHMSM>
  }
  8002a0:	003ff706 	br	800280 <__alt_mem_onchip_memory2_0+0xff7fc280>

008002a4 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  8002a4:	defffd04 	addi	sp,sp,-12
  8002a8:	dfc00215 	stw	ra,8(sp)
  8002ac:	df000115 	stw	fp,4(sp)
  8002b0:	df000104 	addi	fp,sp,4
  8002b4:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    printf("Hello from task2\n");
  8002b8:	01002074 	movhi	r4,129
  8002bc:	21273904 	addi	r4,r4,-25372
  8002c0:	08004080 	call	800408 <puts>
    OSTimeDlyHMSM(0, 0, 3, 0);
  8002c4:	000f883a 	mov	r7,zero
  8002c8:	018000c4 	movi	r6,3
  8002cc:	000b883a 	mov	r5,zero
  8002d0:	0009883a 	mov	r4,zero
  8002d4:	0807f180 	call	807f18 <OSTimeDlyHMSM>
  }
  8002d8:	003ff706 	br	8002b8 <__alt_mem_onchip_memory2_0+0xff7fc2b8>

008002dc <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  8002dc:	defff904 	addi	sp,sp,-28
  8002e0:	dfc00615 	stw	ra,24(sp)
  8002e4:	df000515 	stw	fp,20(sp)
  8002e8:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
  8002ec:	d8000415 	stw	zero,16(sp)
  8002f0:	d8000315 	stw	zero,12(sp)
  8002f4:	00820004 	movi	r2,2048
  8002f8:	d8800215 	stw	r2,8(sp)
  8002fc:	00802074 	movhi	r2,129
  800300:	10a96404 	addi	r2,r2,-23152
  800304:	d8800115 	stw	r2,4(sp)
  800308:	00800044 	movi	r2,1
  80030c:	d8800015 	stw	r2,0(sp)
  800310:	01c00044 	movi	r7,1
  800314:	01802074 	movhi	r6,129
  800318:	31b16304 	addi	r6,r6,-14964
  80031c:	000b883a 	mov	r5,zero
  800320:	01002034 	movhi	r4,128
  800324:	21009b04 	addi	r4,r4,620
  800328:	0806d440 	call	806d44 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
  80032c:	d8000415 	stw	zero,16(sp)
  800330:	d8000315 	stw	zero,12(sp)
  800334:	00820004 	movi	r2,2048
  800338:	d8800215 	stw	r2,8(sp)
  80033c:	00802074 	movhi	r2,129
  800340:	10b16404 	addi	r2,r2,-14960
  800344:	d8800115 	stw	r2,4(sp)
  800348:	00800084 	movi	r2,2
  80034c:	d8800015 	stw	r2,0(sp)
  800350:	01c00084 	movi	r7,2
  800354:	01802074 	movhi	r6,129
  800358:	31b96304 	addi	r6,r6,-6772
  80035c:	000b883a 	mov	r5,zero
  800360:	01002034 	movhi	r4,128
  800364:	2100a904 	addi	r4,r4,676
  800368:	0806d440 	call	806d44 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  80036c:	08016a00 	call	8016a0 <OSStart>
  return 0;
  800370:	0005883a 	mov	r2,zero
}
  800374:	e037883a 	mov	sp,fp
  800378:	dfc00117 	ldw	ra,4(sp)
  80037c:	df000017 	ldw	fp,0(sp)
  800380:	dec00204 	addi	sp,sp,8
  800384:	f800283a 	ret

00800388 <_puts_r>:
  800388:	defffd04 	addi	sp,sp,-12
  80038c:	dc000015 	stw	r16,0(sp)
  800390:	2021883a 	mov	r16,r4
  800394:	2809883a 	mov	r4,r5
  800398:	dfc00215 	stw	ra,8(sp)
  80039c:	dc400115 	stw	r17,4(sp)
  8003a0:	2823883a 	mov	r17,r5
  8003a4:	080041c0 	call	80041c <strlen>
  8003a8:	81400217 	ldw	r5,8(r16)
  8003ac:	01002034 	movhi	r4,128
  8003b0:	21010e04 	addi	r4,r4,1080
  8003b4:	29000115 	stw	r4,4(r5)
  8003b8:	100f883a 	mov	r7,r2
  8003bc:	880d883a 	mov	r6,r17
  8003c0:	8009883a 	mov	r4,r16
  8003c4:	08004380 	call	800438 <__sfvwrite_small_dev>
  8003c8:	00ffffc4 	movi	r3,-1
  8003cc:	10c00926 	beq	r2,r3,8003f4 <_puts_r+0x6c>
  8003d0:	81400217 	ldw	r5,8(r16)
  8003d4:	01802074 	movhi	r6,129
  8003d8:	01c00044 	movi	r7,1
  8003dc:	28800117 	ldw	r2,4(r5)
  8003e0:	31a73e04 	addi	r6,r6,-25352
  8003e4:	8009883a 	mov	r4,r16
  8003e8:	103ee83a 	callr	r2
  8003ec:	10bfffe0 	cmpeqi	r2,r2,-1
  8003f0:	0085c83a 	sub	r2,zero,r2
  8003f4:	dfc00217 	ldw	ra,8(sp)
  8003f8:	dc400117 	ldw	r17,4(sp)
  8003fc:	dc000017 	ldw	r16,0(sp)
  800400:	dec00304 	addi	sp,sp,12
  800404:	f800283a 	ret

00800408 <puts>:
  800408:	00802074 	movhi	r2,129
  80040c:	10a84304 	addi	r2,r2,-24308
  800410:	200b883a 	mov	r5,r4
  800414:	11000017 	ldw	r4,0(r2)
  800418:	08003881 	jmpi	800388 <_puts_r>

0080041c <strlen>:
  80041c:	2005883a 	mov	r2,r4
  800420:	10c00007 	ldb	r3,0(r2)
  800424:	18000226 	beq	r3,zero,800430 <strlen+0x14>
  800428:	10800044 	addi	r2,r2,1
  80042c:	003ffc06 	br	800420 <__alt_mem_onchip_memory2_0+0xff7fc420>
  800430:	1105c83a 	sub	r2,r2,r4
  800434:	f800283a 	ret

00800438 <__sfvwrite_small_dev>:
  800438:	2880000b 	ldhu	r2,0(r5)
  80043c:	1080020c 	andi	r2,r2,8
  800440:	10002126 	beq	r2,zero,8004c8 <__sfvwrite_small_dev+0x90>
  800444:	2880008f 	ldh	r2,2(r5)
  800448:	defffa04 	addi	sp,sp,-24
  80044c:	dc000015 	stw	r16,0(sp)
  800450:	dfc00515 	stw	ra,20(sp)
  800454:	dd000415 	stw	r20,16(sp)
  800458:	dcc00315 	stw	r19,12(sp)
  80045c:	dc800215 	stw	r18,8(sp)
  800460:	dc400115 	stw	r17,4(sp)
  800464:	2821883a 	mov	r16,r5
  800468:	10001216 	blt	r2,zero,8004b4 <__sfvwrite_small_dev+0x7c>
  80046c:	2027883a 	mov	r19,r4
  800470:	3025883a 	mov	r18,r6
  800474:	3823883a 	mov	r17,r7
  800478:	05010004 	movi	r20,1024
  80047c:	04400b0e 	bge	zero,r17,8004ac <__sfvwrite_small_dev+0x74>
  800480:	880f883a 	mov	r7,r17
  800484:	a440010e 	bge	r20,r17,80048c <__sfvwrite_small_dev+0x54>
  800488:	01c10004 	movi	r7,1024
  80048c:	8140008f 	ldh	r5,2(r16)
  800490:	900d883a 	mov	r6,r18
  800494:	9809883a 	mov	r4,r19
  800498:	08004f00 	call	8004f0 <_write_r>
  80049c:	0080050e 	bge	zero,r2,8004b4 <__sfvwrite_small_dev+0x7c>
  8004a0:	88a3c83a 	sub	r17,r17,r2
  8004a4:	90a5883a 	add	r18,r18,r2
  8004a8:	003ff406 	br	80047c <__alt_mem_onchip_memory2_0+0xff7fc47c>
  8004ac:	0005883a 	mov	r2,zero
  8004b0:	00000706 	br	8004d0 <__sfvwrite_small_dev+0x98>
  8004b4:	8080000b 	ldhu	r2,0(r16)
  8004b8:	10801014 	ori	r2,r2,64
  8004bc:	8080000d 	sth	r2,0(r16)
  8004c0:	00bfffc4 	movi	r2,-1
  8004c4:	00000206 	br	8004d0 <__sfvwrite_small_dev+0x98>
  8004c8:	00bfffc4 	movi	r2,-1
  8004cc:	f800283a 	ret
  8004d0:	dfc00517 	ldw	ra,20(sp)
  8004d4:	dd000417 	ldw	r20,16(sp)
  8004d8:	dcc00317 	ldw	r19,12(sp)
  8004dc:	dc800217 	ldw	r18,8(sp)
  8004e0:	dc400117 	ldw	r17,4(sp)
  8004e4:	dc000017 	ldw	r16,0(sp)
  8004e8:	dec00604 	addi	sp,sp,24
  8004ec:	f800283a 	ret

008004f0 <_write_r>:
  8004f0:	defffd04 	addi	sp,sp,-12
  8004f4:	dc000015 	stw	r16,0(sp)
  8004f8:	04002074 	movhi	r16,129
  8004fc:	dc400115 	stw	r17,4(sp)
  800500:	84294304 	addi	r16,r16,-23284
  800504:	2023883a 	mov	r17,r4
  800508:	2809883a 	mov	r4,r5
  80050c:	300b883a 	mov	r5,r6
  800510:	380d883a 	mov	r6,r7
  800514:	dfc00215 	stw	ra,8(sp)
  800518:	80000015 	stw	zero,0(r16)
  80051c:	080071c0 	call	80071c <write>
  800520:	00ffffc4 	movi	r3,-1
  800524:	10c0031e 	bne	r2,r3,800534 <_write_r+0x44>
  800528:	80c00017 	ldw	r3,0(r16)
  80052c:	18000126 	beq	r3,zero,800534 <_write_r+0x44>
  800530:	88c00015 	stw	r3,0(r17)
  800534:	dfc00217 	ldw	ra,8(sp)
  800538:	dc400117 	ldw	r17,4(sp)
  80053c:	dc000017 	ldw	r16,0(sp)
  800540:	dec00304 	addi	sp,sp,12
  800544:	f800283a 	ret

00800548 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800548:	defffc04 	addi	sp,sp,-16
  80054c:	df000315 	stw	fp,12(sp)
  800550:	df000304 	addi	fp,sp,12
  800554:	e13ffd15 	stw	r4,-12(fp)
  800558:	e17ffe15 	stw	r5,-8(fp)
  80055c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800560:	e0fffe17 	ldw	r3,-8(fp)
  800564:	e0bffd17 	ldw	r2,-12(fp)
  800568:	18800c26 	beq	r3,r2,80059c <alt_load_section+0x54>
  {
    while( to != end )
  80056c:	00000806 	br	800590 <alt_load_section+0x48>
    {
      *to++ = *from++;
  800570:	e0bffe17 	ldw	r2,-8(fp)
  800574:	10c00104 	addi	r3,r2,4
  800578:	e0fffe15 	stw	r3,-8(fp)
  80057c:	e0fffd17 	ldw	r3,-12(fp)
  800580:	19000104 	addi	r4,r3,4
  800584:	e13ffd15 	stw	r4,-12(fp)
  800588:	18c00017 	ldw	r3,0(r3)
  80058c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800590:	e0fffe17 	ldw	r3,-8(fp)
  800594:	e0bfff17 	ldw	r2,-4(fp)
  800598:	18bff51e 	bne	r3,r2,800570 <__alt_mem_onchip_memory2_0+0xff7fc570>
    {
      *to++ = *from++;
    }
  }
}
  80059c:	0001883a 	nop
  8005a0:	e037883a 	mov	sp,fp
  8005a4:	df000017 	ldw	fp,0(sp)
  8005a8:	dec00104 	addi	sp,sp,4
  8005ac:	f800283a 	ret

008005b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8005b0:	defffe04 	addi	sp,sp,-8
  8005b4:	dfc00115 	stw	ra,4(sp)
  8005b8:	df000015 	stw	fp,0(sp)
  8005bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8005c0:	01802074 	movhi	r6,129
  8005c4:	31a86c04 	addi	r6,r6,-24144
  8005c8:	01402074 	movhi	r5,129
  8005cc:	29679504 	addi	r5,r5,-25004
  8005d0:	01002074 	movhi	r4,129
  8005d4:	21286c04 	addi	r4,r4,-24144
  8005d8:	08005480 	call	800548 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8005dc:	01802034 	movhi	r6,128
  8005e0:	31808c04 	addi	r6,r6,560
  8005e4:	01402034 	movhi	r5,128
  8005e8:	29400804 	addi	r5,r5,32
  8005ec:	01002034 	movhi	r4,128
  8005f0:	21000804 	addi	r4,r4,32
  8005f4:	08005480 	call	800548 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8005f8:	01802074 	movhi	r6,129
  8005fc:	31a79504 	addi	r6,r6,-25004
  800600:	01402074 	movhi	r5,129
  800604:	29673404 	addi	r5,r5,-25392
  800608:	01002074 	movhi	r4,129
  80060c:	21273404 	addi	r4,r4,-25392
  800610:	08005480 	call	800548 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800614:	08088240 	call	808824 <alt_dcache_flush_all>
  alt_icache_flush_all();
  800618:	08089500 	call	808950 <alt_icache_flush_all>
}
  80061c:	0001883a 	nop
  800620:	e037883a 	mov	sp,fp
  800624:	dfc00117 	ldw	ra,4(sp)
  800628:	df000017 	ldw	fp,0(sp)
  80062c:	dec00204 	addi	sp,sp,8
  800630:	f800283a 	ret

00800634 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800634:	defff904 	addi	sp,sp,-28
  800638:	dfc00615 	stw	ra,24(sp)
  80063c:	df000515 	stw	fp,20(sp)
  800640:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800644:	0009883a 	mov	r4,zero
  800648:	08083580 	call	808358 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80064c:	080139c0 	call	80139c <OSInit>
  800650:	01000044 	movi	r4,1
  800654:	0805cf80 	call	805cf8 <OSSemCreate>
  800658:	d0a10615 	stw	r2,-31720(gp)
  80065c:	01000044 	movi	r4,1
  800660:	0805cf80 	call	805cf8 <OSSemCreate>
  800664:	d0a10815 	stw	r2,-31712(gp)
  800668:	d0a11d04 	addi	r2,gp,-31628
  80066c:	e0bffc15 	stw	r2,-16(fp)
  800670:	00800044 	movi	r2,1
  800674:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  800678:	e0bffd0b 	ldhu	r2,-12(fp)
  80067c:	1009883a 	mov	r4,r2
  800680:	0805cf80 	call	805cf8 <OSSemCreate>
  800684:	1007883a 	mov	r3,r2
  800688:	e0bffc17 	ldw	r2,-16(fp)
  80068c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800690:	08083900 	call	808390 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800694:	01802074 	movhi	r6,129
  800698:	31a73f04 	addi	r6,r6,-25348
  80069c:	01402074 	movhi	r5,129
  8006a0:	29673f04 	addi	r5,r5,-25348
  8006a4:	01002074 	movhi	r4,129
  8006a8:	21273f04 	addi	r4,r4,-25348
  8006ac:	0808cf40 	call	808cf4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8006b0:	d0a10217 	ldw	r2,-31736(gp)
  8006b4:	d0e10317 	ldw	r3,-31732(gp)
  8006b8:	d1210417 	ldw	r4,-31728(gp)
  8006bc:	200d883a 	mov	r6,r4
  8006c0:	180b883a 	mov	r5,r3
  8006c4:	1009883a 	mov	r4,r2
  8006c8:	08002dc0 	call	8002dc <main>
  8006cc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
  8006d0:	01000044 	movi	r4,1
  8006d4:	080874c0 	call	80874c <close>
  exit (result);
  8006d8:	e13ffb17 	ldw	r4,-20(fp)
  8006dc:	08098c00 	call	8098c0 <exit>

008006e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8006e0:	defffe04 	addi	sp,sp,-8
  8006e4:	dfc00115 	stw	ra,4(sp)
  8006e8:	df000015 	stw	fp,0(sp)
  8006ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8006f0:	d0a02617 	ldw	r2,-32616(gp)
  8006f4:	10000326 	beq	r2,zero,800704 <alt_get_errno+0x24>
  8006f8:	d0a02617 	ldw	r2,-32616(gp)
  8006fc:	103ee83a 	callr	r2
  800700:	00000106 	br	800708 <alt_get_errno+0x28>
  800704:	d0a10104 	addi	r2,gp,-31740
}
  800708:	e037883a 	mov	sp,fp
  80070c:	dfc00117 	ldw	ra,4(sp)
  800710:	df000017 	ldw	fp,0(sp)
  800714:	dec00204 	addi	sp,sp,8
  800718:	f800283a 	ret

0080071c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80071c:	defff904 	addi	sp,sp,-28
  800720:	dfc00615 	stw	ra,24(sp)
  800724:	df000515 	stw	fp,20(sp)
  800728:	df000504 	addi	fp,sp,20
  80072c:	e13ffd15 	stw	r4,-12(fp)
  800730:	e17ffe15 	stw	r5,-8(fp)
  800734:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  800738:	e0bffd17 	ldw	r2,-12(fp)
  80073c:	10000816 	blt	r2,zero,800760 <write+0x44>
  800740:	01400304 	movi	r5,12
  800744:	e13ffd17 	ldw	r4,-12(fp)
  800748:	0809c740 	call	809c74 <__mulsi3>
  80074c:	1007883a 	mov	r3,r2
  800750:	00802074 	movhi	r2,129
  800754:	10a7e204 	addi	r2,r2,-24696
  800758:	1885883a 	add	r2,r3,r2
  80075c:	00000106 	br	800764 <write+0x48>
  800760:	0005883a 	mov	r2,zero
  800764:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  800768:	e0bffb17 	ldw	r2,-20(fp)
  80076c:	10002126 	beq	r2,zero,8007f4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  800770:	e0bffb17 	ldw	r2,-20(fp)
  800774:	10800217 	ldw	r2,8(r2)
  800778:	108000cc 	andi	r2,r2,3
  80077c:	10001826 	beq	r2,zero,8007e0 <write+0xc4>
  800780:	e0bffb17 	ldw	r2,-20(fp)
  800784:	10800017 	ldw	r2,0(r2)
  800788:	10800617 	ldw	r2,24(r2)
  80078c:	10001426 	beq	r2,zero,8007e0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  800790:	e0bffb17 	ldw	r2,-20(fp)
  800794:	10800017 	ldw	r2,0(r2)
  800798:	10800617 	ldw	r2,24(r2)
  80079c:	e0ffff17 	ldw	r3,-4(fp)
  8007a0:	180d883a 	mov	r6,r3
  8007a4:	e17ffe17 	ldw	r5,-8(fp)
  8007a8:	e13ffb17 	ldw	r4,-20(fp)
  8007ac:	103ee83a 	callr	r2
  8007b0:	e0bffc15 	stw	r2,-16(fp)
  8007b4:	e0bffc17 	ldw	r2,-16(fp)
  8007b8:	1000070e 	bge	r2,zero,8007d8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  8007bc:	08006e00 	call	8006e0 <alt_get_errno>
  8007c0:	1007883a 	mov	r3,r2
  8007c4:	e0bffc17 	ldw	r2,-16(fp)
  8007c8:	0085c83a 	sub	r2,zero,r2
  8007cc:	18800015 	stw	r2,0(r3)
        return -1;
  8007d0:	00bfffc4 	movi	r2,-1
  8007d4:	00000c06 	br	800808 <write+0xec>
      }
      return rval;
  8007d8:	e0bffc17 	ldw	r2,-16(fp)
  8007dc:	00000a06 	br	800808 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8007e0:	08006e00 	call	8006e0 <alt_get_errno>
  8007e4:	1007883a 	mov	r3,r2
  8007e8:	00800344 	movi	r2,13
  8007ec:	18800015 	stw	r2,0(r3)
  8007f0:	00000406 	br	800804 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8007f4:	08006e00 	call	8006e0 <alt_get_errno>
  8007f8:	1007883a 	mov	r3,r2
  8007fc:	00801444 	movi	r2,81
  800800:	18800015 	stw	r2,0(r3)
  }
  return -1;
  800804:	00bfffc4 	movi	r2,-1
}
  800808:	e037883a 	mov	sp,fp
  80080c:	dfc00117 	ldw	ra,4(sp)
  800810:	df000017 	ldw	fp,0(sp)
  800814:	dec00204 	addi	sp,sp,8
  800818:	f800283a 	ret

0080081c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80081c:	deffdf04 	addi	sp,sp,-132
  800820:	dfc02015 	stw	ra,128(sp)
  800824:	df001f15 	stw	fp,124(sp)
  800828:	df001f04 	addi	fp,sp,124
  80082c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  800830:	e0bfe204 	addi	r2,fp,-120
  800834:	100b883a 	mov	r5,r2
  800838:	01003fc4 	movi	r4,255
  80083c:	0807c800 	call	807c80 <OSTaskQuery>
  800840:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  800844:	e0bffe83 	ldbu	r2,-6(fp)
  800848:	10803fcc 	andi	r2,r2,255
  80084c:	10001e1e 	bne	r2,zero,8008c8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
  800850:	e0bfee83 	ldbu	r2,-70(fp)
  800854:	10803fcc 	andi	r2,r2,255
  800858:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80085c:	d0a10617 	ldw	r2,-31720(gp)
  800860:	e0fffd04 	addi	r3,fp,-12
  800864:	180b883a 	mov	r5,r3
  800868:	1009883a 	mov	r4,r2
  80086c:	08064980 	call	806498 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  800870:	e0bffe43 	ldbu	r2,-7(fp)
  800874:	10803fcc 	andi	r2,r2,255
  800878:	10000726 	beq	r2,zero,800898 <__env_lock+0x7c>
  80087c:	d0a00217 	ldw	r2,-32760(gp)
  800880:	e0ffe117 	ldw	r3,-124(fp)
  800884:	1880041e 	bne	r3,r2,800898 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  800888:	d0a10517 	ldw	r2,-31724(gp)
  80088c:	10800044 	addi	r2,r2,1
  800890:	d0a10515 	stw	r2,-31724(gp)
  800894:	00000a06 	br	8008c0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  800898:	d0a10617 	ldw	r2,-31720(gp)
  80089c:	e0fffe84 	addi	r3,fp,-6
  8008a0:	180d883a 	mov	r6,r3
  8008a4:	000b883a 	mov	r5,zero
  8008a8:	1009883a 	mov	r4,r2
  8008ac:	08060100 	call	806010 <OSSemPend>
    locks  = 1;
  8008b0:	00800044 	movi	r2,1
  8008b4:	d0a10515 	stw	r2,-31724(gp)
    lockid = id;
  8008b8:	e0bfe117 	ldw	r2,-124(fp)
  8008bc:	d0a00215 	stw	r2,-32760(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  8008c0:	0001883a 	nop
  8008c4:	00000106 	br	8008cc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  8008c8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  8008cc:	e037883a 	mov	sp,fp
  8008d0:	dfc00117 	ldw	ra,4(sp)
  8008d4:	df000017 	ldw	fp,0(sp)
  8008d8:	dec00204 	addi	sp,sp,8
  8008dc:	f800283a 	ret

008008e0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  8008e0:	defffd04 	addi	sp,sp,-12
  8008e4:	dfc00215 	stw	ra,8(sp)
  8008e8:	df000115 	stw	fp,4(sp)
  8008ec:	df000104 	addi	fp,sp,4
  8008f0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  8008f4:	d0a10517 	ldw	r2,-31724(gp)
  8008f8:	10000b26 	beq	r2,zero,800928 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  8008fc:	d0a10517 	ldw	r2,-31724(gp)
  800900:	10bfffc4 	addi	r2,r2,-1
  800904:	d0a10515 	stw	r2,-31724(gp)
  800908:	d0a10517 	ldw	r2,-31724(gp)
  80090c:	1000071e 	bne	r2,zero,80092c <__env_unlock+0x4c>
  {
    lockid = -1;
  800910:	00bfffc4 	movi	r2,-1
  800914:	d0a00215 	stw	r2,-32760(gp)
    OSSemPost( alt_envsem );
  800918:	d0a10617 	ldw	r2,-31720(gp)
  80091c:	1009883a 	mov	r4,r2
  800920:	08063880 	call	806388 <OSSemPost>
  800924:	00000106 	br	80092c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  800928:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80092c:	e037883a 	mov	sp,fp
  800930:	dfc00117 	ldw	ra,4(sp)
  800934:	df000017 	ldw	fp,0(sp)
  800938:	dec00204 	addi	sp,sp,8
  80093c:	f800283a 	ret

00800940 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  800940:	deffdb04 	addi	sp,sp,-148
  800944:	dfc02415 	stw	ra,144(sp)
  800948:	df002315 	stw	fp,140(sp)
  80094c:	df002304 	addi	fp,sp,140
  800950:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800954:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  800958:	d0a10943 	ldbu	r2,-31707(gp)
  80095c:	10803fcc 	andi	r2,r2,255
  800960:	10800060 	cmpeqi	r2,r2,1
  800964:	10003626 	beq	r2,zero,800a40 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  800968:	e0bfe204 	addi	r2,fp,-120
  80096c:	100b883a 	mov	r5,r2
  800970:	01003fc4 	movi	r4,255
  800974:	0807c800 	call	807c80 <OSTaskQuery>
  800978:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80097c:	e0bffe83 	ldbu	r2,-6(fp)
  800980:	10803fcc 	andi	r2,r2,255
  800984:	1000301e 	bne	r2,zero,800a48 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
  800988:	e0bfee83 	ldbu	r2,-70(fp)
  80098c:	10803fcc 	andi	r2,r2,255
  800990:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  800994:	d0a10817 	ldw	r2,-31712(gp)
  800998:	e0fffd04 	addi	r3,fp,-12
  80099c:	180b883a 	mov	r5,r3
  8009a0:	1009883a 	mov	r4,r2
  8009a4:	08064980 	call	806498 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8009a8:	0005303a 	rdctl	r2,status
  8009ac:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8009b0:	e0ffe117 	ldw	r3,-124(fp)
  8009b4:	00bfff84 	movi	r2,-2
  8009b8:	1884703a 	and	r2,r3,r2
  8009bc:	1001703a 	wrctl	status,r2
  
  return context;
  8009c0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
  8009c4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
  8009c8:	e0bffd0b 	ldhu	r2,-12(fp)
  8009cc:	10bfffcc 	andi	r2,r2,65535
  8009d0:	10000b1e 	bne	r2,zero,800a00 <__malloc_lock+0xc0>
  8009d4:	d0a00317 	ldw	r2,-32756(gp)
  8009d8:	e0ffde17 	ldw	r3,-136(fp)
  8009dc:	1880081e 	bne	r3,r2,800a00 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
  8009e0:	d0a10717 	ldw	r2,-31716(gp)
  8009e4:	10800044 	addi	r2,r2,1
  8009e8:	d0a10715 	stw	r2,-31716(gp)
  8009ec:	e0bfdd17 	ldw	r2,-140(fp)
  8009f0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8009f4:	e0bfdf17 	ldw	r2,-132(fp)
  8009f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  8009fc:	00000e06 	br	800a38 <__malloc_lock+0xf8>
  800a00:	e0bfdd17 	ldw	r2,-140(fp)
  800a04:	e0bfe015 	stw	r2,-128(fp)
  800a08:	e0bfe017 	ldw	r2,-128(fp)
  800a0c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  800a10:	d0a10817 	ldw	r2,-31712(gp)
  800a14:	e0fffe84 	addi	r3,fp,-6
  800a18:	180d883a 	mov	r6,r3
  800a1c:	000b883a 	mov	r5,zero
  800a20:	1009883a 	mov	r4,r2
  800a24:	08060100 	call	806010 <OSSemPend>
    locks  = 1;
  800a28:	00800044 	movi	r2,1
  800a2c:	d0a10715 	stw	r2,-31716(gp)
    lockid = id;
  800a30:	e0bfde17 	ldw	r2,-136(fp)
  800a34:	d0a00315 	stw	r2,-32756(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
  800a38:	0001883a 	nop
  800a3c:	00000306 	br	800a4c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
  800a40:	0001883a 	nop
  800a44:	00000106 	br	800a4c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
  800a48:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  800a4c:	e037883a 	mov	sp,fp
  800a50:	dfc00117 	ldw	ra,4(sp)
  800a54:	df000017 	ldw	fp,0(sp)
  800a58:	dec00204 	addi	sp,sp,8
  800a5c:	f800283a 	ret

00800a60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  800a60:	defff804 	addi	sp,sp,-32
  800a64:	dfc00715 	stw	ra,28(sp)
  800a68:	df000615 	stw	fp,24(sp)
  800a6c:	df000604 	addi	fp,sp,24
  800a70:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800a74:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
  800a78:	d0a10943 	ldbu	r2,-31707(gp)
  800a7c:	10803fcc 	andi	r2,r2,255
  800a80:	10800060 	cmpeqi	r2,r2,1
  800a84:	10002326 	beq	r2,zero,800b14 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800a88:	0005303a 	rdctl	r2,status
  800a8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800a90:	e0fffe17 	ldw	r3,-8(fp)
  800a94:	00bfff84 	movi	r2,-2
  800a98:	1884703a 	and	r2,r3,r2
  800a9c:	1001703a 	wrctl	status,r2
  
  return context;
  800aa0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
  800aa4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
  800aa8:	d0a10717 	ldw	r2,-31716(gp)
  800aac:	1000051e 	bne	r2,zero,800ac4 <__malloc_unlock+0x64>
  800ab0:	e0bffa17 	ldw	r2,-24(fp)
  800ab4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800ab8:	e0bffb17 	ldw	r2,-20(fp)
  800abc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  800ac0:	00001506 	br	800b18 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  800ac4:	d0a10717 	ldw	r2,-31716(gp)
  800ac8:	10bfffc4 	addi	r2,r2,-1
  800acc:	d0a10715 	stw	r2,-31716(gp)
  800ad0:	d0a10717 	ldw	r2,-31716(gp)
  800ad4:	10000a1e 	bne	r2,zero,800b00 <__malloc_unlock+0xa0>
  {
    lockid = -1;
  800ad8:	00bfffc4 	movi	r2,-1
  800adc:	d0a00315 	stw	r2,-32756(gp)
  800ae0:	e0bffa17 	ldw	r2,-24(fp)
  800ae4:	e0bffc15 	stw	r2,-16(fp)
  800ae8:	e0bffc17 	ldw	r2,-16(fp)
  800aec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  800af0:	d0a10817 	ldw	r2,-31712(gp)
  800af4:	1009883a 	mov	r4,r2
  800af8:	08063880 	call	806388 <OSSemPost>
  800afc:	00000606 	br	800b18 <__malloc_unlock+0xb8>
  800b00:	e0bffa17 	ldw	r2,-24(fp)
  800b04:	e0bffd15 	stw	r2,-12(fp)
  800b08:	e0bffd17 	ldw	r2,-12(fp)
  800b0c:	1001703a 	wrctl	status,r2
  800b10:	00000106 	br	800b18 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  800b14:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  800b18:	e037883a 	mov	sp,fp
  800b1c:	dfc00117 	ldw	ra,4(sp)
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00204 	addi	sp,sp,8
  800b28:	f800283a 	ret

00800b2c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  800b2c:	defff704 	addi	sp,sp,-36
  800b30:	dfc00815 	stw	ra,32(sp)
  800b34:	df000715 	stw	fp,28(sp)
  800b38:	df000704 	addi	fp,sp,28
  800b3c:	e13ffd15 	stw	r4,-12(fp)
  800b40:	e17ffe15 	stw	r5,-8(fp)
  800b44:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800b48:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  800b4c:	e0bfff17 	ldw	r2,-4(fp)
  800b50:	1000021e 	bne	r2,zero,800b5c <OSEventNameGet+0x30>
        return (0);
  800b54:	0005883a 	mov	r2,zero
  800b58:	00003706 	br	800c38 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  800b5c:	e0bffd17 	ldw	r2,-12(fp)
  800b60:	1000051e 	bne	r2,zero,800b78 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  800b64:	e0bfff17 	ldw	r2,-4(fp)
  800b68:	00c00104 	movi	r3,4
  800b6c:	10c00005 	stb	r3,0(r2)
        return (0);
  800b70:	0005883a 	mov	r2,zero
  800b74:	00003006 	br	800c38 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  800b78:	e0bffe17 	ldw	r2,-8(fp)
  800b7c:	1000051e 	bne	r2,zero,800b94 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  800b80:	e0bfff17 	ldw	r2,-4(fp)
  800b84:	00c00304 	movi	r3,12
  800b88:	10c00005 	stb	r3,0(r2)
        return (0);
  800b8c:	0005883a 	mov	r2,zero
  800b90:	00002906 	br	800c38 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  800b94:	d0a11703 	ldbu	r2,-31652(gp)
  800b98:	10803fcc 	andi	r2,r2,255
  800b9c:	10000526 	beq	r2,zero,800bb4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  800ba0:	e0bfff17 	ldw	r2,-4(fp)
  800ba4:	00c00444 	movi	r3,17
  800ba8:	10c00005 	stb	r3,0(r2)
        return (0);
  800bac:	0005883a 	mov	r2,zero
  800bb0:	00002106 	br	800c38 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
  800bb4:	e0bffd17 	ldw	r2,-12(fp)
  800bb8:	10800003 	ldbu	r2,0(r2)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	10bfffc4 	addi	r2,r2,-1
  800bc4:	10800128 	cmpgeui	r2,r2,4
  800bc8:	10000526 	beq	r2,zero,800be0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  800bcc:	e0bfff17 	ldw	r2,-4(fp)
  800bd0:	00c00044 	movi	r3,1
  800bd4:	10c00005 	stb	r3,0(r2)
             return (0);
  800bd8:	0005883a 	mov	r2,zero
  800bdc:	00001606 	br	800c38 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  800be0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800be4:	0005303a 	rdctl	r2,status
  800be8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800bec:	e0fffb17 	ldw	r3,-20(fp)
  800bf0:	00bfff84 	movi	r2,-2
  800bf4:	1884703a 	and	r2,r3,r2
  800bf8:	1001703a 	wrctl	status,r2
  
  return context;
  800bfc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  800c00:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  800c04:	e0bffd17 	ldw	r2,-12(fp)
  800c08:	10800384 	addi	r2,r2,14
  800c0c:	100b883a 	mov	r5,r2
  800c10:	e13ffe17 	ldw	r4,-8(fp)
  800c14:	08025b00 	call	8025b0 <OS_StrCopy>
  800c18:	e0bffa05 	stb	r2,-24(fp)
  800c1c:	e0bff917 	ldw	r2,-28(fp)
  800c20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800c24:	e0bffc17 	ldw	r2,-16(fp)
  800c28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  800c2c:	e0bfff17 	ldw	r2,-4(fp)
  800c30:	10000005 	stb	zero,0(r2)
    return (len);
  800c34:	e0bffa03 	ldbu	r2,-24(fp)
}
  800c38:	e037883a 	mov	sp,fp
  800c3c:	dfc00117 	ldw	ra,4(sp)
  800c40:	df000017 	ldw	fp,0(sp)
  800c44:	dec00204 	addi	sp,sp,8
  800c48:	f800283a 	ret

00800c4c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  800c4c:	defff604 	addi	sp,sp,-40
  800c50:	dfc00915 	stw	ra,36(sp)
  800c54:	df000815 	stw	fp,32(sp)
  800c58:	df000804 	addi	fp,sp,32
  800c5c:	e13ffd15 	stw	r4,-12(fp)
  800c60:	e17ffe15 	stw	r5,-8(fp)
  800c64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  800c68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  800c6c:	e0bfff17 	ldw	r2,-4(fp)
  800c70:	10004026 	beq	r2,zero,800d74 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  800c74:	e0bffd17 	ldw	r2,-12(fp)
  800c78:	1000041e 	bne	r2,zero,800c8c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  800c7c:	e0bfff17 	ldw	r2,-4(fp)
  800c80:	00c00104 	movi	r3,4
  800c84:	10c00005 	stb	r3,0(r2)
        return;
  800c88:	00003b06 	br	800d78 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  800c8c:	e0bffe17 	ldw	r2,-8(fp)
  800c90:	1000041e 	bne	r2,zero,800ca4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  800c94:	e0bfff17 	ldw	r2,-4(fp)
  800c98:	00c00304 	movi	r3,12
  800c9c:	10c00005 	stb	r3,0(r2)
        return;
  800ca0:	00003506 	br	800d78 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  800ca4:	d0a11703 	ldbu	r2,-31652(gp)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	10000426 	beq	r2,zero,800cc0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  800cb0:	e0bfff17 	ldw	r2,-4(fp)
  800cb4:	00c00484 	movi	r3,18
  800cb8:	10c00005 	stb	r3,0(r2)
        return;
  800cbc:	00002e06 	br	800d78 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
  800cc0:	e0bffd17 	ldw	r2,-12(fp)
  800cc4:	10800003 	ldbu	r2,0(r2)
  800cc8:	10803fcc 	andi	r2,r2,255
  800ccc:	10bfffc4 	addi	r2,r2,-1
  800cd0:	10800128 	cmpgeui	r2,r2,4
  800cd4:	10000426 	beq	r2,zero,800ce8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  800cd8:	e0bfff17 	ldw	r2,-4(fp)
  800cdc:	00c00044 	movi	r3,1
  800ce0:	10c00005 	stb	r3,0(r2)
             return;
  800ce4:	00002406 	br	800d78 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  800ce8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800cec:	0005303a 	rdctl	r2,status
  800cf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800cf4:	e0fffc17 	ldw	r3,-16(fp)
  800cf8:	00bfff84 	movi	r2,-2
  800cfc:	1884703a 	and	r2,r3,r2
  800d00:	1001703a 	wrctl	status,r2
  
  return context;
  800d04:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  800d08:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  800d0c:	e13ffe17 	ldw	r4,-8(fp)
  800d10:	08026240 	call	802624 <OS_StrLen>
  800d14:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  800d18:	e0bffa03 	ldbu	r2,-24(fp)
  800d1c:	10800830 	cmpltui	r2,r2,32
  800d20:	1000081e 	bne	r2,zero,800d44 <OSEventNameSet+0xf8>
  800d24:	e0bff817 	ldw	r2,-32(fp)
  800d28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800d2c:	e0bff917 	ldw	r2,-28(fp)
  800d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  800d34:	e0bfff17 	ldw	r2,-4(fp)
  800d38:	00c002c4 	movi	r3,11
  800d3c:	10c00005 	stb	r3,0(r2)
        return;
  800d40:	00000d06 	br	800d78 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  800d44:	e0bffd17 	ldw	r2,-12(fp)
  800d48:	10800384 	addi	r2,r2,14
  800d4c:	e17ffe17 	ldw	r5,-8(fp)
  800d50:	1009883a 	mov	r4,r2
  800d54:	08025b00 	call	8025b0 <OS_StrCopy>
  800d58:	e0bff817 	ldw	r2,-32(fp)
  800d5c:	e0bffb15 	stw	r2,-20(fp)
  800d60:	e0bffb17 	ldw	r2,-20(fp)
  800d64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  800d68:	e0bfff17 	ldw	r2,-4(fp)
  800d6c:	10000005 	stb	zero,0(r2)
  800d70:	00000106 	br	800d78 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  800d74:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  800d78:	e037883a 	mov	sp,fp
  800d7c:	dfc00117 	ldw	ra,4(sp)
  800d80:	df000017 	ldw	fp,0(sp)
  800d84:	dec00204 	addi	sp,sp,8
  800d88:	f800283a 	ret

00800d8c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  800d8c:	deffed04 	addi	sp,sp,-76
  800d90:	dfc01215 	stw	ra,72(sp)
  800d94:	df001115 	stw	fp,68(sp)
  800d98:	df001104 	addi	fp,sp,68
  800d9c:	e13ffc15 	stw	r4,-16(fp)
  800da0:	e17ffd15 	stw	r5,-12(fp)
  800da4:	e1bffe15 	stw	r6,-8(fp)
  800da8:	3805883a 	mov	r2,r7
  800dac:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  800db0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  800db4:	e0800217 	ldw	r2,8(fp)
  800db8:	1000021e 	bne	r2,zero,800dc4 <OSEventPendMulti+0x38>
        return (0);
  800dbc:	0005883a 	mov	r2,zero
  800dc0:	00017106 	br	801388 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  800dc4:	e0bffc17 	ldw	r2,-16(fp)
  800dc8:	1000051e 	bne	r2,zero,800de0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  800dcc:	e0800217 	ldw	r2,8(fp)
  800dd0:	00c00104 	movi	r3,4
  800dd4:	10c00005 	stb	r3,0(r2)
        return (0);
  800dd8:	0005883a 	mov	r2,zero
  800ddc:	00016a06 	br	801388 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  800de0:	e0bffd17 	ldw	r2,-12(fp)
  800de4:	1000051e 	bne	r2,zero,800dfc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  800de8:	e0800217 	ldw	r2,8(fp)
  800dec:	00c00104 	movi	r3,4
  800df0:	10c00005 	stb	r3,0(r2)
        return (0);
  800df4:	0005883a 	mov	r2,zero
  800df8:	00016306 	br	801388 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  800dfc:	e0bffe17 	ldw	r2,-8(fp)
  800e00:	1000051e 	bne	r2,zero,800e18 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  800e04:	e0800217 	ldw	r2,8(fp)
  800e08:	00c00104 	movi	r3,4
  800e0c:	10c00005 	stb	r3,0(r2)
        return (0);
  800e10:	0005883a 	mov	r2,zero
  800e14:	00015c06 	br	801388 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  800e18:	e0bffd17 	ldw	r2,-12(fp)
  800e1c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  800e20:	e0bffc17 	ldw	r2,-16(fp)
  800e24:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
  800e28:	e0bfef17 	ldw	r2,-68(fp)
  800e2c:	10800017 	ldw	r2,0(r2)
  800e30:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
  800e34:	00001906 	br	800e9c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  800e38:	e0bff017 	ldw	r2,-64(fp)
  800e3c:	10800003 	ldbu	r2,0(r2)
  800e40:	10803fcc 	andi	r2,r2,255
  800e44:	10c000a0 	cmpeqi	r3,r2,2
  800e48:	1800091e 	bne	r3,zero,800e70 <OSEventPendMulti+0xe4>
  800e4c:	10c000e0 	cmpeqi	r3,r2,3
  800e50:	1800091e 	bne	r3,zero,800e78 <OSEventPendMulti+0xec>
  800e54:	10800060 	cmpeqi	r2,r2,1
  800e58:	1000091e 	bne	r2,zero,800e80 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  800e5c:	e0800217 	ldw	r2,8(fp)
  800e60:	00c00044 	movi	r3,1
  800e64:	10c00005 	stb	r3,0(r2)
                 return (0);
  800e68:	0005883a 	mov	r2,zero
  800e6c:	00014606 	br	801388 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  800e70:	0001883a 	nop
  800e74:	00000306 	br	800e84 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  800e78:	0001883a 	nop
  800e7c:	00000106 	br	800e84 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  800e80:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  800e84:	e0bfef17 	ldw	r2,-68(fp)
  800e88:	10800104 	addi	r2,r2,4
  800e8c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  800e90:	e0bfef17 	ldw	r2,-68(fp)
  800e94:	10800017 	ldw	r2,0(r2)
  800e98:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  800e9c:	e0bff017 	ldw	r2,-64(fp)
  800ea0:	103fe51e 	bne	r2,zero,800e38 <__alt_mem_onchip_memory2_0+0xff7fce38>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  800ea4:	d0a11703 	ldbu	r2,-31652(gp)
  800ea8:	10803fcc 	andi	r2,r2,255
  800eac:	10000526 	beq	r2,zero,800ec4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  800eb0:	e0800217 	ldw	r2,8(fp)
  800eb4:	00c00084 	movi	r3,2
  800eb8:	10c00005 	stb	r3,0(r2)
        return (0);
  800ebc:	0005883a 	mov	r2,zero
  800ec0:	00013106 	br	801388 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  800ec4:	d0a10903 	ldbu	r2,-31708(gp)
  800ec8:	10803fcc 	andi	r2,r2,255
  800ecc:	10000526 	beq	r2,zero,800ee4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  800ed0:	e0800217 	ldw	r2,8(fp)
  800ed4:	00c00344 	movi	r3,13
  800ed8:	10c00005 	stb	r3,0(r2)
        return (0);
  800edc:	0005883a 	mov	r2,zero
  800ee0:	00012906 	br	801388 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800ee4:	0005303a 	rdctl	r2,status
  800ee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800eec:	e0fffb17 	ldw	r3,-20(fp)
  800ef0:	00bfff84 	movi	r2,-2
  800ef4:	1884703a 	and	r2,r3,r2
  800ef8:	1001703a 	wrctl	status,r2
  
  return context;
  800efc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  800f00:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
  800f04:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
  800f08:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  800f0c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
  800f10:	e0bffc17 	ldw	r2,-16(fp)
  800f14:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
  800f18:	e0bfef17 	ldw	r2,-68(fp)
  800f1c:	10800017 	ldw	r2,0(r2)
  800f20:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  800f24:	00008106 	br	80112c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
  800f28:	e0bff017 	ldw	r2,-64(fp)
  800f2c:	10800003 	ldbu	r2,0(r2)
  800f30:	10803fcc 	andi	r2,r2,255
  800f34:	10c000a0 	cmpeqi	r3,r2,2
  800f38:	18003c1e 	bne	r3,zero,80102c <OSEventPendMulti+0x2a0>
  800f3c:	10c000e0 	cmpeqi	r3,r2,3
  800f40:	1800031e 	bne	r3,zero,800f50 <OSEventPendMulti+0x1c4>
  800f44:	10800060 	cmpeqi	r2,r2,1
  800f48:	10001e1e 	bne	r2,zero,800fc4 <OSEventPendMulti+0x238>
  800f4c:	00006606 	br	8010e8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  800f50:	e0bff017 	ldw	r2,-64(fp)
  800f54:	1080020b 	ldhu	r2,8(r2)
  800f58:	10bfffcc 	andi	r2,r2,65535
  800f5c:	10001526 	beq	r2,zero,800fb4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  800f60:	e0bff017 	ldw	r2,-64(fp)
  800f64:	1080020b 	ldhu	r2,8(r2)
  800f68:	10bfffc4 	addi	r2,r2,-1
  800f6c:	1007883a 	mov	r3,r2
  800f70:	e0bff017 	ldw	r2,-64(fp)
  800f74:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  800f78:	e0bffd17 	ldw	r2,-12(fp)
  800f7c:	10c00104 	addi	r3,r2,4
  800f80:	e0fffd15 	stw	r3,-12(fp)
  800f84:	e0fff017 	ldw	r3,-64(fp)
  800f88:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
  800f8c:	00800044 	movi	r2,1
  800f90:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  800f94:	e0bffe17 	ldw	r2,-8(fp)
  800f98:	10c00104 	addi	r3,r2,4
  800f9c:	e0fffe15 	stw	r3,-8(fp)
  800fa0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
  800fa4:	e0bff18b 	ldhu	r2,-58(fp)
  800fa8:	10800044 	addi	r2,r2,1
  800fac:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  800fb0:	00005806 	br	801114 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  800fb4:	e0bff203 	ldbu	r2,-56(fp)
  800fb8:	10800054 	ori	r2,r2,1
  800fbc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  800fc0:	00005406 	br	801114 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  800fc4:	e0bff017 	ldw	r2,-64(fp)
  800fc8:	10800117 	ldw	r2,4(r2)
  800fcc:	10001326 	beq	r2,zero,80101c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  800fd0:	e0bffe17 	ldw	r2,-8(fp)
  800fd4:	10c00104 	addi	r3,r2,4
  800fd8:	e0fffe15 	stw	r3,-8(fp)
  800fdc:	e0fff017 	ldw	r3,-64(fp)
  800fe0:	18c00117 	ldw	r3,4(r3)
  800fe4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
  800fe8:	e0bff017 	ldw	r2,-64(fp)
  800fec:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  800ff0:	e0bffd17 	ldw	r2,-12(fp)
  800ff4:	10c00104 	addi	r3,r2,4
  800ff8:	e0fffd15 	stw	r3,-12(fp)
  800ffc:	e0fff017 	ldw	r3,-64(fp)
  801000:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
  801004:	00800044 	movi	r2,1
  801008:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  80100c:	e0bff18b 	ldhu	r2,-58(fp)
  801010:	10800044 	addi	r2,r2,1
  801014:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  801018:	00003e06 	br	801114 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80101c:	e0bff203 	ldbu	r2,-56(fp)
  801020:	10800094 	ori	r2,r2,2
  801024:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  801028:	00003a06 	br	801114 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80102c:	e0bff017 	ldw	r2,-64(fp)
  801030:	10800117 	ldw	r2,4(r2)
  801034:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  801038:	e0bff517 	ldw	r2,-44(fp)
  80103c:	1080058b 	ldhu	r2,22(r2)
  801040:	10bfffcc 	andi	r2,r2,65535
  801044:	10002426 	beq	r2,zero,8010d8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  801048:	e0bffe17 	ldw	r2,-8(fp)
  80104c:	10c00104 	addi	r3,r2,4
  801050:	e0fffe15 	stw	r3,-8(fp)
  801054:	e0fff517 	ldw	r3,-44(fp)
  801058:	18c00417 	ldw	r3,16(r3)
  80105c:	19400104 	addi	r5,r3,4
  801060:	e13ff517 	ldw	r4,-44(fp)
  801064:	21400415 	stw	r5,16(r4)
  801068:	18c00017 	ldw	r3,0(r3)
  80106c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  801070:	e0bff517 	ldw	r2,-44(fp)
  801074:	10c00417 	ldw	r3,16(r2)
  801078:	e0bff517 	ldw	r2,-44(fp)
  80107c:	10800217 	ldw	r2,8(r2)
  801080:	1880041e 	bne	r3,r2,801094 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  801084:	e0bff517 	ldw	r2,-44(fp)
  801088:	10c00117 	ldw	r3,4(r2)
  80108c:	e0bff517 	ldw	r2,-44(fp)
  801090:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  801094:	e0bff517 	ldw	r2,-44(fp)
  801098:	1080058b 	ldhu	r2,22(r2)
  80109c:	10bfffc4 	addi	r2,r2,-1
  8010a0:	1007883a 	mov	r3,r2
  8010a4:	e0bff517 	ldw	r2,-44(fp)
  8010a8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  8010ac:	e0bffd17 	ldw	r2,-12(fp)
  8010b0:	10c00104 	addi	r3,r2,4
  8010b4:	e0fffd15 	stw	r3,-12(fp)
  8010b8:	e0fff017 	ldw	r3,-64(fp)
  8010bc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
  8010c0:	00800044 	movi	r2,1
  8010c4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
  8010c8:	e0bff18b 	ldhu	r2,-58(fp)
  8010cc:	10800044 	addi	r2,r2,1
  8010d0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  8010d4:	00000f06 	br	801114 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  8010d8:	e0bff203 	ldbu	r2,-56(fp)
  8010dc:	10800114 	ori	r2,r2,4
  8010e0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
  8010e4:	00000b06 	br	801114 <OSEventPendMulti+0x388>
  8010e8:	e0bff317 	ldw	r2,-52(fp)
  8010ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8010f0:	e0bff417 	ldw	r2,-48(fp)
  8010f4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  8010f8:	e0bffd17 	ldw	r2,-12(fp)
  8010fc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  801100:	e0800217 	ldw	r2,8(fp)
  801104:	00c00044 	movi	r3,1
  801108:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  80110c:	e0bff18b 	ldhu	r2,-58(fp)
  801110:	00009d06 	br	801388 <OSEventPendMulti+0x5fc>
        }
        pevents++;
  801114:	e0bfef17 	ldw	r2,-68(fp)
  801118:	10800104 	addi	r2,r2,4
  80111c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
  801120:	e0bfef17 	ldw	r2,-68(fp)
  801124:	10800017 	ldw	r2,0(r2)
  801128:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80112c:	e0bff017 	ldw	r2,-64(fp)
  801130:	103f7d1e 	bne	r2,zero,800f28 <__alt_mem_onchip_memory2_0+0xff7fcf28>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  801134:	e0bff103 	ldbu	r2,-60(fp)
  801138:	10800058 	cmpnei	r2,r2,1
  80113c:	10000a1e 	bne	r2,zero,801168 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  801140:	e0bffd17 	ldw	r2,-12(fp)
  801144:	10000015 	stw	zero,0(r2)
  801148:	e0bff317 	ldw	r2,-52(fp)
  80114c:	e0bff615 	stw	r2,-40(fp)
  801150:	e0bff617 	ldw	r2,-40(fp)
  801154:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  801158:	e0800217 	ldw	r2,8(fp)
  80115c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  801160:	e0bff18b 	ldhu	r2,-58(fp)
  801164:	00008806 	br	801388 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  801168:	d0a11817 	ldw	r2,-31648(gp)
  80116c:	d0e11817 	ldw	r3,-31648(gp)
  801170:	19000c03 	ldbu	r4,48(r3)
  801174:	e0fff203 	ldbu	r3,-56(fp)
  801178:	20c6b03a 	or	r3,r4,r3
  80117c:	1809883a 	mov	r4,r3
  801180:	00ffe004 	movi	r3,-128
  801184:	20c6b03a 	or	r3,r4,r3
  801188:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80118c:	d0a11817 	ldw	r2,-31648(gp)
  801190:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  801194:	d0a11817 	ldw	r2,-31648(gp)
  801198:	e0ffff0b 	ldhu	r3,-4(fp)
  80119c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  8011a0:	e13ffc17 	ldw	r4,-16(fp)
  8011a4:	0801cc80 	call	801cc8 <OS_EventTaskWaitMulti>
  8011a8:	e0bff317 	ldw	r2,-52(fp)
  8011ac:	e0bff915 	stw	r2,-28(fp)
  8011b0:	e0bff917 	ldw	r2,-28(fp)
  8011b4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  8011b8:	080246c0 	call	80246c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8011bc:	0005303a 	rdctl	r2,status
  8011c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8011c4:	e0fff717 	ldw	r3,-36(fp)
  8011c8:	00bfff84 	movi	r2,-2
  8011cc:	1884703a 	and	r2,r3,r2
  8011d0:	1001703a 	wrctl	status,r2
  
  return context;
  8011d4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  8011d8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8011dc:	d0a11817 	ldw	r2,-31648(gp)
  8011e0:	10800c43 	ldbu	r2,49(r2)
  8011e4:	10803fcc 	andi	r2,r2,255
  8011e8:	10000226 	beq	r2,zero,8011f4 <OSEventPendMulti+0x468>
  8011ec:	108000a0 	cmpeqi	r2,r2,2
  8011f0:	10001826 	beq	r2,zero,801254 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  8011f4:	d0a11817 	ldw	r2,-31648(gp)
  8011f8:	10800717 	ldw	r2,28(r2)
  8011fc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  801200:	e0bff017 	ldw	r2,-64(fp)
  801204:	10000b26 	beq	r2,zero,801234 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  801208:	e0bffd17 	ldw	r2,-12(fp)
  80120c:	10c00104 	addi	r3,r2,4
  801210:	e0fffd15 	stw	r3,-12(fp)
  801214:	e0fff017 	ldw	r3,-64(fp)
  801218:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80121c:	e0bffd17 	ldw	r2,-12(fp)
  801220:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  801224:	e0bff18b 	ldhu	r2,-58(fp)
  801228:	10800044 	addi	r2,r2,1
  80122c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  801230:	00000d06 	br	801268 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  801234:	d0a11817 	ldw	r2,-31648(gp)
  801238:	00c00044 	movi	r3,1
  80123c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  801240:	d0a11817 	ldw	r2,-31648(gp)
  801244:	e17ffc17 	ldw	r5,-16(fp)
  801248:	1009883a 	mov	r4,r2
  80124c:	0801ed00 	call	801ed0 <OS_EventTaskRemoveMulti>
             }
			 break;
  801250:	00000506 	br	801268 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  801254:	d0a11817 	ldw	r2,-31648(gp)
  801258:	e17ffc17 	ldw	r5,-16(fp)
  80125c:	1009883a 	mov	r4,r2
  801260:	0801ed00 	call	801ed0 <OS_EventTaskRemoveMulti>
             break;
  801264:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  801268:	d0a11817 	ldw	r2,-31648(gp)
  80126c:	10800c43 	ldbu	r2,49(r2)
  801270:	10803fcc 	andi	r2,r2,255
  801274:	10000326 	beq	r2,zero,801284 <OSEventPendMulti+0x4f8>
  801278:	108000a0 	cmpeqi	r2,r2,2
  80127c:	1000231e 	bne	r2,zero,80130c <OSEventPendMulti+0x580>
  801280:	00002a06 	br	80132c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  801284:	e0bff017 	ldw	r2,-64(fp)
  801288:	10800003 	ldbu	r2,0(r2)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	0080100e 	bge	zero,r2,8012d4 <OSEventPendMulti+0x548>
  801294:	10c000d0 	cmplti	r3,r2,3
  801298:	1800071e 	bne	r3,zero,8012b8 <OSEventPendMulti+0x52c>
  80129c:	108000e0 	cmpeqi	r2,r2,3
  8012a0:	10000c26 	beq	r2,zero,8012d4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  8012a4:	e0bffe17 	ldw	r2,-8(fp)
  8012a8:	10c00104 	addi	r3,r2,4
  8012ac:	e0fffe15 	stw	r3,-8(fp)
  8012b0:	10000015 	stw	zero,0(r2)
                      break;
  8012b4:	00001206 	br	801300 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  8012b8:	e0bffe17 	ldw	r2,-8(fp)
  8012bc:	10c00104 	addi	r3,r2,4
  8012c0:	e0fffe15 	stw	r3,-8(fp)
  8012c4:	d0e11817 	ldw	r3,-31648(gp)
  8012c8:	18c00917 	ldw	r3,36(r3)
  8012cc:	10c00015 	stw	r3,0(r2)
                      break;
  8012d0:	00000b06 	br	801300 <OSEventPendMulti+0x574>
  8012d4:	e0bff317 	ldw	r2,-52(fp)
  8012d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8012dc:	e0bff817 	ldw	r2,-32(fp)
  8012e0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  8012e4:	e0bffd17 	ldw	r2,-12(fp)
  8012e8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  8012ec:	e0800217 	ldw	r2,8(fp)
  8012f0:	00c00044 	movi	r3,1
  8012f4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  8012f8:	e0bff18b 	ldhu	r2,-58(fp)
  8012fc:	00002206 	br	801388 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
  801300:	e0800217 	ldw	r2,8(fp)
  801304:	10000005 	stb	zero,0(r2)
             break;
  801308:	00001006 	br	80134c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80130c:	e0bffe17 	ldw	r2,-8(fp)
  801310:	10c00104 	addi	r3,r2,4
  801314:	e0fffe15 	stw	r3,-8(fp)
  801318:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80131c:	e0800217 	ldw	r2,8(fp)
  801320:	00c00384 	movi	r3,14
  801324:	10c00005 	stb	r3,0(r2)
             break;
  801328:	00000806 	br	80134c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80132c:	e0bffe17 	ldw	r2,-8(fp)
  801330:	10c00104 	addi	r3,r2,4
  801334:	e0fffe15 	stw	r3,-8(fp)
  801338:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80133c:	e0800217 	ldw	r2,8(fp)
  801340:	00c00284 	movi	r3,10
  801344:	10c00005 	stb	r3,0(r2)
             break;
  801348:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80134c:	d0a11817 	ldw	r2,-31648(gp)
  801350:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  801354:	d0a11817 	ldw	r2,-31648(gp)
  801358:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80135c:	d0a11817 	ldw	r2,-31648(gp)
  801360:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  801364:	d0a11817 	ldw	r2,-31648(gp)
  801368:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80136c:	d0a11817 	ldw	r2,-31648(gp)
  801370:	10000915 	stw	zero,36(r2)
  801374:	e0bff317 	ldw	r2,-52(fp)
  801378:	e0bffa15 	stw	r2,-24(fp)
  80137c:	e0bffa17 	ldw	r2,-24(fp)
  801380:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  801384:	e0bff18b 	ldhu	r2,-58(fp)
}
  801388:	e037883a 	mov	sp,fp
  80138c:	dfc00117 	ldw	ra,4(sp)
  801390:	df000017 	ldw	fp,0(sp)
  801394:	dec00204 	addi	sp,sp,8
  801398:	f800283a 	ret

0080139c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80139c:	defffe04 	addi	sp,sp,-8
  8013a0:	dfc00115 	stw	ra,4(sp)
  8013a4:	df000015 	stw	fp,0(sp)
  8013a8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  8013ac:	08095140 	call	809514 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  8013b0:	08021180 	call	802118 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  8013b4:	08021600 	call	802160 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  8013b8:	08022cc0 	call	8022cc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  8013bc:	08020380 	call	802038 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  8013c0:	080416c0 	call	80416c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  8013c4:	0804a6c0 	call	804a6c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  8013c8:	0805ba00 	call	805ba0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  8013cc:	08021cc0 	call	8021cc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  8013d0:	080224c0 	call	80224c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  8013d4:	08095340 	call	809534 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  8013d8:	0802b400 	call	802b40 <OSDebugInit>
#endif
}
  8013dc:	0001883a 	nop
  8013e0:	e037883a 	mov	sp,fp
  8013e4:	dfc00117 	ldw	ra,4(sp)
  8013e8:	df000017 	ldw	fp,0(sp)
  8013ec:	dec00204 	addi	sp,sp,8
  8013f0:	f800283a 	ret

008013f4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  8013f4:	deffff04 	addi	sp,sp,-4
  8013f8:	df000015 	stw	fp,0(sp)
  8013fc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
  801400:	d0a10943 	ldbu	r2,-31707(gp)
  801404:	10803fcc 	andi	r2,r2,255
  801408:	10800058 	cmpnei	r2,r2,1
  80140c:	1000071e 	bne	r2,zero,80142c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
  801410:	d0a11703 	ldbu	r2,-31652(gp)
  801414:	10803fcc 	andi	r2,r2,255
  801418:	10803fe0 	cmpeqi	r2,r2,255
  80141c:	1000031e 	bne	r2,zero,80142c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  801420:	d0a11703 	ldbu	r2,-31652(gp)
  801424:	10800044 	addi	r2,r2,1
  801428:	d0a11705 	stb	r2,-31652(gp)
        }
    }
}
  80142c:	0001883a 	nop
  801430:	e037883a 	mov	sp,fp
  801434:	df000017 	ldw	fp,0(sp)
  801438:	dec00104 	addi	sp,sp,4
  80143c:	f800283a 	ret

00801440 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  801440:	defffb04 	addi	sp,sp,-20
  801444:	dfc00415 	stw	ra,16(sp)
  801448:	df000315 	stw	fp,12(sp)
  80144c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  801450:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
  801454:	d0a10943 	ldbu	r2,-31707(gp)
  801458:	10803fcc 	andi	r2,r2,255
  80145c:	10800058 	cmpnei	r2,r2,1
  801460:	10002f1e 	bne	r2,zero,801520 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801464:	0005303a 	rdctl	r2,status
  801468:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80146c:	e0ffff17 	ldw	r3,-4(fp)
  801470:	00bfff84 	movi	r2,-2
  801474:	1884703a 	and	r2,r3,r2
  801478:	1001703a 	wrctl	status,r2
  
  return context;
  80147c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  801480:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  801484:	d0a11703 	ldbu	r2,-31652(gp)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	10000326 	beq	r2,zero,80149c <OSIntExit+0x5c>
            OSIntNesting--;
  801490:	d0a11703 	ldbu	r2,-31652(gp)
  801494:	10bfffc4 	addi	r2,r2,-1
  801498:	d0a11705 	stb	r2,-31652(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80149c:	d0a11703 	ldbu	r2,-31652(gp)
  8014a0:	10803fcc 	andi	r2,r2,255
  8014a4:	10001a1e 	bne	r2,zero,801510 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  8014a8:	d0a10903 	ldbu	r2,-31708(gp)
  8014ac:	10803fcc 	andi	r2,r2,255
  8014b0:	1000171e 	bne	r2,zero,801510 <OSIntExit+0xd0>
                OS_SchedNew();
  8014b4:	080253c0 	call	80253c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  8014b8:	d0e10b03 	ldbu	r3,-31700(gp)
  8014bc:	d0a10b43 	ldbu	r2,-31699(gp)
  8014c0:	18c03fcc 	andi	r3,r3,255
  8014c4:	10803fcc 	andi	r2,r2,255
  8014c8:	18801126 	beq	r3,r2,801510 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  8014cc:	d0a10b03 	ldbu	r2,-31700(gp)
  8014d0:	10c03fcc 	andi	r3,r2,255
  8014d4:	00802074 	movhi	r2,129
  8014d8:	1085d804 	addi	r2,r2,5984
  8014dc:	18c7883a 	add	r3,r3,r3
  8014e0:	18c7883a 	add	r3,r3,r3
  8014e4:	10c5883a 	add	r2,r2,r3
  8014e8:	10800017 	ldw	r2,0(r2)
  8014ec:	d0a11315 	stw	r2,-31668(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  8014f0:	d0a11317 	ldw	r2,-31668(gp)
  8014f4:	10c00e17 	ldw	r3,56(r2)
  8014f8:	18c00044 	addi	r3,r3,1
  8014fc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  801500:	d0a10e17 	ldw	r2,-31688(gp)
  801504:	10800044 	addi	r2,r2,1
  801508:	d0a10e15 	stw	r2,-31688(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80150c:	08092400 	call	809240 <OSCtxSw>
  801510:	e0bffd17 	ldw	r2,-12(fp)
  801514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801518:	e0bffe17 	ldw	r2,-8(fp)
  80151c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  801520:	0001883a 	nop
  801524:	e037883a 	mov	sp,fp
  801528:	dfc00117 	ldw	ra,4(sp)
  80152c:	df000017 	ldw	fp,0(sp)
  801530:	dec00204 	addi	sp,sp,8
  801534:	f800283a 	ret

00801538 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  801538:	defffc04 	addi	sp,sp,-16
  80153c:	df000315 	stw	fp,12(sp)
  801540:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  801544:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  801548:	d0a10943 	ldbu	r2,-31707(gp)
  80154c:	10803fcc 	andi	r2,r2,255
  801550:	10800058 	cmpnei	r2,r2,1
  801554:	1000161e 	bne	r2,zero,8015b0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801558:	0005303a 	rdctl	r2,status
  80155c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801560:	e0ffff17 	ldw	r3,-4(fp)
  801564:	00bfff84 	movi	r2,-2
  801568:	1884703a 	and	r2,r3,r2
  80156c:	1001703a 	wrctl	status,r2
  
  return context;
  801570:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  801574:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  801578:	d0a11703 	ldbu	r2,-31652(gp)
  80157c:	10803fcc 	andi	r2,r2,255
  801580:	1000071e 	bne	r2,zero,8015a0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  801584:	d0a10903 	ldbu	r2,-31708(gp)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	10803fe0 	cmpeqi	r2,r2,255
  801590:	1000031e 	bne	r2,zero,8015a0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  801594:	d0a10903 	ldbu	r2,-31708(gp)
  801598:	10800044 	addi	r2,r2,1
  80159c:	d0a10905 	stb	r2,-31708(gp)
  8015a0:	e0bffd17 	ldw	r2,-12(fp)
  8015a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8015a8:	e0bffe17 	ldw	r2,-8(fp)
  8015ac:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  8015b0:	0001883a 	nop
  8015b4:	e037883a 	mov	sp,fp
  8015b8:	df000017 	ldw	fp,0(sp)
  8015bc:	dec00104 	addi	sp,sp,4
  8015c0:	f800283a 	ret

008015c4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  8015c4:	defff804 	addi	sp,sp,-32
  8015c8:	dfc00715 	stw	ra,28(sp)
  8015cc:	df000615 	stw	fp,24(sp)
  8015d0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8015d4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  8015d8:	d0a10943 	ldbu	r2,-31707(gp)
  8015dc:	10803fcc 	andi	r2,r2,255
  8015e0:	10800058 	cmpnei	r2,r2,1
  8015e4:	1000281e 	bne	r2,zero,801688 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8015e8:	0005303a 	rdctl	r2,status
  8015ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8015f0:	e0ffff17 	ldw	r3,-4(fp)
  8015f4:	00bfff84 	movi	r2,-2
  8015f8:	1884703a 	and	r2,r3,r2
  8015fc:	1001703a 	wrctl	status,r2
  
  return context;
  801600:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
  801604:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  801608:	d0a10903 	ldbu	r2,-31708(gp)
  80160c:	10803fcc 	andi	r2,r2,255
  801610:	10001926 	beq	r2,zero,801678 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  801614:	d0a10903 	ldbu	r2,-31708(gp)
  801618:	10bfffc4 	addi	r2,r2,-1
  80161c:	d0a10905 	stb	r2,-31708(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  801620:	d0a10903 	ldbu	r2,-31708(gp)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	10000e1e 	bne	r2,zero,801664 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80162c:	d0a11703 	ldbu	r2,-31652(gp)
  801630:	10803fcc 	andi	r2,r2,255
  801634:	1000061e 	bne	r2,zero,801650 <OSSchedUnlock+0x8c>
  801638:	e0bffa17 	ldw	r2,-24(fp)
  80163c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801640:	e0bffb17 	ldw	r2,-20(fp)
  801644:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  801648:	080246c0 	call	80246c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80164c:	00000e06 	br	801688 <OSSchedUnlock+0xc4>
  801650:	e0bffa17 	ldw	r2,-24(fp)
  801654:	e0bffc15 	stw	r2,-16(fp)
  801658:	e0bffc17 	ldw	r2,-16(fp)
  80165c:	1001703a 	wrctl	status,r2
  801660:	00000906 	br	801688 <OSSchedUnlock+0xc4>
  801664:	e0bffa17 	ldw	r2,-24(fp)
  801668:	e0bffd15 	stw	r2,-12(fp)
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	1001703a 	wrctl	status,r2
  801674:	00000406 	br	801688 <OSSchedUnlock+0xc4>
  801678:	e0bffa17 	ldw	r2,-24(fp)
  80167c:	e0bffe15 	stw	r2,-8(fp)
  801680:	e0bffe17 	ldw	r2,-8(fp)
  801684:	1001703a 	wrctl	status,r2
  801688:	0001883a 	nop
  80168c:	e037883a 	mov	sp,fp
  801690:	dfc00117 	ldw	ra,4(sp)
  801694:	df000017 	ldw	fp,0(sp)
  801698:	dec00204 	addi	sp,sp,8
  80169c:	f800283a 	ret

008016a0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  8016a0:	defffe04 	addi	sp,sp,-8
  8016a4:	dfc00115 	stw	ra,4(sp)
  8016a8:	df000015 	stw	fp,0(sp)
  8016ac:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  8016b0:	d0a10943 	ldbu	r2,-31707(gp)
  8016b4:	10803fcc 	andi	r2,r2,255
  8016b8:	10000f1e 	bne	r2,zero,8016f8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  8016bc:	080253c0 	call	80253c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  8016c0:	d0a10b03 	ldbu	r2,-31700(gp)
  8016c4:	d0a10b45 	stb	r2,-31699(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  8016c8:	d0a10b03 	ldbu	r2,-31700(gp)
  8016cc:	10c03fcc 	andi	r3,r2,255
  8016d0:	00802074 	movhi	r2,129
  8016d4:	1085d804 	addi	r2,r2,5984
  8016d8:	18c7883a 	add	r3,r3,r3
  8016dc:	18c7883a 	add	r3,r3,r3
  8016e0:	10c5883a 	add	r2,r2,r3
  8016e4:	10800017 	ldw	r2,0(r2)
  8016e8:	d0a11315 	stw	r2,-31668(gp)
        OSTCBCur      = OSTCBHighRdy;
  8016ec:	d0a11317 	ldw	r2,-31668(gp)
  8016f0:	d0a11815 	stw	r2,-31648(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  8016f4:	08092cc0 	call	8092cc <OSStartHighRdy>
    }
}
  8016f8:	0001883a 	nop
  8016fc:	e037883a 	mov	sp,fp
  801700:	dfc00117 	ldw	ra,4(sp)
  801704:	df000017 	ldw	fp,0(sp)
  801708:	dec00204 	addi	sp,sp,8
  80170c:	f800283a 	ret

00801710 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  801710:	defff904 	addi	sp,sp,-28
  801714:	dfc00615 	stw	ra,24(sp)
  801718:	df000515 	stw	fp,20(sp)
  80171c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  801720:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  801724:	01000084 	movi	r4,2
  801728:	0807e140 	call	807e14 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80172c:	0005303a 	rdctl	r2,status
  801730:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801734:	e0fffc17 	ldw	r3,-16(fp)
  801738:	00bfff84 	movi	r2,-2
  80173c:	1884703a 	and	r2,r3,r2
  801740:	1001703a 	wrctl	status,r2
  
  return context;
  801744:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  801748:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80174c:	d0210a15 	stw	zero,-31704(gp)
  801750:	e0bffb17 	ldw	r2,-20(fp)
  801754:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801758:	e0bffd17 	ldw	r2,-12(fp)
  80175c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  801760:	01001904 	movi	r4,100
  801764:	0807e140 	call	807e14 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801768:	0005303a 	rdctl	r2,status
  80176c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801770:	e0fffe17 	ldw	r3,-8(fp)
  801774:	00bfff84 	movi	r2,-2
  801778:	1884703a 	and	r2,r3,r2
  80177c:	1001703a 	wrctl	status,r2
  
  return context;
  801780:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  801784:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  801788:	d0a10a17 	ldw	r2,-31704(gp)
  80178c:	d0a10f15 	stw	r2,-31684(gp)
    OSStatRdy    = OS_TRUE;
  801790:	00800044 	movi	r2,1
  801794:	d0a11b05 	stb	r2,-31636(gp)
  801798:	e0bffb17 	ldw	r2,-20(fp)
  80179c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8017a0:	e0bfff17 	ldw	r2,-4(fp)
  8017a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8017a8:	0001883a 	nop
  8017ac:	e037883a 	mov	sp,fp
  8017b0:	dfc00117 	ldw	ra,4(sp)
  8017b4:	df000017 	ldw	fp,0(sp)
  8017b8:	dec00204 	addi	sp,sp,8
  8017bc:	f800283a 	ret

008017c0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  8017c0:	defff704 	addi	sp,sp,-36
  8017c4:	dfc00815 	stw	ra,32(sp)
  8017c8:	df000715 	stw	fp,28(sp)
  8017cc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8017d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  8017d4:	08094f40 	call	8094f4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8017d8:	0005303a 	rdctl	r2,status
  8017dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8017e0:	e0fffd17 	ldw	r3,-12(fp)
  8017e4:	00bfff84 	movi	r2,-2
  8017e8:	1884703a 	and	r2,r3,r2
  8017ec:	1001703a 	wrctl	status,r2
  
  return context;
  8017f0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  8017f4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
  8017f8:	d0a11917 	ldw	r2,-31644(gp)
  8017fc:	10800044 	addi	r2,r2,1
  801800:	d0a11915 	stw	r2,-31644(gp)
  801804:	e0bffb17 	ldw	r2,-20(fp)
  801808:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80180c:	e0bfff17 	ldw	r2,-4(fp)
  801810:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  801814:	d0a10943 	ldbu	r2,-31707(gp)
  801818:	10803fcc 	andi	r2,r2,255
  80181c:	10800058 	cmpnei	r2,r2,1
  801820:	10006a1e 	bne	r2,zero,8019cc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  801824:	d0a10d03 	ldbu	r2,-31692(gp)
  801828:	10803fcc 	andi	r2,r2,255
  80182c:	10c00060 	cmpeqi	r3,r2,1
  801830:	1800061e 	bne	r3,zero,80184c <OSTimeTick+0x8c>
  801834:	10c000a0 	cmpeqi	r3,r2,2
  801838:	1800061e 	bne	r3,zero,801854 <OSTimeTick+0x94>
  80183c:	10000a1e 	bne	r2,zero,801868 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  801840:	00800044 	movi	r2,1
  801844:	e0bffa05 	stb	r2,-24(fp)
                 break;
  801848:	00000b06 	br	801878 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80184c:	e03ffa05 	stb	zero,-24(fp)
                 break;
  801850:	00000906 	br	801878 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  801854:	00800044 	movi	r2,1
  801858:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80185c:	00800044 	movi	r2,1
  801860:	d0a10d05 	stb	r2,-31692(gp)
                 break;
  801864:	00000406 	br	801878 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  801868:	00800044 	movi	r2,1
  80186c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  801870:	d0210d05 	stb	zero,-31692(gp)
                 break;
  801874:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  801878:	e0bffa03 	ldbu	r2,-24(fp)
  80187c:	10005226 	beq	r2,zero,8019c8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  801880:	d0a10c17 	ldw	r2,-31696(gp)
  801884:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  801888:	00004906 	br	8019b0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80188c:	0005303a 	rdctl	r2,status
  801890:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801894:	e0fffc17 	ldw	r3,-16(fp)
  801898:	00bfff84 	movi	r2,-2
  80189c:	1884703a 	and	r2,r3,r2
  8018a0:	1001703a 	wrctl	status,r2
  
  return context;
  8018a4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
  8018a8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  8018ac:	e0bff917 	ldw	r2,-28(fp)
  8018b0:	10800b8b 	ldhu	r2,46(r2)
  8018b4:	10bfffcc 	andi	r2,r2,65535
  8018b8:	10003626 	beq	r2,zero,801994 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  8018bc:	e0bff917 	ldw	r2,-28(fp)
  8018c0:	10800b8b 	ldhu	r2,46(r2)
  8018c4:	10bfffc4 	addi	r2,r2,-1
  8018c8:	1007883a 	mov	r3,r2
  8018cc:	e0bff917 	ldw	r2,-28(fp)
  8018d0:	10c00b8d 	sth	r3,46(r2)
  8018d4:	e0bff917 	ldw	r2,-28(fp)
  8018d8:	10800b8b 	ldhu	r2,46(r2)
  8018dc:	10bfffcc 	andi	r2,r2,65535
  8018e0:	10002c1e 	bne	r2,zero,801994 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8018e4:	e0bff917 	ldw	r2,-28(fp)
  8018e8:	10800c03 	ldbu	r2,48(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	10800dcc 	andi	r2,r2,55
  8018f4:	10000b26 	beq	r2,zero,801924 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8018f8:	e0bff917 	ldw	r2,-28(fp)
  8018fc:	10c00c03 	ldbu	r3,48(r2)
  801900:	00bff204 	movi	r2,-56
  801904:	1884703a 	and	r2,r3,r2
  801908:	1007883a 	mov	r3,r2
  80190c:	e0bff917 	ldw	r2,-28(fp)
  801910:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  801914:	e0bff917 	ldw	r2,-28(fp)
  801918:	00c00044 	movi	r3,1
  80191c:	10c00c45 	stb	r3,49(r2)
  801920:	00000206 	br	80192c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  801924:	e0bff917 	ldw	r2,-28(fp)
  801928:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80192c:	e0bff917 	ldw	r2,-28(fp)
  801930:	10800c03 	ldbu	r2,48(r2)
  801934:	10803fcc 	andi	r2,r2,255
  801938:	1080020c 	andi	r2,r2,8
  80193c:	1000151e 	bne	r2,zero,801994 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  801940:	e0bff917 	ldw	r2,-28(fp)
  801944:	10c00d83 	ldbu	r3,54(r2)
  801948:	d0a11503 	ldbu	r2,-31660(gp)
  80194c:	1884b03a 	or	r2,r3,r2
  801950:	d0a11505 	stb	r2,-31660(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  801954:	e0bff917 	ldw	r2,-28(fp)
  801958:	10800d03 	ldbu	r2,52(r2)
  80195c:	10c03fcc 	andi	r3,r2,255
  801960:	e0bff917 	ldw	r2,-28(fp)
  801964:	10800d03 	ldbu	r2,52(r2)
  801968:	11003fcc 	andi	r4,r2,255
  80196c:	d0a11544 	addi	r2,gp,-31659
  801970:	2085883a 	add	r2,r4,r2
  801974:	11000003 	ldbu	r4,0(r2)
  801978:	e0bff917 	ldw	r2,-28(fp)
  80197c:	10800d43 	ldbu	r2,53(r2)
  801980:	2084b03a 	or	r2,r4,r2
  801984:	1009883a 	mov	r4,r2
  801988:	d0a11544 	addi	r2,gp,-31659
  80198c:	1885883a 	add	r2,r3,r2
  801990:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  801994:	e0bff917 	ldw	r2,-28(fp)
  801998:	10800517 	ldw	r2,20(r2)
  80199c:	e0bff915 	stw	r2,-28(fp)
  8019a0:	e0bffb17 	ldw	r2,-20(fp)
  8019a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8019a8:	e0bffe17 	ldw	r2,-8(fp)
  8019ac:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  8019b0:	e0bff917 	ldw	r2,-28(fp)
  8019b4:	10800c83 	ldbu	r2,50(r2)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	10800518 	cmpnei	r2,r2,20
  8019c0:	103fb21e 	bne	r2,zero,80188c <__alt_mem_onchip_memory2_0+0xff7fd88c>
  8019c4:	00000106 	br	8019cc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  8019c8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  8019cc:	e037883a 	mov	sp,fp
  8019d0:	dfc00117 	ldw	ra,4(sp)
  8019d4:	df000017 	ldw	fp,0(sp)
  8019d8:	dec00204 	addi	sp,sp,8
  8019dc:	f800283a 	ret

008019e0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  8019e0:	deffff04 	addi	sp,sp,-4
  8019e4:	df000015 	stw	fp,0(sp)
  8019e8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  8019ec:	00804784 	movi	r2,286
}
  8019f0:	e037883a 	mov	sp,fp
  8019f4:	df000017 	ldw	fp,0(sp)
  8019f8:	dec00104 	addi	sp,sp,4
  8019fc:	f800283a 	ret

00801a00 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  801a00:	deffff04 	addi	sp,sp,-4
  801a04:	df000015 	stw	fp,0(sp)
  801a08:	d839883a 	mov	fp,sp
}
  801a0c:	0001883a 	nop
  801a10:	e037883a 	mov	sp,fp
  801a14:	df000017 	ldw	fp,0(sp)
  801a18:	dec00104 	addi	sp,sp,4
  801a1c:	f800283a 	ret

00801a20 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  801a20:	defff804 	addi	sp,sp,-32
  801a24:	dfc00715 	stw	ra,28(sp)
  801a28:	df000615 	stw	fp,24(sp)
  801a2c:	df000604 	addi	fp,sp,24
  801a30:	e13ffc15 	stw	r4,-16(fp)
  801a34:	e17ffd15 	stw	r5,-12(fp)
  801a38:	3007883a 	mov	r3,r6
  801a3c:	3805883a 	mov	r2,r7
  801a40:	e0fffe05 	stb	r3,-8(fp)
  801a44:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  801a48:	e0bffc17 	ldw	r2,-16(fp)
  801a4c:	10800283 	ldbu	r2,10(r2)
  801a50:	10c03fcc 	andi	r3,r2,255
  801a54:	00802074 	movhi	r2,129
  801a58:	10a74404 	addi	r2,r2,-25328
  801a5c:	10c5883a 	add	r2,r2,r3
  801a60:	10800003 	ldbu	r2,0(r2)
  801a64:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  801a68:	e0bffa03 	ldbu	r2,-24(fp)
  801a6c:	e0fffc17 	ldw	r3,-16(fp)
  801a70:	1885883a 	add	r2,r3,r2
  801a74:	108002c4 	addi	r2,r2,11
  801a78:	10800003 	ldbu	r2,0(r2)
  801a7c:	10c03fcc 	andi	r3,r2,255
  801a80:	00802074 	movhi	r2,129
  801a84:	10a74404 	addi	r2,r2,-25328
  801a88:	10c5883a 	add	r2,r2,r3
  801a8c:	10800003 	ldbu	r2,0(r2)
  801a90:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  801a94:	e0bffa03 	ldbu	r2,-24(fp)
  801a98:	100490fa 	slli	r2,r2,3
  801a9c:	1007883a 	mov	r3,r2
  801aa0:	e0bffa43 	ldbu	r2,-23(fp)
  801aa4:	1885883a 	add	r2,r3,r2
  801aa8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  801aac:	e0fffa83 	ldbu	r3,-22(fp)
  801ab0:	00802074 	movhi	r2,129
  801ab4:	1085d804 	addi	r2,r2,5984
  801ab8:	18c7883a 	add	r3,r3,r3
  801abc:	18c7883a 	add	r3,r3,r3
  801ac0:	10c5883a 	add	r2,r2,r3
  801ac4:	10800017 	ldw	r2,0(r2)
  801ac8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  801acc:	e0bffb17 	ldw	r2,-20(fp)
  801ad0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  801ad4:	e0bffb17 	ldw	r2,-20(fp)
  801ad8:	e0fffd17 	ldw	r3,-12(fp)
  801adc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  801ae0:	e0bffb17 	ldw	r2,-20(fp)
  801ae4:	10800c03 	ldbu	r2,48(r2)
  801ae8:	1007883a 	mov	r3,r2
  801aec:	e0bffe03 	ldbu	r2,-8(fp)
  801af0:	0084303a 	nor	r2,zero,r2
  801af4:	1884703a 	and	r2,r3,r2
  801af8:	1007883a 	mov	r3,r2
  801afc:	e0bffb17 	ldw	r2,-20(fp)
  801b00:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  801b04:	e0bffb17 	ldw	r2,-20(fp)
  801b08:	e0ffff03 	ldbu	r3,-4(fp)
  801b0c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  801b10:	e0bffb17 	ldw	r2,-20(fp)
  801b14:	10800c03 	ldbu	r2,48(r2)
  801b18:	10803fcc 	andi	r2,r2,255
  801b1c:	1080020c 	andi	r2,r2,8
  801b20:	1000111e 	bne	r2,zero,801b68 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  801b24:	e0bffb17 	ldw	r2,-20(fp)
  801b28:	10c00d83 	ldbu	r3,54(r2)
  801b2c:	d0a11503 	ldbu	r2,-31660(gp)
  801b30:	1884b03a 	or	r2,r3,r2
  801b34:	d0a11505 	stb	r2,-31660(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  801b38:	e0fffa03 	ldbu	r3,-24(fp)
  801b3c:	e13ffa03 	ldbu	r4,-24(fp)
  801b40:	d0a11544 	addi	r2,gp,-31659
  801b44:	2085883a 	add	r2,r4,r2
  801b48:	11000003 	ldbu	r4,0(r2)
  801b4c:	e0bffb17 	ldw	r2,-20(fp)
  801b50:	10800d43 	ldbu	r2,53(r2)
  801b54:	2084b03a 	or	r2,r4,r2
  801b58:	1009883a 	mov	r4,r2
  801b5c:	d0a11544 	addi	r2,gp,-31659
  801b60:	1885883a 	add	r2,r3,r2
  801b64:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  801b68:	e17ffc17 	ldw	r5,-16(fp)
  801b6c:	e13ffb17 	ldw	r4,-20(fp)
  801b70:	0801e180 	call	801e18 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  801b74:	e0bffb17 	ldw	r2,-20(fp)
  801b78:	10800817 	ldw	r2,32(r2)
  801b7c:	10000826 	beq	r2,zero,801ba0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  801b80:	e0bffb17 	ldw	r2,-20(fp)
  801b84:	10800817 	ldw	r2,32(r2)
  801b88:	100b883a 	mov	r5,r2
  801b8c:	e13ffb17 	ldw	r4,-20(fp)
  801b90:	0801ed00 	call	801ed0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  801b94:	e0bffb17 	ldw	r2,-20(fp)
  801b98:	e0fffc17 	ldw	r3,-16(fp)
  801b9c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  801ba0:	e0bffa83 	ldbu	r2,-22(fp)
}
  801ba4:	e037883a 	mov	sp,fp
  801ba8:	dfc00117 	ldw	ra,4(sp)
  801bac:	df000017 	ldw	fp,0(sp)
  801bb0:	dec00204 	addi	sp,sp,8
  801bb4:	f800283a 	ret

00801bb8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  801bb8:	defffd04 	addi	sp,sp,-12
  801bbc:	df000215 	stw	fp,8(sp)
  801bc0:	df000204 	addi	fp,sp,8
  801bc4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  801bc8:	d0a11817 	ldw	r2,-31648(gp)
  801bcc:	e0ffff17 	ldw	r3,-4(fp)
  801bd0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  801bd4:	d0a11817 	ldw	r2,-31648(gp)
  801bd8:	10800d03 	ldbu	r2,52(r2)
  801bdc:	10803fcc 	andi	r2,r2,255
  801be0:	d0e11817 	ldw	r3,-31648(gp)
  801be4:	18c00d03 	ldbu	r3,52(r3)
  801be8:	18c03fcc 	andi	r3,r3,255
  801bec:	e13fff17 	ldw	r4,-4(fp)
  801bf0:	20c7883a 	add	r3,r4,r3
  801bf4:	18c002c4 	addi	r3,r3,11
  801bf8:	19000003 	ldbu	r4,0(r3)
  801bfc:	d0e11817 	ldw	r3,-31648(gp)
  801c00:	18c00d43 	ldbu	r3,53(r3)
  801c04:	20c6b03a 	or	r3,r4,r3
  801c08:	1809883a 	mov	r4,r3
  801c0c:	e0ffff17 	ldw	r3,-4(fp)
  801c10:	1885883a 	add	r2,r3,r2
  801c14:	108002c4 	addi	r2,r2,11
  801c18:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  801c1c:	e0bfff17 	ldw	r2,-4(fp)
  801c20:	10c00283 	ldbu	r3,10(r2)
  801c24:	d0a11817 	ldw	r2,-31648(gp)
  801c28:	10800d83 	ldbu	r2,54(r2)
  801c2c:	1884b03a 	or	r2,r3,r2
  801c30:	1007883a 	mov	r3,r2
  801c34:	e0bfff17 	ldw	r2,-4(fp)
  801c38:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  801c3c:	d0a11817 	ldw	r2,-31648(gp)
  801c40:	10800d03 	ldbu	r2,52(r2)
  801c44:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  801c48:	e0fffe03 	ldbu	r3,-8(fp)
  801c4c:	e13ffe03 	ldbu	r4,-8(fp)
  801c50:	d0a11544 	addi	r2,gp,-31659
  801c54:	2085883a 	add	r2,r4,r2
  801c58:	10800003 	ldbu	r2,0(r2)
  801c5c:	1009883a 	mov	r4,r2
  801c60:	d0a11817 	ldw	r2,-31648(gp)
  801c64:	10800d43 	ldbu	r2,53(r2)
  801c68:	0084303a 	nor	r2,zero,r2
  801c6c:	2084703a 	and	r2,r4,r2
  801c70:	1009883a 	mov	r4,r2
  801c74:	d0a11544 	addi	r2,gp,-31659
  801c78:	1885883a 	add	r2,r3,r2
  801c7c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  801c80:	e0fffe03 	ldbu	r3,-8(fp)
  801c84:	d0a11544 	addi	r2,gp,-31659
  801c88:	1885883a 	add	r2,r3,r2
  801c8c:	10800003 	ldbu	r2,0(r2)
  801c90:	10803fcc 	andi	r2,r2,255
  801c94:	1000071e 	bne	r2,zero,801cb4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  801c98:	d0a11817 	ldw	r2,-31648(gp)
  801c9c:	10800d83 	ldbu	r2,54(r2)
  801ca0:	0084303a 	nor	r2,zero,r2
  801ca4:	1007883a 	mov	r3,r2
  801ca8:	d0a11503 	ldbu	r2,-31660(gp)
  801cac:	1884703a 	and	r2,r3,r2
  801cb0:	d0a11505 	stb	r2,-31660(gp)
    }
}
  801cb4:	0001883a 	nop
  801cb8:	e037883a 	mov	sp,fp
  801cbc:	df000017 	ldw	fp,0(sp)
  801cc0:	dec00104 	addi	sp,sp,4
  801cc4:	f800283a 	ret

00801cc8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  801cc8:	defffb04 	addi	sp,sp,-20
  801ccc:	df000415 	stw	fp,16(sp)
  801cd0:	df000404 	addi	fp,sp,16
  801cd4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  801cd8:	d0a11817 	ldw	r2,-31648(gp)
  801cdc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  801ce0:	d0a11817 	ldw	r2,-31648(gp)
  801ce4:	e0ffff17 	ldw	r3,-4(fp)
  801ce8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  801cec:	e0bfff17 	ldw	r2,-4(fp)
  801cf0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  801cf4:	e0bffc17 	ldw	r2,-16(fp)
  801cf8:	10800017 	ldw	r2,0(r2)
  801cfc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  801d00:	00002006 	br	801d84 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  801d04:	d0a11817 	ldw	r2,-31648(gp)
  801d08:	10800d03 	ldbu	r2,52(r2)
  801d0c:	10803fcc 	andi	r2,r2,255
  801d10:	d0e11817 	ldw	r3,-31648(gp)
  801d14:	18c00d03 	ldbu	r3,52(r3)
  801d18:	18c03fcc 	andi	r3,r3,255
  801d1c:	e13ffd17 	ldw	r4,-12(fp)
  801d20:	20c7883a 	add	r3,r4,r3
  801d24:	18c002c4 	addi	r3,r3,11
  801d28:	19000003 	ldbu	r4,0(r3)
  801d2c:	d0e11817 	ldw	r3,-31648(gp)
  801d30:	18c00d43 	ldbu	r3,53(r3)
  801d34:	20c6b03a 	or	r3,r4,r3
  801d38:	1809883a 	mov	r4,r3
  801d3c:	e0fffd17 	ldw	r3,-12(fp)
  801d40:	1885883a 	add	r2,r3,r2
  801d44:	108002c4 	addi	r2,r2,11
  801d48:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  801d4c:	e0bffd17 	ldw	r2,-12(fp)
  801d50:	10c00283 	ldbu	r3,10(r2)
  801d54:	d0a11817 	ldw	r2,-31648(gp)
  801d58:	10800d83 	ldbu	r2,54(r2)
  801d5c:	1884b03a 	or	r2,r3,r2
  801d60:	1007883a 	mov	r3,r2
  801d64:	e0bffd17 	ldw	r2,-12(fp)
  801d68:	10c00285 	stb	r3,10(r2)
        pevents++;
  801d6c:	e0bffc17 	ldw	r2,-16(fp)
  801d70:	10800104 	addi	r2,r2,4
  801d74:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  801d78:	e0bffc17 	ldw	r2,-16(fp)
  801d7c:	10800017 	ldw	r2,0(r2)
  801d80:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  801d84:	e0bffd17 	ldw	r2,-12(fp)
  801d88:	103fde1e 	bne	r2,zero,801d04 <__alt_mem_onchip_memory2_0+0xff7fdd04>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  801d8c:	d0a11817 	ldw	r2,-31648(gp)
  801d90:	10800d03 	ldbu	r2,52(r2)
  801d94:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  801d98:	e0fffe03 	ldbu	r3,-8(fp)
  801d9c:	e13ffe03 	ldbu	r4,-8(fp)
  801da0:	d0a11544 	addi	r2,gp,-31659
  801da4:	2085883a 	add	r2,r4,r2
  801da8:	10800003 	ldbu	r2,0(r2)
  801dac:	1009883a 	mov	r4,r2
  801db0:	d0a11817 	ldw	r2,-31648(gp)
  801db4:	10800d43 	ldbu	r2,53(r2)
  801db8:	0084303a 	nor	r2,zero,r2
  801dbc:	2084703a 	and	r2,r4,r2
  801dc0:	1009883a 	mov	r4,r2
  801dc4:	d0a11544 	addi	r2,gp,-31659
  801dc8:	1885883a 	add	r2,r3,r2
  801dcc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  801dd0:	e0fffe03 	ldbu	r3,-8(fp)
  801dd4:	d0a11544 	addi	r2,gp,-31659
  801dd8:	1885883a 	add	r2,r3,r2
  801ddc:	10800003 	ldbu	r2,0(r2)
  801de0:	10803fcc 	andi	r2,r2,255
  801de4:	1000071e 	bne	r2,zero,801e04 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  801de8:	d0a11817 	ldw	r2,-31648(gp)
  801dec:	10800d83 	ldbu	r2,54(r2)
  801df0:	0084303a 	nor	r2,zero,r2
  801df4:	1007883a 	mov	r3,r2
  801df8:	d0a11503 	ldbu	r2,-31660(gp)
  801dfc:	1884703a 	and	r2,r3,r2
  801e00:	d0a11505 	stb	r2,-31660(gp)
    }
}
  801e04:	0001883a 	nop
  801e08:	e037883a 	mov	sp,fp
  801e0c:	df000017 	ldw	fp,0(sp)
  801e10:	dec00104 	addi	sp,sp,4
  801e14:	f800283a 	ret

00801e18 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  801e18:	defffc04 	addi	sp,sp,-16
  801e1c:	df000315 	stw	fp,12(sp)
  801e20:	df000304 	addi	fp,sp,12
  801e24:	e13ffe15 	stw	r4,-8(fp)
  801e28:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  801e2c:	e0bffe17 	ldw	r2,-8(fp)
  801e30:	10800d03 	ldbu	r2,52(r2)
  801e34:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  801e38:	e0bffd03 	ldbu	r2,-12(fp)
  801e3c:	e0fffd03 	ldbu	r3,-12(fp)
  801e40:	e13fff17 	ldw	r4,-4(fp)
  801e44:	20c7883a 	add	r3,r4,r3
  801e48:	18c002c4 	addi	r3,r3,11
  801e4c:	18c00003 	ldbu	r3,0(r3)
  801e50:	1809883a 	mov	r4,r3
  801e54:	e0fffe17 	ldw	r3,-8(fp)
  801e58:	18c00d43 	ldbu	r3,53(r3)
  801e5c:	00c6303a 	nor	r3,zero,r3
  801e60:	20c6703a 	and	r3,r4,r3
  801e64:	1809883a 	mov	r4,r3
  801e68:	e0ffff17 	ldw	r3,-4(fp)
  801e6c:	1885883a 	add	r2,r3,r2
  801e70:	108002c4 	addi	r2,r2,11
  801e74:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
  801e78:	e0bffd03 	ldbu	r2,-12(fp)
  801e7c:	e0ffff17 	ldw	r3,-4(fp)
  801e80:	1885883a 	add	r2,r3,r2
  801e84:	108002c4 	addi	r2,r2,11
  801e88:	10800003 	ldbu	r2,0(r2)
  801e8c:	10803fcc 	andi	r2,r2,255
  801e90:	10000a1e 	bne	r2,zero,801ebc <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  801e94:	e0bfff17 	ldw	r2,-4(fp)
  801e98:	10800283 	ldbu	r2,10(r2)
  801e9c:	1007883a 	mov	r3,r2
  801ea0:	e0bffe17 	ldw	r2,-8(fp)
  801ea4:	10800d83 	ldbu	r2,54(r2)
  801ea8:	0084303a 	nor	r2,zero,r2
  801eac:	1884703a 	and	r2,r3,r2
  801eb0:	1007883a 	mov	r3,r2
  801eb4:	e0bfff17 	ldw	r2,-4(fp)
  801eb8:	10c00285 	stb	r3,10(r2)
    }
}
  801ebc:	0001883a 	nop
  801ec0:	e037883a 	mov	sp,fp
  801ec4:	df000017 	ldw	fp,0(sp)
  801ec8:	dec00104 	addi	sp,sp,4
  801ecc:	f800283a 	ret

00801ed0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  801ed0:	defffa04 	addi	sp,sp,-24
  801ed4:	df000515 	stw	fp,20(sp)
  801ed8:	df000504 	addi	fp,sp,20
  801edc:	e13ffe15 	stw	r4,-8(fp)
  801ee0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  801ee4:	e0bffe17 	ldw	r2,-8(fp)
  801ee8:	10800d03 	ldbu	r2,52(r2)
  801eec:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  801ef0:	e0bffe17 	ldw	r2,-8(fp)
  801ef4:	10800d83 	ldbu	r2,54(r2)
  801ef8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  801efc:	e0bffe17 	ldw	r2,-8(fp)
  801f00:	10800d43 	ldbu	r2,53(r2)
  801f04:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  801f08:	e0bfff17 	ldw	r2,-4(fp)
  801f0c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  801f10:	e0bffb17 	ldw	r2,-20(fp)
  801f14:	10800017 	ldw	r2,0(r2)
  801f18:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  801f1c:	00002506 	br	801fb4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
  801f20:	e0bffd03 	ldbu	r2,-12(fp)
  801f24:	e0fffd03 	ldbu	r3,-12(fp)
  801f28:	e13ffc17 	ldw	r4,-16(fp)
  801f2c:	20c7883a 	add	r3,r4,r3
  801f30:	18c002c4 	addi	r3,r3,11
  801f34:	18c00003 	ldbu	r3,0(r3)
  801f38:	1809883a 	mov	r4,r3
  801f3c:	e0fffd83 	ldbu	r3,-10(fp)
  801f40:	00c6303a 	nor	r3,zero,r3
  801f44:	20c6703a 	and	r3,r4,r3
  801f48:	1809883a 	mov	r4,r3
  801f4c:	e0fffc17 	ldw	r3,-16(fp)
  801f50:	1885883a 	add	r2,r3,r2
  801f54:	108002c4 	addi	r2,r2,11
  801f58:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
  801f5c:	e0bffd03 	ldbu	r2,-12(fp)
  801f60:	e0fffc17 	ldw	r3,-16(fp)
  801f64:	1885883a 	add	r2,r3,r2
  801f68:	108002c4 	addi	r2,r2,11
  801f6c:	10800003 	ldbu	r2,0(r2)
  801f70:	10803fcc 	andi	r2,r2,255
  801f74:	1000091e 	bne	r2,zero,801f9c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
  801f78:	e0bffc17 	ldw	r2,-16(fp)
  801f7c:	10800283 	ldbu	r2,10(r2)
  801f80:	1007883a 	mov	r3,r2
  801f84:	e0bffd43 	ldbu	r2,-11(fp)
  801f88:	0084303a 	nor	r2,zero,r2
  801f8c:	1884703a 	and	r2,r3,r2
  801f90:	1007883a 	mov	r3,r2
  801f94:	e0bffc17 	ldw	r2,-16(fp)
  801f98:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  801f9c:	e0bffb17 	ldw	r2,-20(fp)
  801fa0:	10800104 	addi	r2,r2,4
  801fa4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  801fa8:	e0bffb17 	ldw	r2,-20(fp)
  801fac:	10800017 	ldw	r2,0(r2)
  801fb0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  801fb4:	e0bffc17 	ldw	r2,-16(fp)
  801fb8:	103fd91e 	bne	r2,zero,801f20 <__alt_mem_onchip_memory2_0+0xff7fdf20>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  801fbc:	0001883a 	nop
  801fc0:	e037883a 	mov	sp,fp
  801fc4:	df000017 	ldw	fp,0(sp)
  801fc8:	dec00104 	addi	sp,sp,4
  801fcc:	f800283a 	ret

00801fd0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  801fd0:	defffc04 	addi	sp,sp,-16
  801fd4:	df000315 	stw	fp,12(sp)
  801fd8:	df000304 	addi	fp,sp,12
  801fdc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  801fe0:	e0bfff17 	ldw	r2,-4(fp)
  801fe4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  801fe8:	e0bfff17 	ldw	r2,-4(fp)
  801fec:	108002c4 	addi	r2,r2,11
  801ff0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  801ff4:	e03ffe05 	stb	zero,-8(fp)
  801ff8:	00000706 	br	802018 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
  801ffc:	e0bffd17 	ldw	r2,-12(fp)
  802000:	10c00044 	addi	r3,r2,1
  802004:	e0fffd15 	stw	r3,-12(fp)
  802008:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80200c:	e0bffe03 	ldbu	r2,-8(fp)
  802010:	10800044 	addi	r2,r2,1
  802014:	e0bffe05 	stb	r2,-8(fp)
  802018:	e0bffe03 	ldbu	r2,-8(fp)
  80201c:	108000f0 	cmpltui	r2,r2,3
  802020:	103ff61e 	bne	r2,zero,801ffc <__alt_mem_onchip_memory2_0+0xff7fdffc>
        *ptbl++ = 0;
    }
}
  802024:	0001883a 	nop
  802028:	e037883a 	mov	sp,fp
  80202c:	df000017 	ldw	fp,0(sp)
  802030:	dec00104 	addi	sp,sp,4
  802034:	f800283a 	ret

00802038 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  802038:	defffb04 	addi	sp,sp,-20
  80203c:	dfc00415 	stw	ra,16(sp)
  802040:	df000315 	stw	fp,12(sp)
  802044:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  802048:	0142d004 	movi	r5,2880
  80204c:	01002074 	movhi	r4,129
  802050:	2101c404 	addi	r4,r4,1808
  802054:	08023b00 	call	8023b0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  802058:	00802074 	movhi	r2,129
  80205c:	1081c404 	addi	r2,r2,1808
  802060:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  802064:	00802074 	movhi	r2,129
  802068:	1081d004 	addi	r2,r2,1856
  80206c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  802070:	e03ffd0d 	sth	zero,-12(fp)
  802074:	00001306 	br	8020c4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  802078:	e0bffe17 	ldw	r2,-8(fp)
  80207c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  802080:	e0bffe17 	ldw	r2,-8(fp)
  802084:	e0ffff17 	ldw	r3,-4(fp)
  802088:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80208c:	e0bffe17 	ldw	r2,-8(fp)
  802090:	00c00fc4 	movi	r3,63
  802094:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  802098:	e0bffe17 	ldw	r2,-8(fp)
  80209c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  8020a0:	e0bffe17 	ldw	r2,-8(fp)
  8020a4:	10800c04 	addi	r2,r2,48
  8020a8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  8020ac:	e0bfff17 	ldw	r2,-4(fp)
  8020b0:	10800c04 	addi	r2,r2,48
  8020b4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  8020b8:	e0bffd0b 	ldhu	r2,-12(fp)
  8020bc:	10800044 	addi	r2,r2,1
  8020c0:	e0bffd0d 	sth	r2,-12(fp)
  8020c4:	e0bffd0b 	ldhu	r2,-12(fp)
  8020c8:	10800ef0 	cmpltui	r2,r2,59
  8020cc:	103fea1e 	bne	r2,zero,802078 <__alt_mem_onchip_memory2_0+0xff7fe078>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  8020d0:	e0bffe17 	ldw	r2,-8(fp)
  8020d4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  8020d8:	e0bffe17 	ldw	r2,-8(fp)
  8020dc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  8020e0:	e0bffe17 	ldw	r2,-8(fp)
  8020e4:	00c00fc4 	movi	r3,63
  8020e8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  8020ec:	e0bffe17 	ldw	r2,-8(fp)
  8020f0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  8020f4:	00802074 	movhi	r2,129
  8020f8:	1081c404 	addi	r2,r2,1808
  8020fc:	d0a11615 	stw	r2,-31656(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  802100:	0001883a 	nop
  802104:	e037883a 	mov	sp,fp
  802108:	dfc00117 	ldw	ra,4(sp)
  80210c:	df000017 	ldw	fp,0(sp)
  802110:	dec00204 	addi	sp,sp,8
  802114:	f800283a 	ret

00802118 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  802118:	deffff04 	addi	sp,sp,-4
  80211c:	df000015 	stw	fp,0(sp)
  802120:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  802124:	d0211915 	stw	zero,-31644(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  802128:	d0211705 	stb	zero,-31652(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80212c:	d0210905 	stb	zero,-31708(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  802130:	d0211145 	stb	zero,-31675(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  802134:	d0210945 	stb	zero,-31707(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  802138:	d0210e15 	stw	zero,-31688(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80213c:	d0210a15 	stw	zero,-31704(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  802140:	d0211c15 	stw	zero,-31632(gp)
    OSIdleCtrMax  = 0L;
  802144:	d0210f15 	stw	zero,-31684(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  802148:	d0211b05 	stb	zero,-31636(gp)
#endif
}
  80214c:	0001883a 	nop
  802150:	e037883a 	mov	sp,fp
  802154:	df000017 	ldw	fp,0(sp)
  802158:	dec00104 	addi	sp,sp,4
  80215c:	f800283a 	ret

00802160 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  802160:	defffd04 	addi	sp,sp,-12
  802164:	df000215 	stw	fp,8(sp)
  802168:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80216c:	d0211505 	stb	zero,-31660(gp)
    prdytbl       = &OSRdyTbl[0];
  802170:	d0a11544 	addi	r2,gp,-31659
  802174:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  802178:	e03ffe05 	stb	zero,-8(fp)
  80217c:	00000706 	br	80219c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
  802180:	e0bfff17 	ldw	r2,-4(fp)
  802184:	10c00044 	addi	r3,r2,1
  802188:	e0ffff15 	stw	r3,-4(fp)
  80218c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  802190:	e0bffe03 	ldbu	r2,-8(fp)
  802194:	10800044 	addi	r2,r2,1
  802198:	e0bffe05 	stb	r2,-8(fp)
  80219c:	e0bffe03 	ldbu	r2,-8(fp)
  8021a0:	108000f0 	cmpltui	r2,r2,3
  8021a4:	103ff61e 	bne	r2,zero,802180 <__alt_mem_onchip_memory2_0+0xff7fe180>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  8021a8:	d0210b45 	stb	zero,-31699(gp)
    OSPrioHighRdy = 0;
  8021ac:	d0210b05 	stb	zero,-31700(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  8021b0:	d0211315 	stw	zero,-31668(gp)
    OSTCBCur      = (OS_TCB *)0;
  8021b4:	d0211815 	stw	zero,-31648(gp)
}
  8021b8:	0001883a 	nop
  8021bc:	e037883a 	mov	sp,fp
  8021c0:	df000017 	ldw	fp,0(sp)
  8021c4:	dec00104 	addi	sp,sp,4
  8021c8:	f800283a 	ret

008021cc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  8021cc:	defff804 	addi	sp,sp,-32
  8021d0:	dfc00715 	stw	ra,28(sp)
  8021d4:	df000615 	stw	fp,24(sp)
  8021d8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  8021dc:	008000c4 	movi	r2,3
  8021e0:	d8800415 	stw	r2,16(sp)
  8021e4:	d8000315 	stw	zero,12(sp)
  8021e8:	00808004 	movi	r2,512
  8021ec:	d8800215 	stw	r2,8(sp)
  8021f0:	00802074 	movhi	r2,129
  8021f4:	10bfc404 	addi	r2,r2,-240
  8021f8:	d8800115 	stw	r2,4(sp)
  8021fc:	00bfffd4 	movui	r2,65535
  802200:	d8800015 	stw	r2,0(sp)
  802204:	01c00504 	movi	r7,20
  802208:	01802074 	movhi	r6,129
  80220c:	3181c304 	addi	r6,r6,1804
  802210:	000b883a 	mov	r5,zero
  802214:	01002034 	movhi	r4,128
  802218:	21099e04 	addi	r4,r4,9848
  80221c:	0806d440 	call	806d44 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  802220:	e1bfff04 	addi	r6,fp,-4
  802224:	01402074 	movhi	r5,129
  802228:	29678404 	addi	r5,r5,-25072
  80222c:	01000504 	movi	r4,20
  802230:	08075540 	call	807554 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  802234:	0001883a 	nop
  802238:	e037883a 	mov	sp,fp
  80223c:	dfc00117 	ldw	ra,4(sp)
  802240:	df000017 	ldw	fp,0(sp)
  802244:	dec00204 	addi	sp,sp,8
  802248:	f800283a 	ret

0080224c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80224c:	defff804 	addi	sp,sp,-32
  802250:	dfc00715 	stw	ra,28(sp)
  802254:	df000615 	stw	fp,24(sp)
  802258:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80225c:	008000c4 	movi	r2,3
  802260:	d8800415 	stw	r2,16(sp)
  802264:	d8000315 	stw	zero,12(sp)
  802268:	00808004 	movi	r2,512
  80226c:	d8800215 	stw	r2,8(sp)
  802270:	00802074 	movhi	r2,129
  802274:	10bd4c04 	addi	r2,r2,-2768
  802278:	d8800115 	stw	r2,4(sp)
  80227c:	00bfff94 	movui	r2,65534
  802280:	d8800015 	stw	r2,0(sp)
  802284:	01c004c4 	movi	r7,19
  802288:	01802074 	movhi	r6,129
  80228c:	31bf4b04 	addi	r6,r6,-724
  802290:	000b883a 	mov	r5,zero
  802294:	01002034 	movhi	r4,128
  802298:	2109b504 	addi	r4,r4,9940
  80229c:	0806d440 	call	806d44 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  8022a0:	e1bfff04 	addi	r6,fp,-4
  8022a4:	01402074 	movhi	r5,129
  8022a8:	29678804 	addi	r5,r5,-25056
  8022ac:	010004c4 	movi	r4,19
  8022b0:	08075540 	call	807554 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  8022b4:	0001883a 	nop
  8022b8:	e037883a 	mov	sp,fp
  8022bc:	dfc00117 	ldw	ra,4(sp)
  8022c0:	df000017 	ldw	fp,0(sp)
  8022c4:	dec00204 	addi	sp,sp,8
  8022c8:	f800283a 	ret

008022cc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  8022cc:	defffb04 	addi	sp,sp,-20
  8022d0:	dfc00415 	stw	ra,16(sp)
  8022d4:	df000315 	stw	fp,12(sp)
  8022d8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  8022dc:	01414404 	movi	r5,1296
  8022e0:	01002074 	movhi	r4,129
  8022e4:	21049404 	addi	r4,r4,4688
  8022e8:	08023b00 	call	8023b0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  8022ec:	01401504 	movi	r5,84
  8022f0:	01002074 	movhi	r4,129
  8022f4:	2105d804 	addi	r4,r4,5984
  8022f8:	08023b00 	call	8023b0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  8022fc:	00802074 	movhi	r2,129
  802300:	10849404 	addi	r2,r2,4688
  802304:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  802308:	00802074 	movhi	r2,129
  80230c:	1084af04 	addi	r2,r2,4796
  802310:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  802314:	e03ffd05 	stb	zero,-12(fp)
  802318:	00001106 	br	802360 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80231c:	e0bffe17 	ldw	r2,-8(fp)
  802320:	e0ffff17 	ldw	r3,-4(fp)
  802324:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  802328:	e0bffe17 	ldw	r2,-8(fp)
  80232c:	00c00fc4 	movi	r3,63
  802330:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  802334:	e0bffe17 	ldw	r2,-8(fp)
  802338:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80233c:	e0bffe17 	ldw	r2,-8(fp)
  802340:	10801b04 	addi	r2,r2,108
  802344:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  802348:	e0bfff17 	ldw	r2,-4(fp)
  80234c:	10801b04 	addi	r2,r2,108
  802350:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  802354:	e0bffd03 	ldbu	r2,-12(fp)
  802358:	10800044 	addi	r2,r2,1
  80235c:	e0bffd05 	stb	r2,-12(fp)
  802360:	e0bffd03 	ldbu	r2,-12(fp)
  802364:	108002f0 	cmpltui	r2,r2,11
  802368:	103fec1e 	bne	r2,zero,80231c <__alt_mem_onchip_memory2_0+0xff7fe31c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80236c:	e0bffe17 	ldw	r2,-8(fp)
  802370:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  802374:	e0bffe17 	ldw	r2,-8(fp)
  802378:	00c00fc4 	movi	r3,63
  80237c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  802380:	e0bffe17 	ldw	r2,-8(fp)
  802384:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  802388:	d0210c15 	stw	zero,-31696(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80238c:	00802074 	movhi	r2,129
  802390:	10849404 	addi	r2,r2,4688
  802394:	d0a11015 	stw	r2,-31680(gp)
}
  802398:	0001883a 	nop
  80239c:	e037883a 	mov	sp,fp
  8023a0:	dfc00117 	ldw	ra,4(sp)
  8023a4:	df000017 	ldw	fp,0(sp)
  8023a8:	dec00204 	addi	sp,sp,8
  8023ac:	f800283a 	ret

008023b0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  8023b0:	defffd04 	addi	sp,sp,-12
  8023b4:	df000215 	stw	fp,8(sp)
  8023b8:	df000204 	addi	fp,sp,8
  8023bc:	e13ffe15 	stw	r4,-8(fp)
  8023c0:	2805883a 	mov	r2,r5
  8023c4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  8023c8:	00000706 	br	8023e8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  8023cc:	e0bffe17 	ldw	r2,-8(fp)
  8023d0:	10c00044 	addi	r3,r2,1
  8023d4:	e0fffe15 	stw	r3,-8(fp)
  8023d8:	10000005 	stb	zero,0(r2)
        size--;
  8023dc:	e0bfff0b 	ldhu	r2,-4(fp)
  8023e0:	10bfffc4 	addi	r2,r2,-1
  8023e4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  8023e8:	e0bfff0b 	ldhu	r2,-4(fp)
  8023ec:	103ff71e 	bne	r2,zero,8023cc <__alt_mem_onchip_memory2_0+0xff7fe3cc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  8023f0:	0001883a 	nop
  8023f4:	e037883a 	mov	sp,fp
  8023f8:	df000017 	ldw	fp,0(sp)
  8023fc:	dec00104 	addi	sp,sp,4
  802400:	f800283a 	ret

00802404 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  802404:	defffc04 	addi	sp,sp,-16
  802408:	df000315 	stw	fp,12(sp)
  80240c:	df000304 	addi	fp,sp,12
  802410:	e13ffd15 	stw	r4,-12(fp)
  802414:	e17ffe15 	stw	r5,-8(fp)
  802418:	3005883a 	mov	r2,r6
  80241c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  802420:	00000b06 	br	802450 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
  802424:	e0bffd17 	ldw	r2,-12(fp)
  802428:	10c00044 	addi	r3,r2,1
  80242c:	e0fffd15 	stw	r3,-12(fp)
  802430:	e0fffe17 	ldw	r3,-8(fp)
  802434:	19000044 	addi	r4,r3,1
  802438:	e13ffe15 	stw	r4,-8(fp)
  80243c:	18c00003 	ldbu	r3,0(r3)
  802440:	10c00005 	stb	r3,0(r2)
        size--;
  802444:	e0bfff0b 	ldhu	r2,-4(fp)
  802448:	10bfffc4 	addi	r2,r2,-1
  80244c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  802450:	e0bfff0b 	ldhu	r2,-4(fp)
  802454:	103ff31e 	bne	r2,zero,802424 <__alt_mem_onchip_memory2_0+0xff7fe424>
        *pdest++ = *psrc++;
        size--;
    }
}
  802458:	0001883a 	nop
  80245c:	e037883a 	mov	sp,fp
  802460:	df000017 	ldw	fp,0(sp)
  802464:	dec00104 	addi	sp,sp,4
  802468:	f800283a 	ret

0080246c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80246c:	defffb04 	addi	sp,sp,-20
  802470:	dfc00415 	stw	ra,16(sp)
  802474:	df000315 	stw	fp,12(sp)
  802478:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80247c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802480:	0005303a 	rdctl	r2,status
  802484:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802488:	e0ffff17 	ldw	r3,-4(fp)
  80248c:	00bfff84 	movi	r2,-2
  802490:	1884703a 	and	r2,r3,r2
  802494:	1001703a 	wrctl	status,r2
  
  return context;
  802498:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
  80249c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  8024a0:	d0a11703 	ldbu	r2,-31652(gp)
  8024a4:	10803fcc 	andi	r2,r2,255
  8024a8:	10001a1e 	bne	r2,zero,802514 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  8024ac:	d0a10903 	ldbu	r2,-31708(gp)
  8024b0:	10803fcc 	andi	r2,r2,255
  8024b4:	1000171e 	bne	r2,zero,802514 <OS_Sched+0xa8>
            OS_SchedNew();
  8024b8:	080253c0 	call	80253c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8024bc:	d0e10b03 	ldbu	r3,-31700(gp)
  8024c0:	d0a10b43 	ldbu	r2,-31699(gp)
  8024c4:	18c03fcc 	andi	r3,r3,255
  8024c8:	10803fcc 	andi	r2,r2,255
  8024cc:	18801126 	beq	r3,r2,802514 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8024d0:	d0a10b03 	ldbu	r2,-31700(gp)
  8024d4:	10c03fcc 	andi	r3,r2,255
  8024d8:	00802074 	movhi	r2,129
  8024dc:	1085d804 	addi	r2,r2,5984
  8024e0:	18c7883a 	add	r3,r3,r3
  8024e4:	18c7883a 	add	r3,r3,r3
  8024e8:	10c5883a 	add	r2,r2,r3
  8024ec:	10800017 	ldw	r2,0(r2)
  8024f0:	d0a11315 	stw	r2,-31668(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  8024f4:	d0a11317 	ldw	r2,-31668(gp)
  8024f8:	10c00e17 	ldw	r3,56(r2)
  8024fc:	18c00044 	addi	r3,r3,1
  802500:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  802504:	d0a10e17 	ldw	r2,-31688(gp)
  802508:	10800044 	addi	r2,r2,1
  80250c:	d0a10e15 	stw	r2,-31688(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  802510:	08092400 	call	809240 <OSCtxSw>
  802514:	e0bffd17 	ldw	r2,-12(fp)
  802518:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80251c:	e0bffe17 	ldw	r2,-8(fp)
  802520:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  802524:	0001883a 	nop
  802528:	e037883a 	mov	sp,fp
  80252c:	dfc00117 	ldw	ra,4(sp)
  802530:	df000017 	ldw	fp,0(sp)
  802534:	dec00204 	addi	sp,sp,8
  802538:	f800283a 	ret

0080253c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80253c:	defffe04 	addi	sp,sp,-8
  802540:	df000115 	stw	fp,4(sp)
  802544:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  802548:	d0a11503 	ldbu	r2,-31660(gp)
  80254c:	10c03fcc 	andi	r3,r2,255
  802550:	00802074 	movhi	r2,129
  802554:	10a74404 	addi	r2,r2,-25328
  802558:	10c5883a 	add	r2,r2,r3
  80255c:	10800003 	ldbu	r2,0(r2)
  802560:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  802564:	e0bfff03 	ldbu	r2,-4(fp)
  802568:	100490fa 	slli	r2,r2,3
  80256c:	1009883a 	mov	r4,r2
  802570:	e0ffff03 	ldbu	r3,-4(fp)
  802574:	d0a11544 	addi	r2,gp,-31659
  802578:	1885883a 	add	r2,r3,r2
  80257c:	10800003 	ldbu	r2,0(r2)
  802580:	10c03fcc 	andi	r3,r2,255
  802584:	00802074 	movhi	r2,129
  802588:	10a74404 	addi	r2,r2,-25328
  80258c:	10c5883a 	add	r2,r2,r3
  802590:	10800003 	ldbu	r2,0(r2)
  802594:	2085883a 	add	r2,r4,r2
  802598:	d0a10b05 	stb	r2,-31700(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80259c:	0001883a 	nop
  8025a0:	e037883a 	mov	sp,fp
  8025a4:	df000017 	ldw	fp,0(sp)
  8025a8:	dec00104 	addi	sp,sp,4
  8025ac:	f800283a 	ret

008025b0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  8025b0:	defffc04 	addi	sp,sp,-16
  8025b4:	df000315 	stw	fp,12(sp)
  8025b8:	df000304 	addi	fp,sp,12
  8025bc:	e13ffe15 	stw	r4,-8(fp)
  8025c0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  8025c4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  8025c8:	00000b06 	br	8025f8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
  8025cc:	e0bffe17 	ldw	r2,-8(fp)
  8025d0:	10c00044 	addi	r3,r2,1
  8025d4:	e0fffe15 	stw	r3,-8(fp)
  8025d8:	e0ffff17 	ldw	r3,-4(fp)
  8025dc:	19000044 	addi	r4,r3,1
  8025e0:	e13fff15 	stw	r4,-4(fp)
  8025e4:	18c00003 	ldbu	r3,0(r3)
  8025e8:	10c00005 	stb	r3,0(r2)
        len++;
  8025ec:	e0bffd03 	ldbu	r2,-12(fp)
  8025f0:	10800044 	addi	r2,r2,1
  8025f4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8025f8:	e0bfff17 	ldw	r2,-4(fp)
  8025fc:	10800003 	ldbu	r2,0(r2)
  802600:	10803fcc 	andi	r2,r2,255
  802604:	103ff11e 	bne	r2,zero,8025cc <__alt_mem_onchip_memory2_0+0xff7fe5cc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  802608:	e0bffe17 	ldw	r2,-8(fp)
  80260c:	10000005 	stb	zero,0(r2)
    return (len);
  802610:	e0bffd03 	ldbu	r2,-12(fp)
}
  802614:	e037883a 	mov	sp,fp
  802618:	df000017 	ldw	fp,0(sp)
  80261c:	dec00104 	addi	sp,sp,4
  802620:	f800283a 	ret

00802624 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  802624:	defffd04 	addi	sp,sp,-12
  802628:	df000215 	stw	fp,8(sp)
  80262c:	df000204 	addi	fp,sp,8
  802630:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  802634:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  802638:	00000606 	br	802654 <OS_StrLen+0x30>
        psrc++;
  80263c:	e0bfff17 	ldw	r2,-4(fp)
  802640:	10800044 	addi	r2,r2,1
  802644:	e0bfff15 	stw	r2,-4(fp)
        len++;
  802648:	e0bffe03 	ldbu	r2,-8(fp)
  80264c:	10800044 	addi	r2,r2,1
  802650:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  802654:	e0bfff17 	ldw	r2,-4(fp)
  802658:	10800003 	ldbu	r2,0(r2)
  80265c:	10803fcc 	andi	r2,r2,255
  802660:	103ff61e 	bne	r2,zero,80263c <__alt_mem_onchip_memory2_0+0xff7fe63c>
        psrc++;
        len++;
    }
    return (len);
  802664:	e0bffe03 	ldbu	r2,-8(fp)
}
  802668:	e037883a 	mov	sp,fp
  80266c:	df000017 	ldw	fp,0(sp)
  802670:	dec00104 	addi	sp,sp,4
  802674:	f800283a 	ret

00802678 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  802678:	defffa04 	addi	sp,sp,-24
  80267c:	dfc00515 	stw	ra,20(sp)
  802680:	df000415 	stw	fp,16(sp)
  802684:	df000404 	addi	fp,sp,16
  802688:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80268c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802690:	0005303a 	rdctl	r2,status
  802694:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802698:	e0fffd17 	ldw	r3,-12(fp)
  80269c:	00bfff84 	movi	r2,-2
  8026a0:	1884703a 	and	r2,r3,r2
  8026a4:	1001703a 	wrctl	status,r2
  
  return context;
  8026a8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  8026ac:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
  8026b0:	d0a10a17 	ldw	r2,-31704(gp)
  8026b4:	10800044 	addi	r2,r2,1
  8026b8:	d0a10a15 	stw	r2,-31704(gp)
  8026bc:	e0bffc17 	ldw	r2,-16(fp)
  8026c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8026c4:	e0bffe17 	ldw	r2,-8(fp)
  8026c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  8026cc:	08095540 	call	809554 <OSTaskIdleHook>
    }
  8026d0:	003fef06 	br	802690 <__alt_mem_onchip_memory2_0+0xff7fe690>

008026d4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  8026d4:	defffa04 	addi	sp,sp,-24
  8026d8:	dfc00515 	stw	ra,20(sp)
  8026dc:	df000415 	stw	fp,16(sp)
  8026e0:	df000404 	addi	fp,sp,16
  8026e4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8026e8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8026ec:	00000206 	br	8026f8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  8026f0:	01003204 	movi	r4,200
  8026f4:	0807e140 	call	807e14 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  8026f8:	d0a11b03 	ldbu	r2,-31636(gp)
  8026fc:	10803fcc 	andi	r2,r2,255
  802700:	103ffb26 	beq	r2,zero,8026f0 <__alt_mem_onchip_memory2_0+0xff7fe6f0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  802704:	d0a10f17 	ldw	r2,-31684(gp)
  802708:	01401904 	movi	r5,100
  80270c:	1009883a 	mov	r4,r2
  802710:	0809bb80 	call	809bb8 <__udivsi3>
  802714:	d0a10f15 	stw	r2,-31684(gp)
    if (OSIdleCtrMax == 0L) {
  802718:	d0a10f17 	ldw	r2,-31684(gp)
  80271c:	1000031e 	bne	r2,zero,80272c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  802720:	d0211105 	stb	zero,-31676(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  802724:	01003fc4 	movi	r4,255
  802728:	0807a9c0 	call	807a9c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80272c:	0005303a 	rdctl	r2,status
  802730:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802734:	e0fffd17 	ldw	r3,-12(fp)
  802738:	00bfff84 	movi	r2,-2
  80273c:	1884703a 	and	r2,r3,r2
  802740:	1001703a 	wrctl	status,r2
  
  return context;
  802744:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  802748:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80274c:	d0a10a17 	ldw	r2,-31704(gp)
  802750:	d0a11c15 	stw	r2,-31632(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  802754:	d0210a15 	stw	zero,-31704(gp)
  802758:	e0bffc17 	ldw	r2,-16(fp)
  80275c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802760:	e0bffe17 	ldw	r2,-8(fp)
  802764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  802768:	d0a11c17 	ldw	r2,-31632(gp)
  80276c:	d0e10f17 	ldw	r3,-31684(gp)
  802770:	180b883a 	mov	r5,r3
  802774:	1009883a 	mov	r4,r2
  802778:	0809bb80 	call	809bb8 <__udivsi3>
  80277c:	1007883a 	mov	r3,r2
  802780:	00801904 	movi	r2,100
  802784:	10c5c83a 	sub	r2,r2,r3
  802788:	d0a11105 	stb	r2,-31676(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80278c:	08094d40 	call	8094d4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  802790:	08027a00 	call	8027a0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  802794:	01001904 	movi	r4,100
  802798:	0807e140 	call	807e14 <OSTimeDly>
    }
  80279c:	003fe306 	br	80272c <__alt_mem_onchip_memory2_0+0xff7fe72c>

008027a0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  8027a0:	defffa04 	addi	sp,sp,-24
  8027a4:	dfc00515 	stw	ra,20(sp)
  8027a8:	df000415 	stw	fp,16(sp)
  8027ac:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  8027b0:	e03ffc05 	stb	zero,-16(fp)
  8027b4:	00002406 	br	802848 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  8027b8:	e0bffc03 	ldbu	r2,-16(fp)
  8027bc:	e0fffe04 	addi	r3,fp,-8
  8027c0:	180b883a 	mov	r5,r3
  8027c4:	1009883a 	mov	r4,r2
  8027c8:	08078dc0 	call	8078dc <OSTaskStkChk>
  8027cc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  8027d0:	e0bffc43 	ldbu	r2,-15(fp)
  8027d4:	1000191e 	bne	r2,zero,80283c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  8027d8:	e0fffc03 	ldbu	r3,-16(fp)
  8027dc:	00802074 	movhi	r2,129
  8027e0:	1085d804 	addi	r2,r2,5984
  8027e4:	18c7883a 	add	r3,r3,r3
  8027e8:	18c7883a 	add	r3,r3,r3
  8027ec:	10c5883a 	add	r2,r2,r3
  8027f0:	10800017 	ldw	r2,0(r2)
  8027f4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  8027f8:	e0bffd17 	ldw	r2,-12(fp)
  8027fc:	10000f26 	beq	r2,zero,80283c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  802800:	e0bffd17 	ldw	r2,-12(fp)
  802804:	10800060 	cmpeqi	r2,r2,1
  802808:	10000c1e 	bne	r2,zero,80283c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80280c:	e0bffd17 	ldw	r2,-12(fp)
  802810:	10c00217 	ldw	r3,8(r2)
  802814:	e0bffd17 	ldw	r2,-12(fp)
  802818:	10800317 	ldw	r2,12(r2)
  80281c:	1085883a 	add	r2,r2,r2
  802820:	1085883a 	add	r2,r2,r2
  802824:	1887883a 	add	r3,r3,r2
  802828:	e0bffd17 	ldw	r2,-12(fp)
  80282c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  802830:	e0ffff17 	ldw	r3,-4(fp)
  802834:	e0bffd17 	ldw	r2,-12(fp)
  802838:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80283c:	e0bffc03 	ldbu	r2,-16(fp)
  802840:	10800044 	addi	r2,r2,1
  802844:	e0bffc05 	stb	r2,-16(fp)
  802848:	e0bffc03 	ldbu	r2,-16(fp)
  80284c:	10800570 	cmpltui	r2,r2,21
  802850:	103fd91e 	bne	r2,zero,8027b8 <__alt_mem_onchip_memory2_0+0xff7fe7b8>
#endif
                }
            }
        }
    }
}
  802854:	0001883a 	nop
  802858:	e037883a 	mov	sp,fp
  80285c:	dfc00117 	ldw	ra,4(sp)
  802860:	df000017 	ldw	fp,0(sp)
  802864:	dec00204 	addi	sp,sp,8
  802868:	f800283a 	ret

0080286c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80286c:	defff204 	addi	sp,sp,-56
  802870:	dfc00d15 	stw	ra,52(sp)
  802874:	df000c15 	stw	fp,48(sp)
  802878:	df000c04 	addi	fp,sp,48
  80287c:	e17ffc15 	stw	r5,-16(fp)
  802880:	e1bffd15 	stw	r6,-12(fp)
  802884:	3807883a 	mov	r3,r7
  802888:	e0800417 	ldw	r2,16(fp)
  80288c:	e13ffb05 	stb	r4,-20(fp)
  802890:	e0fffe0d 	sth	r3,-8(fp)
  802894:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  802898:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80289c:	0005303a 	rdctl	r2,status
  8028a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8028a4:	e0fffa17 	ldw	r3,-24(fp)
  8028a8:	00bfff84 	movi	r2,-2
  8028ac:	1884703a 	and	r2,r3,r2
  8028b0:	1001703a 	wrctl	status,r2
  
  return context;
  8028b4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
  8028b8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  8028bc:	d0a11017 	ldw	r2,-31680(gp)
  8028c0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
  8028c4:	e0bff617 	ldw	r2,-40(fp)
  8028c8:	10009326 	beq	r2,zero,802b18 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  8028cc:	e0bff617 	ldw	r2,-40(fp)
  8028d0:	10800517 	ldw	r2,20(r2)
  8028d4:	d0a11015 	stw	r2,-31680(gp)
  8028d8:	e0bff417 	ldw	r2,-48(fp)
  8028dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8028e0:	e0bff817 	ldw	r2,-32(fp)
  8028e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  8028e8:	e0bff617 	ldw	r2,-40(fp)
  8028ec:	e0fffc17 	ldw	r3,-16(fp)
  8028f0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  8028f4:	e0bff617 	ldw	r2,-40(fp)
  8028f8:	e0fffb03 	ldbu	r3,-20(fp)
  8028fc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  802900:	e0bff617 	ldw	r2,-40(fp)
  802904:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  802908:	e0bff617 	ldw	r2,-40(fp)
  80290c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  802910:	e0bff617 	ldw	r2,-40(fp)
  802914:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  802918:	e0bff617 	ldw	r2,-40(fp)
  80291c:	e0c00317 	ldw	r3,12(fp)
  802920:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  802924:	e0bff617 	ldw	r2,-40(fp)
  802928:	e0c00217 	ldw	r3,8(fp)
  80292c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  802930:	e0bff617 	ldw	r2,-40(fp)
  802934:	e0fffd17 	ldw	r3,-12(fp)
  802938:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80293c:	e0bff617 	ldw	r2,-40(fp)
  802940:	e0ffff0b 	ldhu	r3,-4(fp)
  802944:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  802948:	e0bff617 	ldw	r2,-40(fp)
  80294c:	e0fffe0b 	ldhu	r3,-8(fp)
  802950:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  802954:	e0bff617 	ldw	r2,-40(fp)
  802958:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80295c:	e0bffb03 	ldbu	r2,-20(fp)
  802960:	1004d0fa 	srli	r2,r2,3
  802964:	1007883a 	mov	r3,r2
  802968:	e0bff617 	ldw	r2,-40(fp)
  80296c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  802970:	e0bffb03 	ldbu	r2,-20(fp)
  802974:	108001cc 	andi	r2,r2,7
  802978:	1007883a 	mov	r3,r2
  80297c:	e0bff617 	ldw	r2,-40(fp)
  802980:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  802984:	e0bff617 	ldw	r2,-40(fp)
  802988:	10800d03 	ldbu	r2,52(r2)
  80298c:	10803fcc 	andi	r2,r2,255
  802990:	00c00044 	movi	r3,1
  802994:	1884983a 	sll	r2,r3,r2
  802998:	1007883a 	mov	r3,r2
  80299c:	e0bff617 	ldw	r2,-40(fp)
  8029a0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  8029a4:	e0bff617 	ldw	r2,-40(fp)
  8029a8:	10800cc3 	ldbu	r2,51(r2)
  8029ac:	10803fcc 	andi	r2,r2,255
  8029b0:	00c00044 	movi	r3,1
  8029b4:	1884983a 	sll	r2,r3,r2
  8029b8:	1007883a 	mov	r3,r2
  8029bc:	e0bff617 	ldw	r2,-40(fp)
  8029c0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  8029c4:	e0bff617 	ldw	r2,-40(fp)
  8029c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  8029cc:	e0bff617 	ldw	r2,-40(fp)
  8029d0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  8029d4:	e0bff617 	ldw	r2,-40(fp)
  8029d8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  8029dc:	e0bff617 	ldw	r2,-40(fp)
  8029e0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  8029e4:	e0bff617 	ldw	r2,-40(fp)
  8029e8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  8029ec:	e0bff617 	ldw	r2,-40(fp)
  8029f0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  8029f4:	e0bff617 	ldw	r2,-40(fp)
  8029f8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  8029fc:	e0bff617 	ldw	r2,-40(fp)
  802a00:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  802a04:	e0bff617 	ldw	r2,-40(fp)
  802a08:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  802a0c:	e0bff617 	ldw	r2,-40(fp)
  802a10:	00c00fc4 	movi	r3,63
  802a14:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  802a18:	e0bff617 	ldw	r2,-40(fp)
  802a1c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  802a20:	e13ff617 	ldw	r4,-40(fp)
  802a24:	08095740 	call	809574 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  802a28:	e13ff617 	ldw	r4,-40(fp)
  802a2c:	080946c0 	call	80946c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802a30:	0005303a 	rdctl	r2,status
  802a34:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802a38:	e0fff517 	ldw	r3,-44(fp)
  802a3c:	00bfff84 	movi	r2,-2
  802a40:	1884703a 	and	r2,r3,r2
  802a44:	1001703a 	wrctl	status,r2
  
  return context;
  802a48:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  802a4c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
  802a50:	e0fffb03 	ldbu	r3,-20(fp)
  802a54:	00802074 	movhi	r2,129
  802a58:	1085d804 	addi	r2,r2,5984
  802a5c:	18c7883a 	add	r3,r3,r3
  802a60:	18c7883a 	add	r3,r3,r3
  802a64:	10c5883a 	add	r2,r2,r3
  802a68:	e0fff617 	ldw	r3,-40(fp)
  802a6c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  802a70:	d0e10c17 	ldw	r3,-31696(gp)
  802a74:	e0bff617 	ldw	r2,-40(fp)
  802a78:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  802a7c:	e0bff617 	ldw	r2,-40(fp)
  802a80:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  802a84:	d0a10c17 	ldw	r2,-31696(gp)
  802a88:	10000326 	beq	r2,zero,802a98 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
  802a8c:	d0a10c17 	ldw	r2,-31696(gp)
  802a90:	e0fff617 	ldw	r3,-40(fp)
  802a94:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  802a98:	e0bff617 	ldw	r2,-40(fp)
  802a9c:	d0a10c15 	stw	r2,-31696(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  802aa0:	e0bff617 	ldw	r2,-40(fp)
  802aa4:	10c00d83 	ldbu	r3,54(r2)
  802aa8:	d0a11503 	ldbu	r2,-31660(gp)
  802aac:	1884b03a 	or	r2,r3,r2
  802ab0:	d0a11505 	stb	r2,-31660(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  802ab4:	e0bff617 	ldw	r2,-40(fp)
  802ab8:	10800d03 	ldbu	r2,52(r2)
  802abc:	10c03fcc 	andi	r3,r2,255
  802ac0:	e0bff617 	ldw	r2,-40(fp)
  802ac4:	10800d03 	ldbu	r2,52(r2)
  802ac8:	11003fcc 	andi	r4,r2,255
  802acc:	d0a11544 	addi	r2,gp,-31659
  802ad0:	2085883a 	add	r2,r4,r2
  802ad4:	11000003 	ldbu	r4,0(r2)
  802ad8:	e0bff617 	ldw	r2,-40(fp)
  802adc:	10800d43 	ldbu	r2,53(r2)
  802ae0:	2084b03a 	or	r2,r4,r2
  802ae4:	1009883a 	mov	r4,r2
  802ae8:	d0a11544 	addi	r2,gp,-31659
  802aec:	1885883a 	add	r2,r3,r2
  802af0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  802af4:	d0a11143 	ldbu	r2,-31675(gp)
  802af8:	10800044 	addi	r2,r2,1
  802afc:	d0a11145 	stb	r2,-31675(gp)
  802b00:	e0bff417 	ldw	r2,-48(fp)
  802b04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802b08:	e0bff717 	ldw	r2,-36(fp)
  802b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  802b10:	0005883a 	mov	r2,zero
  802b14:	00000506 	br	802b2c <OS_TCBInit+0x2c0>
  802b18:	e0bff417 	ldw	r2,-48(fp)
  802b1c:	e0bff915 	stw	r2,-28(fp)
  802b20:	e0bff917 	ldw	r2,-28(fp)
  802b24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  802b28:	00801084 	movi	r2,66
}
  802b2c:	e037883a 	mov	sp,fp
  802b30:	dfc00117 	ldw	ra,4(sp)
  802b34:	df000017 	ldw	fp,0(sp)
  802b38:	dec00204 	addi	sp,sp,8
  802b3c:	f800283a 	ret

00802b40 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  802b40:	defffe04 	addi	sp,sp,-8
  802b44:	df000115 	stw	fp,4(sp)
  802b48:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  802b4c:	d0a00404 	addi	r2,gp,-32752
  802b50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  802b54:	d0a00504 	addi	r2,gp,-32748
  802b58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  802b5c:	d0a00684 	addi	r2,gp,-32742
  802b60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  802b64:	d0a00704 	addi	r2,gp,-32740
  802b68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  802b6c:	d0a00604 	addi	r2,gp,-32744
  802b70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  802b74:	d0a00784 	addi	r2,gp,-32738
  802b78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  802b7c:	d0a00804 	addi	r2,gp,-32736
  802b80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  802b84:	d0a00884 	addi	r2,gp,-32734
  802b88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  802b8c:	d0a00904 	addi	r2,gp,-32732
  802b90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  802b94:	d0a00984 	addi	r2,gp,-32730
  802b98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  802b9c:	d0a00a04 	addi	r2,gp,-32728
  802ba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  802ba4:	d0a00a84 	addi	r2,gp,-32726
  802ba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  802bac:	d0a00b04 	addi	r2,gp,-32724
  802bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  802bb4:	d0a00b84 	addi	r2,gp,-32722
  802bb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  802bbc:	d0a00c04 	addi	r2,gp,-32720
  802bc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  802bc4:	d0a00c84 	addi	r2,gp,-32718
  802bc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  802bcc:	d0a00d04 	addi	r2,gp,-32716
  802bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  802bd4:	d0a00d84 	addi	r2,gp,-32714
  802bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  802bdc:	d0a00e04 	addi	r2,gp,-32712
  802be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  802be4:	d0a00e84 	addi	r2,gp,-32710
  802be8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  802bec:	d0a00f04 	addi	r2,gp,-32708
  802bf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  802bf4:	d0a00f84 	addi	r2,gp,-32706
  802bf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  802bfc:	d0a01004 	addi	r2,gp,-32704
  802c00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  802c04:	d0a01084 	addi	r2,gp,-32702
  802c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  802c0c:	d0a01104 	addi	r2,gp,-32700
  802c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  802c14:	d0a01184 	addi	r2,gp,-32698
  802c18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  802c1c:	d0a01204 	addi	r2,gp,-32696
  802c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  802c24:	d0a01284 	addi	r2,gp,-32694
  802c28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  802c2c:	d0a01304 	addi	r2,gp,-32692
  802c30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  802c34:	d0a01384 	addi	r2,gp,-32690
  802c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  802c3c:	d0a01404 	addi	r2,gp,-32688
  802c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  802c44:	d0a01484 	addi	r2,gp,-32686
  802c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  802c4c:	d0a01504 	addi	r2,gp,-32684
  802c50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  802c54:	d0a01584 	addi	r2,gp,-32682
  802c58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  802c5c:	d0a01604 	addi	r2,gp,-32680
  802c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  802c64:	d0a01684 	addi	r2,gp,-32678
  802c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  802c6c:	d0a01704 	addi	r2,gp,-32676
  802c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  802c74:	d0a01784 	addi	r2,gp,-32674
  802c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  802c7c:	d0a01804 	addi	r2,gp,-32672
  802c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  802c84:	d0a01884 	addi	r2,gp,-32670
  802c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  802c8c:	d0a01904 	addi	r2,gp,-32668
  802c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  802c94:	d0a01984 	addi	r2,gp,-32666
  802c98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  802c9c:	d0a01a04 	addi	r2,gp,-32664
  802ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  802ca4:	d0a01a84 	addi	r2,gp,-32662
  802ca8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  802cac:	d0a01b04 	addi	r2,gp,-32660
  802cb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  802cb4:	d0a02004 	addi	r2,gp,-32640
  802cb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  802cbc:	0001883a 	nop
  802cc0:	e037883a 	mov	sp,fp
  802cc4:	df000017 	ldw	fp,0(sp)
  802cc8:	dec00104 	addi	sp,sp,4
  802ccc:	f800283a 	ret

00802cd0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  802cd0:	defff204 	addi	sp,sp,-56
  802cd4:	df000d15 	stw	fp,52(sp)
  802cd8:	df000d04 	addi	fp,sp,52
  802cdc:	e13ffc15 	stw	r4,-16(fp)
  802ce0:	2807883a 	mov	r3,r5
  802ce4:	3005883a 	mov	r2,r6
  802ce8:	e1ffff15 	stw	r7,-4(fp)
  802cec:	e0fffd0d 	sth	r3,-12(fp)
  802cf0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  802cf4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  802cf8:	e0bfff17 	ldw	r2,-4(fp)
  802cfc:	1000021e 	bne	r2,zero,802d08 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  802d00:	0005883a 	mov	r2,zero
  802d04:	0000b006 	br	802fc8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  802d08:	e0bffc17 	ldw	r2,-16(fp)
  802d0c:	1000051e 	bne	r2,zero,802d24 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  802d10:	e0bfff17 	ldw	r2,-4(fp)
  802d14:	00c01b84 	movi	r3,110
  802d18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802d1c:	0005883a 	mov	r2,zero
  802d20:	0000a906 	br	802fc8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  802d24:	e0bffc17 	ldw	r2,-16(fp)
  802d28:	10800003 	ldbu	r2,0(r2)
  802d2c:	10803fcc 	andi	r2,r2,255
  802d30:	10800160 	cmpeqi	r2,r2,5
  802d34:	1000051e 	bne	r2,zero,802d4c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  802d38:	e0bfff17 	ldw	r2,-4(fp)
  802d3c:	00c00044 	movi	r3,1
  802d40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  802d44:	0005883a 	mov	r2,zero
  802d48:	00009f06 	br	802fc8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  802d4c:	e0fffe03 	ldbu	r3,-8(fp)
  802d50:	00bfe004 	movi	r2,-128
  802d54:	1884703a 	and	r2,r3,r2
  802d58:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  802d5c:	e0bff503 	ldbu	r2,-44(fp)
  802d60:	10000626 	beq	r2,zero,802d7c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  802d64:	e0bffe03 	ldbu	r2,-8(fp)
  802d68:	10801fcc 	andi	r2,r2,127
  802d6c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  802d70:	00800044 	movi	r2,1
  802d74:	e0bff385 	stb	r2,-50(fp)
  802d78:	00000106 	br	802d80 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  802d7c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  802d80:	e0bfff17 	ldw	r2,-4(fp)
  802d84:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d88:	0005303a 	rdctl	r2,status
  802d8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d90:	e0fffb17 	ldw	r3,-20(fp)
  802d94:	00bfff84 	movi	r2,-2
  802d98:	1884703a 	and	r2,r3,r2
  802d9c:	1001703a 	wrctl	status,r2
  
  return context;
  802da0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
  802da4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
  802da8:	e0bffe03 	ldbu	r2,-8(fp)
  802dac:	10c00060 	cmpeqi	r3,r2,1
  802db0:	18005f1e 	bne	r3,zero,802f30 <OSFlagAccept+0x260>
  802db4:	10c00088 	cmpgei	r3,r2,2
  802db8:	1800021e 	bne	r3,zero,802dc4 <OSFlagAccept+0xf4>
  802dbc:	10003f26 	beq	r2,zero,802ebc <OSFlagAccept+0x1ec>
  802dc0:	00007706 	br	802fa0 <OSFlagAccept+0x2d0>
  802dc4:	10c000a0 	cmpeqi	r3,r2,2
  802dc8:	1800031e 	bne	r3,zero,802dd8 <OSFlagAccept+0x108>
  802dcc:	108000e0 	cmpeqi	r2,r2,3
  802dd0:	10001e1e 	bne	r2,zero,802e4c <OSFlagAccept+0x17c>
  802dd4:	00007206 	br	802fa0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  802dd8:	e0bffc17 	ldw	r2,-16(fp)
  802ddc:	10c0020b 	ldhu	r3,8(r2)
  802de0:	e0bffd0b 	ldhu	r2,-12(fp)
  802de4:	1884703a 	and	r2,r3,r2
  802de8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  802dec:	e0fff30b 	ldhu	r3,-52(fp)
  802df0:	e0bffd0b 	ldhu	r2,-12(fp)
  802df4:	18800d1e 	bne	r3,r2,802e2c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802df8:	e0bff383 	ldbu	r2,-50(fp)
  802dfc:	10800058 	cmpnei	r2,r2,1
  802e00:	10000d1e 	bne	r2,zero,802e38 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  802e04:	e0bffc17 	ldw	r2,-16(fp)
  802e08:	1080020b 	ldhu	r2,8(r2)
  802e0c:	1007883a 	mov	r3,r2
  802e10:	e0bff30b 	ldhu	r2,-52(fp)
  802e14:	0084303a 	nor	r2,zero,r2
  802e18:	1884703a 	and	r2,r3,r2
  802e1c:	1007883a 	mov	r3,r2
  802e20:	e0bffc17 	ldw	r2,-16(fp)
  802e24:	10c0020d 	sth	r3,8(r2)
  802e28:	00000306 	br	802e38 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802e2c:	e0bfff17 	ldw	r2,-4(fp)
  802e30:	00c01c04 	movi	r3,112
  802e34:	10c00005 	stb	r3,0(r2)
  802e38:	e0bff417 	ldw	r2,-48(fp)
  802e3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802e40:	e0bff617 	ldw	r2,-40(fp)
  802e44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  802e48:	00005e06 	br	802fc4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  802e4c:	e0bffc17 	ldw	r2,-16(fp)
  802e50:	10c0020b 	ldhu	r3,8(r2)
  802e54:	e0bffd0b 	ldhu	r2,-12(fp)
  802e58:	1884703a 	and	r2,r3,r2
  802e5c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  802e60:	e0bff30b 	ldhu	r2,-52(fp)
  802e64:	10000d26 	beq	r2,zero,802e9c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802e68:	e0bff383 	ldbu	r2,-50(fp)
  802e6c:	10800058 	cmpnei	r2,r2,1
  802e70:	10000d1e 	bne	r2,zero,802ea8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  802e74:	e0bffc17 	ldw	r2,-16(fp)
  802e78:	1080020b 	ldhu	r2,8(r2)
  802e7c:	1007883a 	mov	r3,r2
  802e80:	e0bff30b 	ldhu	r2,-52(fp)
  802e84:	0084303a 	nor	r2,zero,r2
  802e88:	1884703a 	and	r2,r3,r2
  802e8c:	1007883a 	mov	r3,r2
  802e90:	e0bffc17 	ldw	r2,-16(fp)
  802e94:	10c0020d 	sth	r3,8(r2)
  802e98:	00000306 	br	802ea8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802e9c:	e0bfff17 	ldw	r2,-4(fp)
  802ea0:	00c01c04 	movi	r3,112
  802ea4:	10c00005 	stb	r3,0(r2)
  802ea8:	e0bff417 	ldw	r2,-48(fp)
  802eac:	e0bff715 	stw	r2,-36(fp)
  802eb0:	e0bff717 	ldw	r2,-36(fp)
  802eb4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  802eb8:	00004206 	br	802fc4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  802ebc:	e0bffc17 	ldw	r2,-16(fp)
  802ec0:	1080020b 	ldhu	r2,8(r2)
  802ec4:	0084303a 	nor	r2,zero,r2
  802ec8:	1007883a 	mov	r3,r2
  802ecc:	e0bffd0b 	ldhu	r2,-12(fp)
  802ed0:	1884703a 	and	r2,r3,r2
  802ed4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  802ed8:	e0fff30b 	ldhu	r3,-52(fp)
  802edc:	e0bffd0b 	ldhu	r2,-12(fp)
  802ee0:	18800b1e 	bne	r3,r2,802f10 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802ee4:	e0bff383 	ldbu	r2,-50(fp)
  802ee8:	10800058 	cmpnei	r2,r2,1
  802eec:	10000b1e 	bne	r2,zero,802f1c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  802ef0:	e0bffc17 	ldw	r2,-16(fp)
  802ef4:	10c0020b 	ldhu	r3,8(r2)
  802ef8:	e0bff30b 	ldhu	r2,-52(fp)
  802efc:	1884b03a 	or	r2,r3,r2
  802f00:	1007883a 	mov	r3,r2
  802f04:	e0bffc17 	ldw	r2,-16(fp)
  802f08:	10c0020d 	sth	r3,8(r2)
  802f0c:	00000306 	br	802f1c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802f10:	e0bfff17 	ldw	r2,-4(fp)
  802f14:	00c01c04 	movi	r3,112
  802f18:	10c00005 	stb	r3,0(r2)
  802f1c:	e0bff417 	ldw	r2,-48(fp)
  802f20:	e0bff815 	stw	r2,-32(fp)
  802f24:	e0bff817 	ldw	r2,-32(fp)
  802f28:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  802f2c:	00002506 	br	802fc4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  802f30:	e0bffc17 	ldw	r2,-16(fp)
  802f34:	1080020b 	ldhu	r2,8(r2)
  802f38:	0084303a 	nor	r2,zero,r2
  802f3c:	1007883a 	mov	r3,r2
  802f40:	e0bffd0b 	ldhu	r2,-12(fp)
  802f44:	1884703a 	and	r2,r3,r2
  802f48:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  802f4c:	e0bff30b 	ldhu	r2,-52(fp)
  802f50:	10000b26 	beq	r2,zero,802f80 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  802f54:	e0bff383 	ldbu	r2,-50(fp)
  802f58:	10800058 	cmpnei	r2,r2,1
  802f5c:	10000b1e 	bne	r2,zero,802f8c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  802f60:	e0bffc17 	ldw	r2,-16(fp)
  802f64:	10c0020b 	ldhu	r3,8(r2)
  802f68:	e0bff30b 	ldhu	r2,-52(fp)
  802f6c:	1884b03a 	or	r2,r3,r2
  802f70:	1007883a 	mov	r3,r2
  802f74:	e0bffc17 	ldw	r2,-16(fp)
  802f78:	10c0020d 	sth	r3,8(r2)
  802f7c:	00000306 	br	802f8c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  802f80:	e0bfff17 	ldw	r2,-4(fp)
  802f84:	00c01c04 	movi	r3,112
  802f88:	10c00005 	stb	r3,0(r2)
  802f8c:	e0bff417 	ldw	r2,-48(fp)
  802f90:	e0bff915 	stw	r2,-28(fp)
  802f94:	e0bff917 	ldw	r2,-28(fp)
  802f98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  802f9c:	00000906 	br	802fc4 <OSFlagAccept+0x2f4>
  802fa0:	e0bff417 	ldw	r2,-48(fp)
  802fa4:	e0bffa15 	stw	r2,-24(fp)
  802fa8:	e0bffa17 	ldw	r2,-24(fp)
  802fac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  802fb0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  802fb4:	e0bfff17 	ldw	r2,-4(fp)
  802fb8:	00c01bc4 	movi	r3,111
  802fbc:	10c00005 	stb	r3,0(r2)
             break;
  802fc0:	0001883a 	nop
    }
    return (flags_rdy);
  802fc4:	e0bff30b 	ldhu	r2,-52(fp)
}
  802fc8:	e037883a 	mov	sp,fp
  802fcc:	df000017 	ldw	fp,0(sp)
  802fd0:	dec00104 	addi	sp,sp,4
  802fd4:	f800283a 	ret

00802fd8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  802fd8:	defff804 	addi	sp,sp,-32
  802fdc:	df000715 	stw	fp,28(sp)
  802fe0:	df000704 	addi	fp,sp,28
  802fe4:	2005883a 	mov	r2,r4
  802fe8:	e17fff15 	stw	r5,-4(fp)
  802fec:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  802ff0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  802ff4:	e0bfff17 	ldw	r2,-4(fp)
  802ff8:	1000021e 	bne	r2,zero,803004 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  802ffc:	0005883a 	mov	r2,zero
  803000:	00003306 	br	8030d0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  803004:	d0a11703 	ldbu	r2,-31652(gp)
  803008:	10803fcc 	andi	r2,r2,255
  80300c:	10000526 	beq	r2,zero,803024 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  803010:	e0bfff17 	ldw	r2,-4(fp)
  803014:	00c00404 	movi	r3,16
  803018:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  80301c:	0005883a 	mov	r2,zero
  803020:	00002b06 	br	8030d0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803024:	0005303a 	rdctl	r2,status
  803028:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80302c:	e0fffd17 	ldw	r3,-12(fp)
  803030:	00bfff84 	movi	r2,-2
  803034:	1884703a 	and	r2,r3,r2
  803038:	1001703a 	wrctl	status,r2
  
  return context;
  80303c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  803040:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  803044:	d0a11a17 	ldw	r2,-31640(gp)
  803048:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80304c:	e0bffb17 	ldw	r2,-20(fp)
  803050:	10001726 	beq	r2,zero,8030b0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  803054:	d0a11a17 	ldw	r2,-31640(gp)
  803058:	10800117 	ldw	r2,4(r2)
  80305c:	d0a11a15 	stw	r2,-31640(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  803060:	e0bffb17 	ldw	r2,-20(fp)
  803064:	00c00144 	movi	r3,5
  803068:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80306c:	e0bffb17 	ldw	r2,-20(fp)
  803070:	e0fffe0b 	ldhu	r3,-8(fp)
  803074:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  803078:	e0bffb17 	ldw	r2,-20(fp)
  80307c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  803080:	e0bffb17 	ldw	r2,-20(fp)
  803084:	00c00fc4 	movi	r3,63
  803088:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80308c:	e0bffb17 	ldw	r2,-20(fp)
  803090:	100002c5 	stb	zero,11(r2)
  803094:	e0bff917 	ldw	r2,-28(fp)
  803098:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80309c:	e0bffa17 	ldw	r2,-24(fp)
  8030a0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  8030a4:	e0bfff17 	ldw	r2,-4(fp)
  8030a8:	10000005 	stb	zero,0(r2)
  8030ac:	00000706 	br	8030cc <OSFlagCreate+0xf4>
  8030b0:	e0bff917 	ldw	r2,-28(fp)
  8030b4:	e0bffc15 	stw	r2,-16(fp)
  8030b8:	e0bffc17 	ldw	r2,-16(fp)
  8030bc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  8030c0:	e0bfff17 	ldw	r2,-4(fp)
  8030c4:	00c01c84 	movi	r3,114
  8030c8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  8030cc:	e0bffb17 	ldw	r2,-20(fp)
}
  8030d0:	e037883a 	mov	sp,fp
  8030d4:	df000017 	ldw	fp,0(sp)
  8030d8:	dec00104 	addi	sp,sp,4
  8030dc:	f800283a 	ret

008030e0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8030e0:	defff204 	addi	sp,sp,-56
  8030e4:	dfc00d15 	stw	ra,52(sp)
  8030e8:	df000c15 	stw	fp,48(sp)
  8030ec:	df000c04 	addi	fp,sp,48
  8030f0:	e13ffd15 	stw	r4,-12(fp)
  8030f4:	2805883a 	mov	r2,r5
  8030f8:	e1bfff15 	stw	r6,-4(fp)
  8030fc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  803100:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  803104:	e0bfff17 	ldw	r2,-4(fp)
  803108:	1000021e 	bne	r2,zero,803114 <OSFlagDel+0x34>
        return (pgrp);
  80310c:	e0bffd17 	ldw	r2,-12(fp)
  803110:	00008006 	br	803314 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  803114:	e0bffd17 	ldw	r2,-12(fp)
  803118:	1000051e 	bne	r2,zero,803130 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80311c:	e0bfff17 	ldw	r2,-4(fp)
  803120:	00c01b84 	movi	r3,110
  803124:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  803128:	e0bffd17 	ldw	r2,-12(fp)
  80312c:	00007906 	br	803314 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  803130:	d0a11703 	ldbu	r2,-31652(gp)
  803134:	10803fcc 	andi	r2,r2,255
  803138:	10000526 	beq	r2,zero,803150 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80313c:	e0bfff17 	ldw	r2,-4(fp)
  803140:	00c003c4 	movi	r3,15
  803144:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  803148:	e0bffd17 	ldw	r2,-12(fp)
  80314c:	00007106 	br	803314 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  803150:	e0bffd17 	ldw	r2,-12(fp)
  803154:	10800003 	ldbu	r2,0(r2)
  803158:	10803fcc 	andi	r2,r2,255
  80315c:	10800160 	cmpeqi	r2,r2,5
  803160:	1000051e 	bne	r2,zero,803178 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
  803164:	e0bfff17 	ldw	r2,-4(fp)
  803168:	00c00044 	movi	r3,1
  80316c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  803170:	e0bffd17 	ldw	r2,-12(fp)
  803174:	00006706 	br	803314 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803178:	0005303a 	rdctl	r2,status
  80317c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803180:	e0fffc17 	ldw	r3,-16(fp)
  803184:	00bfff84 	movi	r2,-2
  803188:	1884703a 	and	r2,r3,r2
  80318c:	1001703a 	wrctl	status,r2
  
  return context;
  803190:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  803194:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  803198:	e0bffd17 	ldw	r2,-12(fp)
  80319c:	10800117 	ldw	r2,4(r2)
  8031a0:	10000326 	beq	r2,zero,8031b0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8031a4:	00800044 	movi	r2,1
  8031a8:	e0bff405 	stb	r2,-48(fp)
  8031ac:	00000106 	br	8031b4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8031b0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  8031b4:	e0bffe03 	ldbu	r2,-8(fp)
  8031b8:	10000326 	beq	r2,zero,8031c8 <OSFlagDel+0xe8>
  8031bc:	10800060 	cmpeqi	r2,r2,1
  8031c0:	1000231e 	bne	r2,zero,803250 <OSFlagDel+0x170>
  8031c4:	00004806 	br	8032e8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  8031c8:	e0bff403 	ldbu	r2,-48(fp)
  8031cc:	1000161e 	bne	r2,zero,803228 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  8031d0:	e0bffd17 	ldw	r2,-12(fp)
  8031d4:	00c00fc4 	movi	r3,63
  8031d8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8031dc:	e0bffd17 	ldw	r2,-12(fp)
  8031e0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8031e4:	e0bffd17 	ldw	r2,-12(fp)
  8031e8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  8031ec:	d0e11a17 	ldw	r3,-31640(gp)
  8031f0:	e0bffd17 	ldw	r2,-12(fp)
  8031f4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8031f8:	e0bffd17 	ldw	r2,-12(fp)
  8031fc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  803200:	e0bffd17 	ldw	r2,-12(fp)
  803204:	d0a11a15 	stw	r2,-31640(gp)
  803208:	e0bff717 	ldw	r2,-36(fp)
  80320c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803210:	e0bff817 	ldw	r2,-32(fp)
  803214:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  803218:	e0bfff17 	ldw	r2,-4(fp)
  80321c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  803220:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  803224:	00003a06 	br	803310 <OSFlagDel+0x230>
  803228:	e0bff717 	ldw	r2,-36(fp)
  80322c:	e0bff915 	stw	r2,-28(fp)
  803230:	e0bff917 	ldw	r2,-28(fp)
  803234:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  803238:	e0bfff17 	ldw	r2,-4(fp)
  80323c:	00c01244 	movi	r3,73
  803240:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  803244:	e0bffd17 	ldw	r2,-12(fp)
  803248:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  80324c:	00003006 	br	803310 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  803250:	e0bffd17 	ldw	r2,-12(fp)
  803254:	10800117 	ldw	r2,4(r2)
  803258:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80325c:	00000606 	br	803278 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  803260:	000b883a 	mov	r5,zero
  803264:	e13ff517 	ldw	r4,-44(fp)
  803268:	080424c0 	call	80424c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80326c:	e0bff517 	ldw	r2,-44(fp)
  803270:	10800017 	ldw	r2,0(r2)
  803274:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  803278:	e0bff517 	ldw	r2,-44(fp)
  80327c:	103ff81e 	bne	r2,zero,803260 <__alt_mem_onchip_memory2_0+0xff7ff260>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  803280:	e0bffd17 	ldw	r2,-12(fp)
  803284:	00c00fc4 	movi	r3,63
  803288:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80328c:	e0bffd17 	ldw	r2,-12(fp)
  803290:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  803294:	e0bffd17 	ldw	r2,-12(fp)
  803298:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80329c:	d0e11a17 	ldw	r3,-31640(gp)
  8032a0:	e0bffd17 	ldw	r2,-12(fp)
  8032a4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8032a8:	e0bffd17 	ldw	r2,-12(fp)
  8032ac:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  8032b0:	e0bffd17 	ldw	r2,-12(fp)
  8032b4:	d0a11a15 	stw	r2,-31640(gp)
  8032b8:	e0bff717 	ldw	r2,-36(fp)
  8032bc:	e0bffa15 	stw	r2,-24(fp)
  8032c0:	e0bffa17 	ldw	r2,-24(fp)
  8032c4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8032c8:	e0bff403 	ldbu	r2,-48(fp)
  8032cc:	10800058 	cmpnei	r2,r2,1
  8032d0:	1000011e 	bne	r2,zero,8032d8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8032d4:	080246c0 	call	80246c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  8032d8:	e0bfff17 	ldw	r2,-4(fp)
  8032dc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  8032e0:	e03ff615 	stw	zero,-40(fp)
             break;
  8032e4:	00000a06 	br	803310 <OSFlagDel+0x230>
  8032e8:	e0bff717 	ldw	r2,-36(fp)
  8032ec:	e0bffb15 	stw	r2,-20(fp)
  8032f0:	e0bffb17 	ldw	r2,-20(fp)
  8032f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  8032f8:	e0bfff17 	ldw	r2,-4(fp)
  8032fc:	00c001c4 	movi	r3,7
  803300:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  803304:	e0bffd17 	ldw	r2,-12(fp)
  803308:	e0bff615 	stw	r2,-40(fp)
             break;
  80330c:	0001883a 	nop
    }
    return (pgrp_return);
  803310:	e0bff617 	ldw	r2,-40(fp)
}
  803314:	e037883a 	mov	sp,fp
  803318:	dfc00117 	ldw	ra,4(sp)
  80331c:	df000017 	ldw	fp,0(sp)
  803320:	dec00204 	addi	sp,sp,8
  803324:	f800283a 	ret

00803328 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  803328:	defff604 	addi	sp,sp,-40
  80332c:	dfc00915 	stw	ra,36(sp)
  803330:	df000815 	stw	fp,32(sp)
  803334:	df000804 	addi	fp,sp,32
  803338:	e13ffd15 	stw	r4,-12(fp)
  80333c:	e17ffe15 	stw	r5,-8(fp)
  803340:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  803344:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803348:	e0bfff17 	ldw	r2,-4(fp)
  80334c:	1000021e 	bne	r2,zero,803358 <OSFlagNameGet+0x30>
        return (0);
  803350:	0005883a 	mov	r2,zero
  803354:	00003906 	br	80343c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  803358:	e0bffd17 	ldw	r2,-12(fp)
  80335c:	1000051e 	bne	r2,zero,803374 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803360:	e0bfff17 	ldw	r2,-4(fp)
  803364:	00c01b84 	movi	r3,110
  803368:	10c00005 	stb	r3,0(r2)
        return (0);
  80336c:	0005883a 	mov	r2,zero
  803370:	00003206 	br	80343c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803374:	e0bffe17 	ldw	r2,-8(fp)
  803378:	1000051e 	bne	r2,zero,803390 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  80337c:	e0bfff17 	ldw	r2,-4(fp)
  803380:	00c00304 	movi	r3,12
  803384:	10c00005 	stb	r3,0(r2)
        return (0);
  803388:	0005883a 	mov	r2,zero
  80338c:	00002b06 	br	80343c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  803390:	d0a11703 	ldbu	r2,-31652(gp)
  803394:	10803fcc 	andi	r2,r2,255
  803398:	10000526 	beq	r2,zero,8033b0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  80339c:	e0bfff17 	ldw	r2,-4(fp)
  8033a0:	00c00444 	movi	r3,17
  8033a4:	10c00005 	stb	r3,0(r2)
        return (0);
  8033a8:	0005883a 	mov	r2,zero
  8033ac:	00002306 	br	80343c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8033b0:	0005303a 	rdctl	r2,status
  8033b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8033b8:	e0fffc17 	ldw	r3,-16(fp)
  8033bc:	00bfff84 	movi	r2,-2
  8033c0:	1884703a 	and	r2,r3,r2
  8033c4:	1001703a 	wrctl	status,r2
  
  return context;
  8033c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8033cc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  8033d0:	e0bffd17 	ldw	r2,-12(fp)
  8033d4:	10800003 	ldbu	r2,0(r2)
  8033d8:	10803fcc 	andi	r2,r2,255
  8033dc:	10800160 	cmpeqi	r2,r2,5
  8033e0:	1000091e 	bne	r2,zero,803408 <OSFlagNameGet+0xe0>
  8033e4:	e0bff817 	ldw	r2,-32(fp)
  8033e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8033ec:	e0bff917 	ldw	r2,-28(fp)
  8033f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  8033f4:	e0bfff17 	ldw	r2,-4(fp)
  8033f8:	00c00044 	movi	r3,1
  8033fc:	10c00005 	stb	r3,0(r2)
        return (0);
  803400:	0005883a 	mov	r2,zero
  803404:	00000d06 	br	80343c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  803408:	e0bffd17 	ldw	r2,-12(fp)
  80340c:	10800284 	addi	r2,r2,10
  803410:	100b883a 	mov	r5,r2
  803414:	e13ffe17 	ldw	r4,-8(fp)
  803418:	08025b00 	call	8025b0 <OS_StrCopy>
  80341c:	e0bffb05 	stb	r2,-20(fp)
  803420:	e0bff817 	ldw	r2,-32(fp)
  803424:	e0bffa15 	stw	r2,-24(fp)
  803428:	e0bffa17 	ldw	r2,-24(fp)
  80342c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803430:	e0bfff17 	ldw	r2,-4(fp)
  803434:	10000005 	stb	zero,0(r2)
    return (len);
  803438:	e0bffb03 	ldbu	r2,-20(fp)
}
  80343c:	e037883a 	mov	sp,fp
  803440:	dfc00117 	ldw	ra,4(sp)
  803444:	df000017 	ldw	fp,0(sp)
  803448:	dec00204 	addi	sp,sp,8
  80344c:	f800283a 	ret

00803450 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  803450:	defff504 	addi	sp,sp,-44
  803454:	dfc00a15 	stw	ra,40(sp)
  803458:	df000915 	stw	fp,36(sp)
  80345c:	df000904 	addi	fp,sp,36
  803460:	e13ffd15 	stw	r4,-12(fp)
  803464:	e17ffe15 	stw	r5,-8(fp)
  803468:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80346c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  803470:	e0bfff17 	ldw	r2,-4(fp)
  803474:	10004326 	beq	r2,zero,803584 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  803478:	e0bffd17 	ldw	r2,-12(fp)
  80347c:	1000041e 	bne	r2,zero,803490 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803480:	e0bfff17 	ldw	r2,-4(fp)
  803484:	00c01b84 	movi	r3,110
  803488:	10c00005 	stb	r3,0(r2)
        return;
  80348c:	00003e06 	br	803588 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  803490:	e0bffe17 	ldw	r2,-8(fp)
  803494:	1000041e 	bne	r2,zero,8034a8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  803498:	e0bfff17 	ldw	r2,-4(fp)
  80349c:	00c00304 	movi	r3,12
  8034a0:	10c00005 	stb	r3,0(r2)
        return;
  8034a4:	00003806 	br	803588 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8034a8:	d0a11703 	ldbu	r2,-31652(gp)
  8034ac:	10803fcc 	andi	r2,r2,255
  8034b0:	10000426 	beq	r2,zero,8034c4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8034b4:	e0bfff17 	ldw	r2,-4(fp)
  8034b8:	00c00484 	movi	r3,18
  8034bc:	10c00005 	stb	r3,0(r2)
        return;
  8034c0:	00003106 	br	803588 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8034c4:	0005303a 	rdctl	r2,status
  8034c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8034cc:	e0fffc17 	ldw	r3,-16(fp)
  8034d0:	00bfff84 	movi	r2,-2
  8034d4:	1884703a 	and	r2,r3,r2
  8034d8:	1001703a 	wrctl	status,r2
  
  return context;
  8034dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8034e0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  8034e4:	e0bffd17 	ldw	r2,-12(fp)
  8034e8:	10800003 	ldbu	r2,0(r2)
  8034ec:	10803fcc 	andi	r2,r2,255
  8034f0:	10800160 	cmpeqi	r2,r2,5
  8034f4:	1000081e 	bne	r2,zero,803518 <OSFlagNameSet+0xc8>
  8034f8:	e0bff717 	ldw	r2,-36(fp)
  8034fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803500:	e0bff817 	ldw	r2,-32(fp)
  803504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  803508:	e0bfff17 	ldw	r2,-4(fp)
  80350c:	00c00044 	movi	r3,1
  803510:	10c00005 	stb	r3,0(r2)
        return;
  803514:	00001c06 	br	803588 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  803518:	e13ffe17 	ldw	r4,-8(fp)
  80351c:	08026240 	call	802624 <OS_StrLen>
  803520:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  803524:	e0bffa03 	ldbu	r2,-24(fp)
  803528:	10800830 	cmpltui	r2,r2,32
  80352c:	1000081e 	bne	r2,zero,803550 <OSFlagNameSet+0x100>
  803530:	e0bff717 	ldw	r2,-36(fp)
  803534:	e0bff915 	stw	r2,-28(fp)
  803538:	e0bff917 	ldw	r2,-28(fp)
  80353c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  803540:	e0bfff17 	ldw	r2,-4(fp)
  803544:	00c01cc4 	movi	r3,115
  803548:	10c00005 	stb	r3,0(r2)
        return;
  80354c:	00000e06 	br	803588 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  803550:	e0bffd17 	ldw	r2,-12(fp)
  803554:	10800284 	addi	r2,r2,10
  803558:	e17ffe17 	ldw	r5,-8(fp)
  80355c:	1009883a 	mov	r4,r2
  803560:	08025b00 	call	8025b0 <OS_StrCopy>
  803564:	e0bff717 	ldw	r2,-36(fp)
  803568:	e0bffb15 	stw	r2,-20(fp)
  80356c:	e0bffb17 	ldw	r2,-20(fp)
  803570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803574:	e0bfff17 	ldw	r2,-4(fp)
  803578:	10000005 	stb	zero,0(r2)
    return;
  80357c:	0001883a 	nop
  803580:	00000106 	br	803588 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  803584:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  803588:	e037883a 	mov	sp,fp
  80358c:	dfc00117 	ldw	ra,4(sp)
  803590:	df000017 	ldw	fp,0(sp)
  803594:	dec00204 	addi	sp,sp,8
  803598:	f800283a 	ret

0080359c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80359c:	deffe104 	addi	sp,sp,-124
  8035a0:	dfc01e15 	stw	ra,120(sp)
  8035a4:	df001d15 	stw	fp,116(sp)
  8035a8:	df001d04 	addi	fp,sp,116
  8035ac:	e13ffc15 	stw	r4,-16(fp)
  8035b0:	2809883a 	mov	r4,r5
  8035b4:	3007883a 	mov	r3,r6
  8035b8:	3805883a 	mov	r2,r7
  8035bc:	e13ffd0d 	sth	r4,-12(fp)
  8035c0:	e0fffe05 	stb	r3,-8(fp)
  8035c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  8035c8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8035cc:	e0800217 	ldw	r2,8(fp)
  8035d0:	1000021e 	bne	r2,zero,8035dc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  8035d4:	0005883a 	mov	r2,zero
  8035d8:	00015906 	br	803b40 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  8035dc:	e0bffc17 	ldw	r2,-16(fp)
  8035e0:	1000051e 	bne	r2,zero,8035f8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  8035e4:	e0800217 	ldw	r2,8(fp)
  8035e8:	00c01b84 	movi	r3,110
  8035ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  8035f0:	0005883a 	mov	r2,zero
  8035f4:	00015206 	br	803b40 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8035f8:	d0a11703 	ldbu	r2,-31652(gp)
  8035fc:	10803fcc 	andi	r2,r2,255
  803600:	10000526 	beq	r2,zero,803618 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  803604:	e0800217 	ldw	r2,8(fp)
  803608:	00c00084 	movi	r3,2
  80360c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803610:	0005883a 	mov	r2,zero
  803614:	00014a06 	br	803b40 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  803618:	d0a10903 	ldbu	r2,-31708(gp)
  80361c:	10803fcc 	andi	r2,r2,255
  803620:	10000526 	beq	r2,zero,803638 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  803624:	e0800217 	ldw	r2,8(fp)
  803628:	00c00344 	movi	r3,13
  80362c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803630:	0005883a 	mov	r2,zero
  803634:	00014206 	br	803b40 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  803638:	e0bffc17 	ldw	r2,-16(fp)
  80363c:	10800003 	ldbu	r2,0(r2)
  803640:	10803fcc 	andi	r2,r2,255
  803644:	10800160 	cmpeqi	r2,r2,5
  803648:	1000051e 	bne	r2,zero,803660 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
  80364c:	e0800217 	ldw	r2,8(fp)
  803650:	00c00044 	movi	r3,1
  803654:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803658:	0005883a 	mov	r2,zero
  80365c:	00013806 	br	803b40 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  803660:	e0fffe03 	ldbu	r3,-8(fp)
  803664:	00bfe004 	movi	r2,-128
  803668:	1884703a 	and	r2,r3,r2
  80366c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  803670:	e0bfe603 	ldbu	r2,-104(fp)
  803674:	10000626 	beq	r2,zero,803690 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  803678:	e0bffe03 	ldbu	r2,-8(fp)
  80367c:	10801fcc 	andi	r2,r2,127
  803680:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  803684:	00800044 	movi	r2,1
  803688:	e0bfe405 	stb	r2,-112(fp)
  80368c:	00000106 	br	803694 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
  803690:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803694:	0005303a 	rdctl	r2,status
  803698:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80369c:	e0fff617 	ldw	r3,-40(fp)
  8036a0:	00bfff84 	movi	r2,-2
  8036a4:	1884703a 	and	r2,r3,r2
  8036a8:	1001703a 	wrctl	status,r2
  
  return context;
  8036ac:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  8036b0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
  8036b4:	e0bffe03 	ldbu	r2,-8(fp)
  8036b8:	10c00060 	cmpeqi	r3,r2,1
  8036bc:	1800921e 	bne	r3,zero,803908 <OSFlagPend+0x36c>
  8036c0:	10c00088 	cmpgei	r3,r2,2
  8036c4:	1800021e 	bne	r3,zero,8036d0 <OSFlagPend+0x134>
  8036c8:	10006126 	beq	r2,zero,803850 <OSFlagPend+0x2b4>
  8036cc:	0000bb06 	br	8039bc <OSFlagPend+0x420>
  8036d0:	10c000a0 	cmpeqi	r3,r2,2
  8036d4:	1800031e 	bne	r3,zero,8036e4 <OSFlagPend+0x148>
  8036d8:	108000e0 	cmpeqi	r2,r2,3
  8036dc:	10002f1e 	bne	r2,zero,80379c <OSFlagPend+0x200>
  8036e0:	0000b606 	br	8039bc <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8036e4:	e0bffc17 	ldw	r2,-16(fp)
  8036e8:	10c0020b 	ldhu	r3,8(r2)
  8036ec:	e0bffd0b 	ldhu	r2,-12(fp)
  8036f0:	1884703a 	and	r2,r3,r2
  8036f4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8036f8:	e0ffe80b 	ldhu	r3,-96(fp)
  8036fc:	e0bffd0b 	ldhu	r2,-12(fp)
  803700:	1880171e 	bne	r3,r2,803760 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803704:	e0bfe403 	ldbu	r2,-112(fp)
  803708:	10800058 	cmpnei	r2,r2,1
  80370c:	1000091e 	bne	r2,zero,803734 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  803710:	e0bffc17 	ldw	r2,-16(fp)
  803714:	1080020b 	ldhu	r2,8(r2)
  803718:	1007883a 	mov	r3,r2
  80371c:	e0bfe80b 	ldhu	r2,-96(fp)
  803720:	0084303a 	nor	r2,zero,r2
  803724:	1884703a 	and	r2,r3,r2
  803728:	1007883a 	mov	r3,r2
  80372c:	e0bffc17 	ldw	r2,-16(fp)
  803730:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  803734:	d0a11817 	ldw	r2,-31648(gp)
  803738:	e0ffe80b 	ldhu	r3,-96(fp)
  80373c:	10c00b0d 	sth	r3,44(r2)
  803740:	e0bfe517 	ldw	r2,-108(fp)
  803744:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803748:	e0bfe717 	ldw	r2,-100(fp)
  80374c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803750:	e0800217 	ldw	r2,8(fp)
  803754:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  803758:	e0bfe80b 	ldhu	r2,-96(fp)
  80375c:	0000f806 	br	803b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803760:	e13ffd0b 	ldhu	r4,-12(fp)
  803764:	e17ffe03 	ldbu	r5,-8(fp)
  803768:	e0bfff0b 	ldhu	r2,-4(fp)
  80376c:	e0fff704 	addi	r3,fp,-36
  803770:	d8800015 	stw	r2,0(sp)
  803774:	280f883a 	mov	r7,r5
  803778:	200d883a 	mov	r6,r4
  80377c:	180b883a 	mov	r5,r3
  803780:	e13ffc17 	ldw	r4,-16(fp)
  803784:	080400c0 	call	80400c <OS_FlagBlock>
  803788:	e0bfe517 	ldw	r2,-108(fp)
  80378c:	e0bfe915 	stw	r2,-92(fp)
  803790:	e0bfe917 	ldw	r2,-92(fp)
  803794:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803798:	00009206 	br	8039e4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80379c:	e0bffc17 	ldw	r2,-16(fp)
  8037a0:	10c0020b 	ldhu	r3,8(r2)
  8037a4:	e0bffd0b 	ldhu	r2,-12(fp)
  8037a8:	1884703a 	and	r2,r3,r2
  8037ac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  8037b0:	e0bfe80b 	ldhu	r2,-96(fp)
  8037b4:	10001726 	beq	r2,zero,803814 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8037b8:	e0bfe403 	ldbu	r2,-112(fp)
  8037bc:	10800058 	cmpnei	r2,r2,1
  8037c0:	1000091e 	bne	r2,zero,8037e8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  8037c4:	e0bffc17 	ldw	r2,-16(fp)
  8037c8:	1080020b 	ldhu	r2,8(r2)
  8037cc:	1007883a 	mov	r3,r2
  8037d0:	e0bfe80b 	ldhu	r2,-96(fp)
  8037d4:	0084303a 	nor	r2,zero,r2
  8037d8:	1884703a 	and	r2,r3,r2
  8037dc:	1007883a 	mov	r3,r2
  8037e0:	e0bffc17 	ldw	r2,-16(fp)
  8037e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8037e8:	d0a11817 	ldw	r2,-31648(gp)
  8037ec:	e0ffe80b 	ldhu	r3,-96(fp)
  8037f0:	10c00b0d 	sth	r3,44(r2)
  8037f4:	e0bfe517 	ldw	r2,-108(fp)
  8037f8:	e0bfea15 	stw	r2,-88(fp)
  8037fc:	e0bfea17 	ldw	r2,-88(fp)
  803800:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803804:	e0800217 	ldw	r2,8(fp)
  803808:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80380c:	e0bfe80b 	ldhu	r2,-96(fp)
  803810:	0000cb06 	br	803b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803814:	e13ffd0b 	ldhu	r4,-12(fp)
  803818:	e17ffe03 	ldbu	r5,-8(fp)
  80381c:	e0bfff0b 	ldhu	r2,-4(fp)
  803820:	e0fff704 	addi	r3,fp,-36
  803824:	d8800015 	stw	r2,0(sp)
  803828:	280f883a 	mov	r7,r5
  80382c:	200d883a 	mov	r6,r4
  803830:	180b883a 	mov	r5,r3
  803834:	e13ffc17 	ldw	r4,-16(fp)
  803838:	080400c0 	call	80400c <OS_FlagBlock>
  80383c:	e0bfe517 	ldw	r2,-108(fp)
  803840:	e0bfeb15 	stw	r2,-84(fp)
  803844:	e0bfeb17 	ldw	r2,-84(fp)
  803848:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80384c:	00006506 	br	8039e4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  803850:	e0bffc17 	ldw	r2,-16(fp)
  803854:	1080020b 	ldhu	r2,8(r2)
  803858:	0084303a 	nor	r2,zero,r2
  80385c:	1007883a 	mov	r3,r2
  803860:	e0bffd0b 	ldhu	r2,-12(fp)
  803864:	1884703a 	and	r2,r3,r2
  803868:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80386c:	e0ffe80b 	ldhu	r3,-96(fp)
  803870:	e0bffd0b 	ldhu	r2,-12(fp)
  803874:	1880151e 	bne	r3,r2,8038cc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  803878:	e0bfe403 	ldbu	r2,-112(fp)
  80387c:	10800058 	cmpnei	r2,r2,1
  803880:	1000071e 	bne	r2,zero,8038a0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  803884:	e0bffc17 	ldw	r2,-16(fp)
  803888:	10c0020b 	ldhu	r3,8(r2)
  80388c:	e0bfe80b 	ldhu	r2,-96(fp)
  803890:	1884b03a 	or	r2,r3,r2
  803894:	1007883a 	mov	r3,r2
  803898:	e0bffc17 	ldw	r2,-16(fp)
  80389c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8038a0:	d0a11817 	ldw	r2,-31648(gp)
  8038a4:	e0ffe80b 	ldhu	r3,-96(fp)
  8038a8:	10c00b0d 	sth	r3,44(r2)
  8038ac:	e0bfe517 	ldw	r2,-108(fp)
  8038b0:	e0bfec15 	stw	r2,-80(fp)
  8038b4:	e0bfec17 	ldw	r2,-80(fp)
  8038b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8038bc:	e0800217 	ldw	r2,8(fp)
  8038c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8038c4:	e0bfe80b 	ldhu	r2,-96(fp)
  8038c8:	00009d06 	br	803b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8038cc:	e13ffd0b 	ldhu	r4,-12(fp)
  8038d0:	e17ffe03 	ldbu	r5,-8(fp)
  8038d4:	e0bfff0b 	ldhu	r2,-4(fp)
  8038d8:	e0fff704 	addi	r3,fp,-36
  8038dc:	d8800015 	stw	r2,0(sp)
  8038e0:	280f883a 	mov	r7,r5
  8038e4:	200d883a 	mov	r6,r4
  8038e8:	180b883a 	mov	r5,r3
  8038ec:	e13ffc17 	ldw	r4,-16(fp)
  8038f0:	080400c0 	call	80400c <OS_FlagBlock>
  8038f4:	e0bfe517 	ldw	r2,-108(fp)
  8038f8:	e0bfed15 	stw	r2,-76(fp)
  8038fc:	e0bfed17 	ldw	r2,-76(fp)
  803900:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  803904:	00003706 	br	8039e4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  803908:	e0bffc17 	ldw	r2,-16(fp)
  80390c:	1080020b 	ldhu	r2,8(r2)
  803910:	0084303a 	nor	r2,zero,r2
  803914:	1007883a 	mov	r3,r2
  803918:	e0bffd0b 	ldhu	r2,-12(fp)
  80391c:	1884703a 	and	r2,r3,r2
  803920:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  803924:	e0bfe80b 	ldhu	r2,-96(fp)
  803928:	10001526 	beq	r2,zero,803980 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80392c:	e0bfe403 	ldbu	r2,-112(fp)
  803930:	10800058 	cmpnei	r2,r2,1
  803934:	1000071e 	bne	r2,zero,803954 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  803938:	e0bffc17 	ldw	r2,-16(fp)
  80393c:	10c0020b 	ldhu	r3,8(r2)
  803940:	e0bfe80b 	ldhu	r2,-96(fp)
  803944:	1884b03a 	or	r2,r3,r2
  803948:	1007883a 	mov	r3,r2
  80394c:	e0bffc17 	ldw	r2,-16(fp)
  803950:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  803954:	d0a11817 	ldw	r2,-31648(gp)
  803958:	e0ffe80b 	ldhu	r3,-96(fp)
  80395c:	10c00b0d 	sth	r3,44(r2)
  803960:	e0bfe517 	ldw	r2,-108(fp)
  803964:	e0bfee15 	stw	r2,-72(fp)
  803968:	e0bfee17 	ldw	r2,-72(fp)
  80396c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  803970:	e0800217 	ldw	r2,8(fp)
  803974:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  803978:	e0bfe80b 	ldhu	r2,-96(fp)
  80397c:	00007006 	br	803b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  803980:	e13ffd0b 	ldhu	r4,-12(fp)
  803984:	e17ffe03 	ldbu	r5,-8(fp)
  803988:	e0bfff0b 	ldhu	r2,-4(fp)
  80398c:	e0fff704 	addi	r3,fp,-36
  803990:	d8800015 	stw	r2,0(sp)
  803994:	280f883a 	mov	r7,r5
  803998:	200d883a 	mov	r6,r4
  80399c:	180b883a 	mov	r5,r3
  8039a0:	e13ffc17 	ldw	r4,-16(fp)
  8039a4:	080400c0 	call	80400c <OS_FlagBlock>
  8039a8:	e0bfe517 	ldw	r2,-108(fp)
  8039ac:	e0bfef15 	stw	r2,-68(fp)
  8039b0:	e0bfef17 	ldw	r2,-68(fp)
  8039b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8039b8:	00000a06 	br	8039e4 <OSFlagPend+0x448>
  8039bc:	e0bfe517 	ldw	r2,-108(fp)
  8039c0:	e0bff015 	stw	r2,-64(fp)
  8039c4:	e0bff017 	ldw	r2,-64(fp)
  8039c8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8039cc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8039d0:	e0800217 	ldw	r2,8(fp)
  8039d4:	00c01bc4 	movi	r3,111
  8039d8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  8039dc:	e0bfe80b 	ldhu	r2,-96(fp)
  8039e0:	00005706 	br	803b40 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8039e4:	080246c0 	call	80246c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8039e8:	0005303a 	rdctl	r2,status
  8039ec:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8039f0:	e0fff117 	ldw	r3,-60(fp)
  8039f4:	00bfff84 	movi	r2,-2
  8039f8:	1884703a 	and	r2,r3,r2
  8039fc:	1001703a 	wrctl	status,r2
  
  return context;
  803a00:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  803a04:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  803a08:	d0a11817 	ldw	r2,-31648(gp)
  803a0c:	10800c43 	ldbu	r2,49(r2)
  803a10:	10803fcc 	andi	r2,r2,255
  803a14:	10001c26 	beq	r2,zero,803a88 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  803a18:	d0a11817 	ldw	r2,-31648(gp)
  803a1c:	10800c43 	ldbu	r2,49(r2)
  803a20:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  803a24:	d0a11817 	ldw	r2,-31648(gp)
  803a28:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  803a2c:	e0bff704 	addi	r2,fp,-36
  803a30:	1009883a 	mov	r4,r2
  803a34:	08043400 	call	804340 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  803a38:	d0a11817 	ldw	r2,-31648(gp)
  803a3c:	10000c05 	stb	zero,48(r2)
  803a40:	e0bfe517 	ldw	r2,-108(fp)
  803a44:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803a48:	e0bff217 	ldw	r2,-56(fp)
  803a4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  803a50:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
  803a54:	e0bff303 	ldbu	r2,-52(fp)
  803a58:	108000a0 	cmpeqi	r2,r2,2
  803a5c:	10000426 	beq	r2,zero,803a70 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  803a60:	e0800217 	ldw	r2,8(fp)
  803a64:	00c00384 	movi	r3,14
  803a68:	10c00005 	stb	r3,0(r2)
                 break;
  803a6c:	00000406 	br	803a80 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  803a70:	e0800217 	ldw	r2,8(fp)
  803a74:	00c00284 	movi	r3,10
  803a78:	10c00005 	stb	r3,0(r2)
                 break;
  803a7c:	0001883a 	nop
        }
        return (flags_rdy);
  803a80:	e0bfe80b 	ldhu	r2,-96(fp)
  803a84:	00002e06 	br	803b40 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  803a88:	d0a11817 	ldw	r2,-31648(gp)
  803a8c:	10800b0b 	ldhu	r2,44(r2)
  803a90:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  803a94:	e0bfe403 	ldbu	r2,-112(fp)
  803a98:	10800058 	cmpnei	r2,r2,1
  803a9c:	1000211e 	bne	r2,zero,803b24 <OSFlagPend+0x588>
        switch (wait_type) {
  803aa0:	e0bffe03 	ldbu	r2,-8(fp)
  803aa4:	10001616 	blt	r2,zero,803b00 <OSFlagPend+0x564>
  803aa8:	10c00090 	cmplti	r3,r2,2
  803aac:	18000c1e 	bne	r3,zero,803ae0 <OSFlagPend+0x544>
  803ab0:	10800108 	cmpgei	r2,r2,4
  803ab4:	1000121e 	bne	r2,zero,803b00 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  803ab8:	e0bffc17 	ldw	r2,-16(fp)
  803abc:	1080020b 	ldhu	r2,8(r2)
  803ac0:	1007883a 	mov	r3,r2
  803ac4:	e0bfe80b 	ldhu	r2,-96(fp)
  803ac8:	0084303a 	nor	r2,zero,r2
  803acc:	1884703a 	and	r2,r3,r2
  803ad0:	1007883a 	mov	r3,r2
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	10c0020d 	sth	r3,8(r2)
                 break;
  803adc:	00001106 	br	803b24 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  803ae0:	e0bffc17 	ldw	r2,-16(fp)
  803ae4:	10c0020b 	ldhu	r3,8(r2)
  803ae8:	e0bfe80b 	ldhu	r2,-96(fp)
  803aec:	1884b03a 	or	r2,r3,r2
  803af0:	1007883a 	mov	r3,r2
  803af4:	e0bffc17 	ldw	r2,-16(fp)
  803af8:	10c0020d 	sth	r3,8(r2)
                 break;
  803afc:	00000906 	br	803b24 <OSFlagPend+0x588>
  803b00:	e0bfe517 	ldw	r2,-108(fp)
  803b04:	e0bff415 	stw	r2,-48(fp)
  803b08:	e0bff417 	ldw	r2,-48(fp)
  803b0c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  803b10:	e0800217 	ldw	r2,8(fp)
  803b14:	00c01bc4 	movi	r3,111
  803b18:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  803b1c:	0005883a 	mov	r2,zero
  803b20:	00000706 	br	803b40 <OSFlagPend+0x5a4>
  803b24:	e0bfe517 	ldw	r2,-108(fp)
  803b28:	e0bff515 	stw	r2,-44(fp)
  803b2c:	e0bff517 	ldw	r2,-44(fp)
  803b30:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  803b34:	e0800217 	ldw	r2,8(fp)
  803b38:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  803b3c:	e0bfe80b 	ldhu	r2,-96(fp)
}
  803b40:	e037883a 	mov	sp,fp
  803b44:	dfc00117 	ldw	ra,4(sp)
  803b48:	df000017 	ldw	fp,0(sp)
  803b4c:	dec00204 	addi	sp,sp,8
  803b50:	f800283a 	ret

00803b54 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  803b54:	defffb04 	addi	sp,sp,-20
  803b58:	df000415 	stw	fp,16(sp)
  803b5c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  803b60:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803b64:	0005303a 	rdctl	r2,status
  803b68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803b6c:	e0fffe17 	ldw	r3,-8(fp)
  803b70:	00bfff84 	movi	r2,-2
  803b74:	1884703a 	and	r2,r3,r2
  803b78:	1001703a 	wrctl	status,r2
  
  return context;
  803b7c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  803b80:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  803b84:	d0a11817 	ldw	r2,-31648(gp)
  803b88:	10800b0b 	ldhu	r2,44(r2)
  803b8c:	e0bffd0d 	sth	r2,-12(fp)
  803b90:	e0bffc17 	ldw	r2,-16(fp)
  803b94:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803b98:	e0bfff17 	ldw	r2,-4(fp)
  803b9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  803ba0:	e0bffd0b 	ldhu	r2,-12(fp)
}
  803ba4:	e037883a 	mov	sp,fp
  803ba8:	df000017 	ldw	fp,0(sp)
  803bac:	dec00104 	addi	sp,sp,4
  803bb0:	f800283a 	ret

00803bb4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  803bb4:	deffef04 	addi	sp,sp,-68
  803bb8:	dfc01015 	stw	ra,64(sp)
  803bbc:	df000f15 	stw	fp,60(sp)
  803bc0:	df000f04 	addi	fp,sp,60
  803bc4:	e13ffc15 	stw	r4,-16(fp)
  803bc8:	2807883a 	mov	r3,r5
  803bcc:	3005883a 	mov	r2,r6
  803bd0:	e1ffff15 	stw	r7,-4(fp)
  803bd4:	e0fffd0d 	sth	r3,-12(fp)
  803bd8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  803bdc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  803be0:	e0bfff17 	ldw	r2,-4(fp)
  803be4:	1000021e 	bne	r2,zero,803bf0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  803be8:	0005883a 	mov	r2,zero
  803bec:	0000d106 	br	803f34 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  803bf0:	e0bffc17 	ldw	r2,-16(fp)
  803bf4:	1000051e 	bne	r2,zero,803c0c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803bf8:	e0bfff17 	ldw	r2,-4(fp)
  803bfc:	00c01b84 	movi	r3,110
  803c00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803c04:	0005883a 	mov	r2,zero
  803c08:	0000ca06 	br	803f34 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  803c0c:	e0bffc17 	ldw	r2,-16(fp)
  803c10:	10800003 	ldbu	r2,0(r2)
  803c14:	10803fcc 	andi	r2,r2,255
  803c18:	10800160 	cmpeqi	r2,r2,5
  803c1c:	1000051e 	bne	r2,zero,803c34 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  803c20:	e0bfff17 	ldw	r2,-4(fp)
  803c24:	00c00044 	movi	r3,1
  803c28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803c2c:	0005883a 	mov	r2,zero
  803c30:	0000c006 	br	803f34 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803c34:	0005303a 	rdctl	r2,status
  803c38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803c3c:	e0fffb17 	ldw	r3,-20(fp)
  803c40:	00bfff84 	movi	r2,-2
  803c44:	1884703a 	and	r2,r3,r2
  803c48:	1001703a 	wrctl	status,r2
  
  return context;
  803c4c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  803c50:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
  803c54:	e0bffe03 	ldbu	r2,-8(fp)
  803c58:	10000326 	beq	r2,zero,803c68 <OSFlagPost+0xb4>
  803c5c:	10800060 	cmpeqi	r2,r2,1
  803c60:	10000b1e 	bne	r2,zero,803c90 <OSFlagPost+0xdc>
  803c64:	00001206 	br	803cb0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  803c68:	e0bffc17 	ldw	r2,-16(fp)
  803c6c:	1080020b 	ldhu	r2,8(r2)
  803c70:	1007883a 	mov	r3,r2
  803c74:	e0bffd0b 	ldhu	r2,-12(fp)
  803c78:	0084303a 	nor	r2,zero,r2
  803c7c:	1884703a 	and	r2,r3,r2
  803c80:	1007883a 	mov	r3,r2
  803c84:	e0bffc17 	ldw	r2,-16(fp)
  803c88:	10c0020d 	sth	r3,8(r2)
             break;
  803c8c:	00001106 	br	803cd4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  803c90:	e0bffc17 	ldw	r2,-16(fp)
  803c94:	10c0020b 	ldhu	r3,8(r2)
  803c98:	e0bffd0b 	ldhu	r2,-12(fp)
  803c9c:	1884b03a 	or	r2,r3,r2
  803ca0:	1007883a 	mov	r3,r2
  803ca4:	e0bffc17 	ldw	r2,-16(fp)
  803ca8:	10c0020d 	sth	r3,8(r2)
             break;
  803cac:	00000906 	br	803cd4 <OSFlagPost+0x120>
  803cb0:	e0bff317 	ldw	r2,-52(fp)
  803cb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803cb8:	e0bff417 	ldw	r2,-48(fp)
  803cbc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  803cc0:	e0bfff17 	ldw	r2,-4(fp)
  803cc4:	00c01c44 	movi	r3,113
  803cc8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  803ccc:	0005883a 	mov	r2,zero
  803cd0:	00009806 	br	803f34 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  803cd4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  803cd8:	e0bffc17 	ldw	r2,-16(fp)
  803cdc:	10800117 	ldw	r2,4(r2)
  803ce0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  803ce4:	00007706 	br	803ec4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
  803ce8:	e0bff117 	ldw	r2,-60(fp)
  803cec:	10800483 	ldbu	r2,18(r2)
  803cf0:	10803fcc 	andi	r2,r2,255
  803cf4:	10c00060 	cmpeqi	r3,r2,1
  803cf8:	18004a1e 	bne	r3,zero,803e24 <OSFlagPost+0x270>
  803cfc:	10c00088 	cmpgei	r3,r2,2
  803d00:	1800021e 	bne	r3,zero,803d0c <OSFlagPost+0x158>
  803d04:	10002f26 	beq	r2,zero,803dc4 <OSFlagPost+0x210>
  803d08:	00005b06 	br	803e78 <OSFlagPost+0x2c4>
  803d0c:	10c000a0 	cmpeqi	r3,r2,2
  803d10:	1800031e 	bne	r3,zero,803d20 <OSFlagPost+0x16c>
  803d14:	108000e0 	cmpeqi	r2,r2,3
  803d18:	1000171e 	bne	r2,zero,803d78 <OSFlagPost+0x1c4>
  803d1c:	00005606 	br	803e78 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803d20:	e0bffc17 	ldw	r2,-16(fp)
  803d24:	10c0020b 	ldhu	r3,8(r2)
  803d28:	e0bff117 	ldw	r2,-60(fp)
  803d2c:	1080040b 	ldhu	r2,16(r2)
  803d30:	1884703a 	and	r2,r3,r2
  803d34:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  803d38:	e0bff117 	ldw	r2,-60(fp)
  803d3c:	1080040b 	ldhu	r2,16(r2)
  803d40:	10ffffcc 	andi	r3,r2,65535
  803d44:	e0bff60b 	ldhu	r2,-40(fp)
  803d48:	1880541e 	bne	r3,r2,803e9c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803d4c:	e0bff60b 	ldhu	r2,-40(fp)
  803d50:	100b883a 	mov	r5,r2
  803d54:	e13ff117 	ldw	r4,-60(fp)
  803d58:	080424c0 	call	80424c <OS_FlagTaskRdy>
  803d5c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  803d60:	e0bff683 	ldbu	r2,-38(fp)
  803d64:	10800058 	cmpnei	r2,r2,1
  803d68:	10004c1e 	bne	r2,zero,803e9c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  803d6c:	00800044 	movi	r2,1
  803d70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803d74:	00004906 	br	803e9c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803d78:	e0bffc17 	ldw	r2,-16(fp)
  803d7c:	10c0020b 	ldhu	r3,8(r2)
  803d80:	e0bff117 	ldw	r2,-60(fp)
  803d84:	1080040b 	ldhu	r2,16(r2)
  803d88:	1884703a 	and	r2,r3,r2
  803d8c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  803d90:	e0bff60b 	ldhu	r2,-40(fp)
  803d94:	10004326 	beq	r2,zero,803ea4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803d98:	e0bff60b 	ldhu	r2,-40(fp)
  803d9c:	100b883a 	mov	r5,r2
  803da0:	e13ff117 	ldw	r4,-60(fp)
  803da4:	080424c0 	call	80424c <OS_FlagTaskRdy>
  803da8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  803dac:	e0bff683 	ldbu	r2,-38(fp)
  803db0:	10800058 	cmpnei	r2,r2,1
  803db4:	10003b1e 	bne	r2,zero,803ea4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  803db8:	00800044 	movi	r2,1
  803dbc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803dc0:	00003806 	br	803ea4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803dc4:	e0bffc17 	ldw	r2,-16(fp)
  803dc8:	1080020b 	ldhu	r2,8(r2)
  803dcc:	0084303a 	nor	r2,zero,r2
  803dd0:	1007883a 	mov	r3,r2
  803dd4:	e0bff117 	ldw	r2,-60(fp)
  803dd8:	1080040b 	ldhu	r2,16(r2)
  803ddc:	1884703a 	and	r2,r3,r2
  803de0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  803de4:	e0bff117 	ldw	r2,-60(fp)
  803de8:	1080040b 	ldhu	r2,16(r2)
  803dec:	10ffffcc 	andi	r3,r2,65535
  803df0:	e0bff60b 	ldhu	r2,-40(fp)
  803df4:	18802d1e 	bne	r3,r2,803eac <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803df8:	e0bff60b 	ldhu	r2,-40(fp)
  803dfc:	100b883a 	mov	r5,r2
  803e00:	e13ff117 	ldw	r4,-60(fp)
  803e04:	080424c0 	call	80424c <OS_FlagTaskRdy>
  803e08:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  803e0c:	e0bff683 	ldbu	r2,-38(fp)
  803e10:	10800058 	cmpnei	r2,r2,1
  803e14:	1000251e 	bne	r2,zero,803eac <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  803e18:	00800044 	movi	r2,1
  803e1c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803e20:	00002206 	br	803eac <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  803e24:	e0bffc17 	ldw	r2,-16(fp)
  803e28:	1080020b 	ldhu	r2,8(r2)
  803e2c:	0084303a 	nor	r2,zero,r2
  803e30:	1007883a 	mov	r3,r2
  803e34:	e0bff117 	ldw	r2,-60(fp)
  803e38:	1080040b 	ldhu	r2,16(r2)
  803e3c:	1884703a 	and	r2,r3,r2
  803e40:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  803e44:	e0bff60b 	ldhu	r2,-40(fp)
  803e48:	10001a26 	beq	r2,zero,803eb4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  803e4c:	e0bff60b 	ldhu	r2,-40(fp)
  803e50:	100b883a 	mov	r5,r2
  803e54:	e13ff117 	ldw	r4,-60(fp)
  803e58:	080424c0 	call	80424c <OS_FlagTaskRdy>
  803e5c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
  803e60:	e0bff683 	ldbu	r2,-38(fp)
  803e64:	10800058 	cmpnei	r2,r2,1
  803e68:	1000121e 	bne	r2,zero,803eb4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  803e6c:	00800044 	movi	r2,1
  803e70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
  803e74:	00000f06 	br	803eb4 <OSFlagPost+0x300>
  803e78:	e0bff317 	ldw	r2,-52(fp)
  803e7c:	e0bff515 	stw	r2,-44(fp)
  803e80:	e0bff517 	ldw	r2,-44(fp)
  803e84:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  803e88:	e0bfff17 	ldw	r2,-4(fp)
  803e8c:	00c01bc4 	movi	r3,111
  803e90:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  803e94:	0005883a 	mov	r2,zero
  803e98:	00002606 	br	803f34 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  803e9c:	0001883a 	nop
  803ea0:	00000506 	br	803eb8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  803ea4:	0001883a 	nop
  803ea8:	00000306 	br	803eb8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  803eac:	0001883a 	nop
  803eb0:	00000106 	br	803eb8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  803eb4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  803eb8:	e0bff117 	ldw	r2,-60(fp)
  803ebc:	10800017 	ldw	r2,0(r2)
  803ec0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  803ec4:	e0bff117 	ldw	r2,-60(fp)
  803ec8:	103f871e 	bne	r2,zero,803ce8 <__alt_mem_onchip_memory2_0+0xff7ffce8>
  803ecc:	e0bff317 	ldw	r2,-52(fp)
  803ed0:	e0bff715 	stw	r2,-36(fp)
  803ed4:	e0bff717 	ldw	r2,-36(fp)
  803ed8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  803edc:	e0bff203 	ldbu	r2,-56(fp)
  803ee0:	10800058 	cmpnei	r2,r2,1
  803ee4:	1000011e 	bne	r2,zero,803eec <OSFlagPost+0x338>
        OS_Sched();
  803ee8:	080246c0 	call	80246c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803eec:	0005303a 	rdctl	r2,status
  803ef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803ef4:	e0fffa17 	ldw	r3,-24(fp)
  803ef8:	00bfff84 	movi	r2,-2
  803efc:	1884703a 	and	r2,r3,r2
  803f00:	1001703a 	wrctl	status,r2
  
  return context;
  803f04:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  803f08:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
  803f0c:	e0bffc17 	ldw	r2,-16(fp)
  803f10:	1080020b 	ldhu	r2,8(r2)
  803f14:	e0bff90d 	sth	r2,-28(fp)
  803f18:	e0bff317 	ldw	r2,-52(fp)
  803f1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803f20:	e0bff817 	ldw	r2,-32(fp)
  803f24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  803f28:	e0bfff17 	ldw	r2,-4(fp)
  803f2c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  803f30:	e0bff90b 	ldhu	r2,-28(fp)
}
  803f34:	e037883a 	mov	sp,fp
  803f38:	dfc00117 	ldw	ra,4(sp)
  803f3c:	df000017 	ldw	fp,0(sp)
  803f40:	dec00204 	addi	sp,sp,8
  803f44:	f800283a 	ret

00803f48 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  803f48:	defff904 	addi	sp,sp,-28
  803f4c:	df000615 	stw	fp,24(sp)
  803f50:	df000604 	addi	fp,sp,24
  803f54:	e13ffe15 	stw	r4,-8(fp)
  803f58:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  803f5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  803f60:	e0bfff17 	ldw	r2,-4(fp)
  803f64:	1000021e 	bne	r2,zero,803f70 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  803f68:	0005883a 	mov	r2,zero
  803f6c:	00002306 	br	803ffc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  803f70:	e0bffe17 	ldw	r2,-8(fp)
  803f74:	1000051e 	bne	r2,zero,803f8c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  803f78:	e0bfff17 	ldw	r2,-4(fp)
  803f7c:	00c01b84 	movi	r3,110
  803f80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803f84:	0005883a 	mov	r2,zero
  803f88:	00001c06 	br	803ffc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  803f8c:	e0bffe17 	ldw	r2,-8(fp)
  803f90:	10800003 	ldbu	r2,0(r2)
  803f94:	10803fcc 	andi	r2,r2,255
  803f98:	10800160 	cmpeqi	r2,r2,5
  803f9c:	1000051e 	bne	r2,zero,803fb4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  803fa0:	e0bfff17 	ldw	r2,-4(fp)
  803fa4:	00c00044 	movi	r3,1
  803fa8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  803fac:	0005883a 	mov	r2,zero
  803fb0:	00001206 	br	803ffc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803fb4:	0005303a 	rdctl	r2,status
  803fb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803fbc:	e0fffc17 	ldw	r3,-16(fp)
  803fc0:	00bfff84 	movi	r2,-2
  803fc4:	1884703a 	and	r2,r3,r2
  803fc8:	1001703a 	wrctl	status,r2
  
  return context;
  803fcc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  803fd0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
  803fd4:	e0bffe17 	ldw	r2,-8(fp)
  803fd8:	1080020b 	ldhu	r2,8(r2)
  803fdc:	e0bffb0d 	sth	r2,-20(fp)
  803fe0:	e0bffa17 	ldw	r2,-24(fp)
  803fe4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803fe8:	e0bffd17 	ldw	r2,-12(fp)
  803fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  803ff0:	e0bfff17 	ldw	r2,-4(fp)
  803ff4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  803ff8:	e0bffb0b 	ldhu	r2,-20(fp)
}
  803ffc:	e037883a 	mov	sp,fp
  804000:	df000017 	ldw	fp,0(sp)
  804004:	dec00104 	addi	sp,sp,4
  804008:	f800283a 	ret

0080400c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80400c:	defff804 	addi	sp,sp,-32
  804010:	df000715 	stw	fp,28(sp)
  804014:	df000704 	addi	fp,sp,28
  804018:	e13ffb15 	stw	r4,-20(fp)
  80401c:	e17ffc15 	stw	r5,-16(fp)
  804020:	3009883a 	mov	r4,r6
  804024:	3807883a 	mov	r3,r7
  804028:	e0800117 	ldw	r2,4(fp)
  80402c:	e13ffd0d 	sth	r4,-12(fp)
  804030:	e0fffe05 	stb	r3,-8(fp)
  804034:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  804038:	d0a11817 	ldw	r2,-31648(gp)
  80403c:	d0e11817 	ldw	r3,-31648(gp)
  804040:	18c00c03 	ldbu	r3,48(r3)
  804044:	18c00814 	ori	r3,r3,32
  804048:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80404c:	d0a11817 	ldw	r2,-31648(gp)
  804050:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  804054:	d0a11817 	ldw	r2,-31648(gp)
  804058:	e0ffff0b 	ldhu	r3,-4(fp)
  80405c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  804060:	d0a11817 	ldw	r2,-31648(gp)
  804064:	e0fffc17 	ldw	r3,-16(fp)
  804068:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80406c:	e0bffc17 	ldw	r2,-16(fp)
  804070:	e0fffd0b 	ldhu	r3,-12(fp)
  804074:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  804078:	e0bffc17 	ldw	r2,-16(fp)
  80407c:	e0fffe03 	ldbu	r3,-8(fp)
  804080:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  804084:	d0e11817 	ldw	r3,-31648(gp)
  804088:	e0bffc17 	ldw	r2,-16(fp)
  80408c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  804090:	e0bffb17 	ldw	r2,-20(fp)
  804094:	10c00117 	ldw	r3,4(r2)
  804098:	e0bffc17 	ldw	r2,-16(fp)
  80409c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  8040a0:	e0bffc17 	ldw	r2,-16(fp)
  8040a4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  8040a8:	e0bffc17 	ldw	r2,-16(fp)
  8040ac:	e0fffb17 	ldw	r3,-20(fp)
  8040b0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8040b4:	e0bffb17 	ldw	r2,-20(fp)
  8040b8:	10800117 	ldw	r2,4(r2)
  8040bc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  8040c0:	e0bff917 	ldw	r2,-28(fp)
  8040c4:	10000326 	beq	r2,zero,8040d4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  8040c8:	e0bff917 	ldw	r2,-28(fp)
  8040cc:	e0fffc17 	ldw	r3,-16(fp)
  8040d0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  8040d4:	e0bffb17 	ldw	r2,-20(fp)
  8040d8:	e0fffc17 	ldw	r3,-16(fp)
  8040dc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  8040e0:	d0a11817 	ldw	r2,-31648(gp)
  8040e4:	10800d03 	ldbu	r2,52(r2)
  8040e8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8040ec:	e0fffa03 	ldbu	r3,-24(fp)
  8040f0:	e13ffa03 	ldbu	r4,-24(fp)
  8040f4:	d0a11544 	addi	r2,gp,-31659
  8040f8:	2085883a 	add	r2,r4,r2
  8040fc:	10800003 	ldbu	r2,0(r2)
  804100:	1009883a 	mov	r4,r2
  804104:	d0a11817 	ldw	r2,-31648(gp)
  804108:	10800d43 	ldbu	r2,53(r2)
  80410c:	0084303a 	nor	r2,zero,r2
  804110:	2084703a 	and	r2,r4,r2
  804114:	1009883a 	mov	r4,r2
  804118:	d0a11544 	addi	r2,gp,-31659
  80411c:	1885883a 	add	r2,r3,r2
  804120:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  804124:	e0fffa03 	ldbu	r3,-24(fp)
  804128:	d0a11544 	addi	r2,gp,-31659
  80412c:	1885883a 	add	r2,r3,r2
  804130:	10800003 	ldbu	r2,0(r2)
  804134:	10803fcc 	andi	r2,r2,255
  804138:	1000071e 	bne	r2,zero,804158 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80413c:	d0a11817 	ldw	r2,-31648(gp)
  804140:	10800d83 	ldbu	r2,54(r2)
  804144:	0084303a 	nor	r2,zero,r2
  804148:	1007883a 	mov	r3,r2
  80414c:	d0a11503 	ldbu	r2,-31660(gp)
  804150:	1884703a 	and	r2,r3,r2
  804154:	d0a11505 	stb	r2,-31660(gp)
    }
}
  804158:	0001883a 	nop
  80415c:	e037883a 	mov	sp,fp
  804160:	df000017 	ldw	fp,0(sp)
  804164:	dec00104 	addi	sp,sp,4
  804168:	f800283a 	ret

0080416c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80416c:	defffb04 	addi	sp,sp,-20
  804170:	dfc00415 	stw	ra,16(sp)
  804174:	df000315 	stw	fp,12(sp)
  804178:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80417c:	0140dc04 	movi	r5,880
  804180:	01002074 	movhi	r4,129
  804184:	21396404 	addi	r4,r4,-6768
  804188:	08023b00 	call	8023b0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80418c:	00802074 	movhi	r2,129
  804190:	10b96404 	addi	r2,r2,-6768
  804194:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  804198:	00802074 	movhi	r2,129
  80419c:	10b96f04 	addi	r2,r2,-6724
  8041a0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8041a4:	e03ffd0d 	sth	zero,-12(fp)
  8041a8:	00001306 	br	8041f8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8041ac:	e0bffe17 	ldw	r2,-8(fp)
  8041b0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  8041b4:	e0bffe17 	ldw	r2,-8(fp)
  8041b8:	e0ffff17 	ldw	r3,-4(fp)
  8041bc:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  8041c0:	e0bffe17 	ldw	r2,-8(fp)
  8041c4:	00c00fc4 	movi	r3,63
  8041c8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  8041cc:	e0bffe17 	ldw	r2,-8(fp)
  8041d0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  8041d4:	e0bffe17 	ldw	r2,-8(fp)
  8041d8:	10800b04 	addi	r2,r2,44
  8041dc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  8041e0:	e0bfff17 	ldw	r2,-4(fp)
  8041e4:	10800b04 	addi	r2,r2,44
  8041e8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  8041ec:	e0bffd0b 	ldhu	r2,-12(fp)
  8041f0:	10800044 	addi	r2,r2,1
  8041f4:	e0bffd0d 	sth	r2,-12(fp)
  8041f8:	e0bffd0b 	ldhu	r2,-12(fp)
  8041fc:	108004f0 	cmpltui	r2,r2,19
  804200:	103fea1e 	bne	r2,zero,8041ac <__alt_mem_onchip_memory2_0+0xff8001ac>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  804204:	e0bffe17 	ldw	r2,-8(fp)
  804208:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80420c:	e0bffe17 	ldw	r2,-8(fp)
  804210:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  804214:	e0bffe17 	ldw	r2,-8(fp)
  804218:	00c00fc4 	movi	r3,63
  80421c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  804220:	e0bffe17 	ldw	r2,-8(fp)
  804224:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  804228:	00802074 	movhi	r2,129
  80422c:	10b96404 	addi	r2,r2,-6768
  804230:	d0a11a15 	stw	r2,-31640(gp)
#endif
}
  804234:	0001883a 	nop
  804238:	e037883a 	mov	sp,fp
  80423c:	dfc00117 	ldw	ra,4(sp)
  804240:	df000017 	ldw	fp,0(sp)
  804244:	dec00204 	addi	sp,sp,8
  804248:	f800283a 	ret

0080424c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80424c:	defffa04 	addi	sp,sp,-24
  804250:	dfc00515 	stw	ra,20(sp)
  804254:	df000415 	stw	fp,16(sp)
  804258:	df000404 	addi	fp,sp,16
  80425c:	e13ffe15 	stw	r4,-8(fp)
  804260:	2805883a 	mov	r2,r5
  804264:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  804268:	e0bffe17 	ldw	r2,-8(fp)
  80426c:	10800217 	ldw	r2,8(r2)
  804270:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  804274:	e0bffd17 	ldw	r2,-12(fp)
  804278:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80427c:	e0bffd17 	ldw	r2,-12(fp)
  804280:	e0ffff0b 	ldhu	r3,-4(fp)
  804284:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  804288:	e0bffd17 	ldw	r2,-12(fp)
  80428c:	10c00c03 	ldbu	r3,48(r2)
  804290:	00bff7c4 	movi	r2,-33
  804294:	1884703a 	and	r2,r3,r2
  804298:	1007883a 	mov	r3,r2
  80429c:	e0bffd17 	ldw	r2,-12(fp)
  8042a0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  8042a4:	e0bffd17 	ldw	r2,-12(fp)
  8042a8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  8042ac:	e0bffd17 	ldw	r2,-12(fp)
  8042b0:	10800c03 	ldbu	r2,48(r2)
  8042b4:	10803fcc 	andi	r2,r2,255
  8042b8:	1000181e 	bne	r2,zero,80431c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  8042bc:	e0bffd17 	ldw	r2,-12(fp)
  8042c0:	10c00d83 	ldbu	r3,54(r2)
  8042c4:	d0a11503 	ldbu	r2,-31660(gp)
  8042c8:	1884b03a 	or	r2,r3,r2
  8042cc:	d0a11505 	stb	r2,-31660(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8042d0:	e0bffd17 	ldw	r2,-12(fp)
  8042d4:	10800d03 	ldbu	r2,52(r2)
  8042d8:	10c03fcc 	andi	r3,r2,255
  8042dc:	e0bffd17 	ldw	r2,-12(fp)
  8042e0:	10800d03 	ldbu	r2,52(r2)
  8042e4:	11003fcc 	andi	r4,r2,255
  8042e8:	d0a11544 	addi	r2,gp,-31659
  8042ec:	2085883a 	add	r2,r4,r2
  8042f0:	11000003 	ldbu	r4,0(r2)
  8042f4:	e0bffd17 	ldw	r2,-12(fp)
  8042f8:	10800d43 	ldbu	r2,53(r2)
  8042fc:	2084b03a 	or	r2,r4,r2
  804300:	1009883a 	mov	r4,r2
  804304:	d0a11544 	addi	r2,gp,-31659
  804308:	1885883a 	add	r2,r3,r2
  80430c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
  804310:	00800044 	movi	r2,1
  804314:	e0bffc05 	stb	r2,-16(fp)
  804318:	00000106 	br	804320 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
  80431c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  804320:	e13ffe17 	ldw	r4,-8(fp)
  804324:	08043400 	call	804340 <OS_FlagUnlink>
    return (sched);
  804328:	e0bffc03 	ldbu	r2,-16(fp)
}
  80432c:	e037883a 	mov	sp,fp
  804330:	dfc00117 	ldw	ra,4(sp)
  804334:	df000017 	ldw	fp,0(sp)
  804338:	dec00204 	addi	sp,sp,8
  80433c:	f800283a 	ret

00804340 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  804340:	defffa04 	addi	sp,sp,-24
  804344:	df000515 	stw	fp,20(sp)
  804348:	df000504 	addi	fp,sp,20
  80434c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  804350:	e0bfff17 	ldw	r2,-4(fp)
  804354:	10800117 	ldw	r2,4(r2)
  804358:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80435c:	e0bfff17 	ldw	r2,-4(fp)
  804360:	10800017 	ldw	r2,0(r2)
  804364:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  804368:	e0bffb17 	ldw	r2,-20(fp)
  80436c:	10000b1e 	bne	r2,zero,80439c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  804370:	e0bfff17 	ldw	r2,-4(fp)
  804374:	10800317 	ldw	r2,12(r2)
  804378:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80437c:	e0bffd17 	ldw	r2,-12(fp)
  804380:	e0fffc17 	ldw	r3,-16(fp)
  804384:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  804388:	e0bffc17 	ldw	r2,-16(fp)
  80438c:	10000b26 	beq	r2,zero,8043bc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  804390:	e0bffc17 	ldw	r2,-16(fp)
  804394:	10000115 	stw	zero,4(r2)
  804398:	00000806 	br	8043bc <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80439c:	e0bffb17 	ldw	r2,-20(fp)
  8043a0:	e0fffc17 	ldw	r3,-16(fp)
  8043a4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  8043a8:	e0bffc17 	ldw	r2,-16(fp)
  8043ac:	10000326 	beq	r2,zero,8043bc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  8043b0:	e0bffc17 	ldw	r2,-16(fp)
  8043b4:	e0fffb17 	ldw	r3,-20(fp)
  8043b8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  8043bc:	e0bfff17 	ldw	r2,-4(fp)
  8043c0:	10800217 	ldw	r2,8(r2)
  8043c4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  8043c8:	e0bffe17 	ldw	r2,-8(fp)
  8043cc:	10000a15 	stw	zero,40(r2)
#endif
}
  8043d0:	0001883a 	nop
  8043d4:	e037883a 	mov	sp,fp
  8043d8:	df000017 	ldw	fp,0(sp)
  8043dc:	dec00104 	addi	sp,sp,4
  8043e0:	f800283a 	ret

008043e4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  8043e4:	defff404 	addi	sp,sp,-48
  8043e8:	df000b15 	stw	fp,44(sp)
  8043ec:	df000b04 	addi	fp,sp,44
  8043f0:	e13ffc15 	stw	r4,-16(fp)
  8043f4:	e17ffd15 	stw	r5,-12(fp)
  8043f8:	e1bffe15 	stw	r6,-8(fp)
  8043fc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  804400:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  804404:	e0bfff17 	ldw	r2,-4(fp)
  804408:	1000021e 	bne	r2,zero,804414 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  80440c:	0005883a 	mov	r2,zero
  804410:	00006506 	br	8045a8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  804414:	e0bffc17 	ldw	r2,-16(fp)
  804418:	1000051e 	bne	r2,zero,804430 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80441c:	e0bfff17 	ldw	r2,-4(fp)
  804420:	00c01884 	movi	r3,98
  804424:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  804428:	0005883a 	mov	r2,zero
  80442c:	00005e06 	br	8045a8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  804430:	e0bffc17 	ldw	r2,-16(fp)
  804434:	108000cc 	andi	r2,r2,3
  804438:	10000526 	beq	r2,zero,804450 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80443c:	e0bfff17 	ldw	r2,-4(fp)
  804440:	00c01884 	movi	r3,98
  804444:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  804448:	0005883a 	mov	r2,zero
  80444c:	00005606 	br	8045a8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  804450:	e0bffd17 	ldw	r2,-12(fp)
  804454:	108000a8 	cmpgeui	r2,r2,2
  804458:	1000051e 	bne	r2,zero,804470 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80445c:	e0bfff17 	ldw	r2,-4(fp)
  804460:	00c016c4 	movi	r3,91
  804464:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  804468:	0005883a 	mov	r2,zero
  80446c:	00004e06 	br	8045a8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  804470:	e0bffe17 	ldw	r2,-8(fp)
  804474:	10800128 	cmpgeui	r2,r2,4
  804478:	1000051e 	bne	r2,zero,804490 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80447c:	e0bfff17 	ldw	r2,-4(fp)
  804480:	00c01704 	movi	r3,92
  804484:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  804488:	0005883a 	mov	r2,zero
  80448c:	00004606 	br	8045a8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804490:	0005303a 	rdctl	r2,status
  804494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804498:	e0fffb17 	ldw	r3,-20(fp)
  80449c:	00bfff84 	movi	r2,-2
  8044a0:	1884703a 	and	r2,r3,r2
  8044a4:	1001703a 	wrctl	status,r2
  
  return context;
  8044a8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8044ac:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  8044b0:	d0a11217 	ldw	r2,-31672(gp)
  8044b4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  8044b8:	d0a11217 	ldw	r2,-31672(gp)
  8044bc:	10000326 	beq	r2,zero,8044cc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  8044c0:	d0a11217 	ldw	r2,-31672(gp)
  8044c4:	10800117 	ldw	r2,4(r2)
  8044c8:	d0a11215 	stw	r2,-31672(gp)
  8044cc:	e0bff817 	ldw	r2,-32(fp)
  8044d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8044d4:	e0bff917 	ldw	r2,-28(fp)
  8044d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  8044dc:	e0bffa17 	ldw	r2,-24(fp)
  8044e0:	1000051e 	bne	r2,zero,8044f8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
  8044e4:	e0bfff17 	ldw	r2,-4(fp)
  8044e8:	00c01684 	movi	r3,90
  8044ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  8044f0:	0005883a 	mov	r2,zero
  8044f4:	00002c06 	br	8045a8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  8044f8:	e0bffc17 	ldw	r2,-16(fp)
  8044fc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  804500:	e0fffc17 	ldw	r3,-16(fp)
  804504:	e0bffe17 	ldw	r2,-8(fp)
  804508:	1885883a 	add	r2,r3,r2
  80450c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
  804510:	e03ff715 	stw	zero,-36(fp)
  804514:	00000c06 	br	804548 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  804518:	e0bff617 	ldw	r2,-40(fp)
  80451c:	e0fff517 	ldw	r3,-44(fp)
  804520:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  804524:	e0bff517 	ldw	r2,-44(fp)
  804528:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80452c:	e0fff517 	ldw	r3,-44(fp)
  804530:	e0bffe17 	ldw	r2,-8(fp)
  804534:	1885883a 	add	r2,r3,r2
  804538:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80453c:	e0bff717 	ldw	r2,-36(fp)
  804540:	10800044 	addi	r2,r2,1
  804544:	e0bff715 	stw	r2,-36(fp)
  804548:	e0bffd17 	ldw	r2,-12(fp)
  80454c:	10bfffc4 	addi	r2,r2,-1
  804550:	e0fff717 	ldw	r3,-36(fp)
  804554:	18bff036 	bltu	r3,r2,804518 <__alt_mem_onchip_memory2_0+0xff800518>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  804558:	e0bff617 	ldw	r2,-40(fp)
  80455c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  804560:	e0bffa17 	ldw	r2,-24(fp)
  804564:	e0fffc17 	ldw	r3,-16(fp)
  804568:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80456c:	e0bffa17 	ldw	r2,-24(fp)
  804570:	e0fffc17 	ldw	r3,-16(fp)
  804574:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  804578:	e0bffa17 	ldw	r2,-24(fp)
  80457c:	e0fffd17 	ldw	r3,-12(fp)
  804580:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  804584:	e0bffa17 	ldw	r2,-24(fp)
  804588:	e0fffd17 	ldw	r3,-12(fp)
  80458c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  804590:	e0bffa17 	ldw	r2,-24(fp)
  804594:	e0fffe17 	ldw	r3,-8(fp)
  804598:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  80459c:	e0bfff17 	ldw	r2,-4(fp)
  8045a0:	10000005 	stb	zero,0(r2)
    return (pmem);
  8045a4:	e0bffa17 	ldw	r2,-24(fp)
}
  8045a8:	e037883a 	mov	sp,fp
  8045ac:	df000017 	ldw	fp,0(sp)
  8045b0:	dec00104 	addi	sp,sp,4
  8045b4:	f800283a 	ret

008045b8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  8045b8:	defff804 	addi	sp,sp,-32
  8045bc:	df000715 	stw	fp,28(sp)
  8045c0:	df000704 	addi	fp,sp,28
  8045c4:	e13ffe15 	stw	r4,-8(fp)
  8045c8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8045cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8045d0:	e0bfff17 	ldw	r2,-4(fp)
  8045d4:	1000021e 	bne	r2,zero,8045e0 <OSMemGet+0x28>
        return ((void *)0);
  8045d8:	0005883a 	mov	r2,zero
  8045dc:	00002e06 	br	804698 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  8045e0:	e0bffe17 	ldw	r2,-8(fp)
  8045e4:	1000051e 	bne	r2,zero,8045fc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8045e8:	e0bfff17 	ldw	r2,-4(fp)
  8045ec:	00c01804 	movi	r3,96
  8045f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8045f4:	0005883a 	mov	r2,zero
  8045f8:	00002706 	br	804698 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8045fc:	0005303a 	rdctl	r2,status
  804600:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804604:	e0fffd17 	ldw	r3,-12(fp)
  804608:	00bfff84 	movi	r2,-2
  80460c:	1884703a 	and	r2,r3,r2
  804610:	1001703a 	wrctl	status,r2
  
  return context;
  804614:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804618:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80461c:	e0bffe17 	ldw	r2,-8(fp)
  804620:	10800417 	ldw	r2,16(r2)
  804624:	10001426 	beq	r2,zero,804678 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  804628:	e0bffe17 	ldw	r2,-8(fp)
  80462c:	10800117 	ldw	r2,4(r2)
  804630:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  804634:	e0bffb17 	ldw	r2,-20(fp)
  804638:	10c00017 	ldw	r3,0(r2)
  80463c:	e0bffe17 	ldw	r2,-8(fp)
  804640:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  804644:	e0bffe17 	ldw	r2,-8(fp)
  804648:	10800417 	ldw	r2,16(r2)
  80464c:	10ffffc4 	addi	r3,r2,-1
  804650:	e0bffe17 	ldw	r2,-8(fp)
  804654:	10c00415 	stw	r3,16(r2)
  804658:	e0bff917 	ldw	r2,-28(fp)
  80465c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804660:	e0bffa17 	ldw	r2,-24(fp)
  804664:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  804668:	e0bfff17 	ldw	r2,-4(fp)
  80466c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  804670:	e0bffb17 	ldw	r2,-20(fp)
  804674:	00000806 	br	804698 <OSMemGet+0xe0>
  804678:	e0bff917 	ldw	r2,-28(fp)
  80467c:	e0bffc15 	stw	r2,-16(fp)
  804680:	e0bffc17 	ldw	r2,-16(fp)
  804684:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  804688:	e0bfff17 	ldw	r2,-4(fp)
  80468c:	00c01744 	movi	r3,93
  804690:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  804694:	0005883a 	mov	r2,zero
}
  804698:	e037883a 	mov	sp,fp
  80469c:	df000017 	ldw	fp,0(sp)
  8046a0:	dec00104 	addi	sp,sp,4
  8046a4:	f800283a 	ret

008046a8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8046a8:	defff704 	addi	sp,sp,-36
  8046ac:	dfc00815 	stw	ra,32(sp)
  8046b0:	df000715 	stw	fp,28(sp)
  8046b4:	df000704 	addi	fp,sp,28
  8046b8:	e13ffd15 	stw	r4,-12(fp)
  8046bc:	e17ffe15 	stw	r5,-8(fp)
  8046c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8046c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8046c8:	e0bfff17 	ldw	r2,-4(fp)
  8046cc:	1000021e 	bne	r2,zero,8046d8 <OSMemNameGet+0x30>
        return (0);
  8046d0:	0005883a 	mov	r2,zero
  8046d4:	00002b06 	br	804784 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8046d8:	e0bffd17 	ldw	r2,-12(fp)
  8046dc:	1000051e 	bne	r2,zero,8046f4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8046e0:	e0bfff17 	ldw	r2,-4(fp)
  8046e4:	00c01804 	movi	r3,96
  8046e8:	10c00005 	stb	r3,0(r2)
        return (0);
  8046ec:	0005883a 	mov	r2,zero
  8046f0:	00002406 	br	804784 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8046f4:	e0bffe17 	ldw	r2,-8(fp)
  8046f8:	1000051e 	bne	r2,zero,804710 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  8046fc:	e0bfff17 	ldw	r2,-4(fp)
  804700:	00c00304 	movi	r3,12
  804704:	10c00005 	stb	r3,0(r2)
        return (0);
  804708:	0005883a 	mov	r2,zero
  80470c:	00001d06 	br	804784 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  804710:	d0a11703 	ldbu	r2,-31652(gp)
  804714:	10803fcc 	andi	r2,r2,255
  804718:	10000526 	beq	r2,zero,804730 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
  80471c:	e0bfff17 	ldw	r2,-4(fp)
  804720:	00c00444 	movi	r3,17
  804724:	10c00005 	stb	r3,0(r2)
        return (0);
  804728:	0005883a 	mov	r2,zero
  80472c:	00001506 	br	804784 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804730:	0005303a 	rdctl	r2,status
  804734:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804738:	e0fffb17 	ldw	r3,-20(fp)
  80473c:	00bfff84 	movi	r2,-2
  804740:	1884703a 	and	r2,r3,r2
  804744:	1001703a 	wrctl	status,r2
  
  return context;
  804748:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  80474c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  804750:	e0bffd17 	ldw	r2,-12(fp)
  804754:	10800504 	addi	r2,r2,20
  804758:	100b883a 	mov	r5,r2
  80475c:	e13ffe17 	ldw	r4,-8(fp)
  804760:	08025b00 	call	8025b0 <OS_StrCopy>
  804764:	e0bffa05 	stb	r2,-24(fp)
  804768:	e0bff917 	ldw	r2,-28(fp)
  80476c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804770:	e0bffc17 	ldw	r2,-16(fp)
  804774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804778:	e0bfff17 	ldw	r2,-4(fp)
  80477c:	10000005 	stb	zero,0(r2)
    return (len);
  804780:	e0bffa03 	ldbu	r2,-24(fp)
}
  804784:	e037883a 	mov	sp,fp
  804788:	dfc00117 	ldw	ra,4(sp)
  80478c:	df000017 	ldw	fp,0(sp)
  804790:	dec00204 	addi	sp,sp,8
  804794:	f800283a 	ret

00804798 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  804798:	defff604 	addi	sp,sp,-40
  80479c:	dfc00915 	stw	ra,36(sp)
  8047a0:	df000815 	stw	fp,32(sp)
  8047a4:	df000804 	addi	fp,sp,32
  8047a8:	e13ffd15 	stw	r4,-12(fp)
  8047ac:	e17ffe15 	stw	r5,-8(fp)
  8047b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8047b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8047b8:	e0bfff17 	ldw	r2,-4(fp)
  8047bc:	10003526 	beq	r2,zero,804894 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  8047c0:	e0bffd17 	ldw	r2,-12(fp)
  8047c4:	1000041e 	bne	r2,zero,8047d8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  8047c8:	e0bfff17 	ldw	r2,-4(fp)
  8047cc:	00c01804 	movi	r3,96
  8047d0:	10c00005 	stb	r3,0(r2)
        return;
  8047d4:	00003006 	br	804898 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  8047d8:	e0bffe17 	ldw	r2,-8(fp)
  8047dc:	1000041e 	bne	r2,zero,8047f0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  8047e0:	e0bfff17 	ldw	r2,-4(fp)
  8047e4:	00c00304 	movi	r3,12
  8047e8:	10c00005 	stb	r3,0(r2)
        return;
  8047ec:	00002a06 	br	804898 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8047f0:	d0a11703 	ldbu	r2,-31652(gp)
  8047f4:	10803fcc 	andi	r2,r2,255
  8047f8:	10000426 	beq	r2,zero,80480c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  8047fc:	e0bfff17 	ldw	r2,-4(fp)
  804800:	00c00484 	movi	r3,18
  804804:	10c00005 	stb	r3,0(r2)
        return;
  804808:	00002306 	br	804898 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80480c:	0005303a 	rdctl	r2,status
  804810:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804814:	e0fffc17 	ldw	r3,-16(fp)
  804818:	00bfff84 	movi	r2,-2
  80481c:	1884703a 	and	r2,r3,r2
  804820:	1001703a 	wrctl	status,r2
  
  return context;
  804824:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804828:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80482c:	e13ffe17 	ldw	r4,-8(fp)
  804830:	08026240 	call	802624 <OS_StrLen>
  804834:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  804838:	e0bffa03 	ldbu	r2,-24(fp)
  80483c:	10800830 	cmpltui	r2,r2,32
  804840:	1000081e 	bne	r2,zero,804864 <OSMemNameSet+0xcc>
  804844:	e0bff817 	ldw	r2,-32(fp)
  804848:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80484c:	e0bff917 	ldw	r2,-28(fp)
  804850:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  804854:	e0bfff17 	ldw	r2,-4(fp)
  804858:	00c018c4 	movi	r3,99
  80485c:	10c00005 	stb	r3,0(r2)
        return;
  804860:	00000d06 	br	804898 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  804864:	e0bffd17 	ldw	r2,-12(fp)
  804868:	10800504 	addi	r2,r2,20
  80486c:	e17ffe17 	ldw	r5,-8(fp)
  804870:	1009883a 	mov	r4,r2
  804874:	08025b00 	call	8025b0 <OS_StrCopy>
  804878:	e0bff817 	ldw	r2,-32(fp)
  80487c:	e0bffb15 	stw	r2,-20(fp)
  804880:	e0bffb17 	ldw	r2,-20(fp)
  804884:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804888:	e0bfff17 	ldw	r2,-4(fp)
  80488c:	10000005 	stb	zero,0(r2)
  804890:	00000106 	br	804898 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  804894:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  804898:	e037883a 	mov	sp,fp
  80489c:	dfc00117 	ldw	ra,4(sp)
  8048a0:	df000017 	ldw	fp,0(sp)
  8048a4:	dec00204 	addi	sp,sp,8
  8048a8:	f800283a 	ret

008048ac <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  8048ac:	defff904 	addi	sp,sp,-28
  8048b0:	df000615 	stw	fp,24(sp)
  8048b4:	df000604 	addi	fp,sp,24
  8048b8:	e13ffe15 	stw	r4,-8(fp)
  8048bc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8048c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  8048c4:	e0bffe17 	ldw	r2,-8(fp)
  8048c8:	1000021e 	bne	r2,zero,8048d4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8048cc:	00801804 	movi	r2,96
  8048d0:	00002806 	br	804974 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  8048d4:	e0bfff17 	ldw	r2,-4(fp)
  8048d8:	1000021e 	bne	r2,zero,8048e4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  8048dc:	008017c4 	movi	r2,95
  8048e0:	00002406 	br	804974 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8048e4:	0005303a 	rdctl	r2,status
  8048e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8048ec:	e0fffd17 	ldw	r3,-12(fp)
  8048f0:	00bfff84 	movi	r2,-2
  8048f4:	1884703a 	and	r2,r3,r2
  8048f8:	1001703a 	wrctl	status,r2
  
  return context;
  8048fc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  804900:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  804904:	e0bffe17 	ldw	r2,-8(fp)
  804908:	10c00417 	ldw	r3,16(r2)
  80490c:	e0bffe17 	ldw	r2,-8(fp)
  804910:	10800317 	ldw	r2,12(r2)
  804914:	18800636 	bltu	r3,r2,804930 <OSMemPut+0x84>
  804918:	e0bffa17 	ldw	r2,-24(fp)
  80491c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804920:	e0bffb17 	ldw	r2,-20(fp)
  804924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  804928:	00801784 	movi	r2,94
  80492c:	00001106 	br	804974 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  804930:	e0bffe17 	ldw	r2,-8(fp)
  804934:	10c00117 	ldw	r3,4(r2)
  804938:	e0bfff17 	ldw	r2,-4(fp)
  80493c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  804940:	e0bffe17 	ldw	r2,-8(fp)
  804944:	e0ffff17 	ldw	r3,-4(fp)
  804948:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80494c:	e0bffe17 	ldw	r2,-8(fp)
  804950:	10800417 	ldw	r2,16(r2)
  804954:	10c00044 	addi	r3,r2,1
  804958:	e0bffe17 	ldw	r2,-8(fp)
  80495c:	10c00415 	stw	r3,16(r2)
  804960:	e0bffa17 	ldw	r2,-24(fp)
  804964:	e0bffc15 	stw	r2,-16(fp)
  804968:	e0bffc17 	ldw	r2,-16(fp)
  80496c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  804970:	0005883a 	mov	r2,zero
}
  804974:	e037883a 	mov	sp,fp
  804978:	df000017 	ldw	fp,0(sp)
  80497c:	dec00104 	addi	sp,sp,4
  804980:	f800283a 	ret

00804984 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  804984:	defffa04 	addi	sp,sp,-24
  804988:	df000515 	stw	fp,20(sp)
  80498c:	df000504 	addi	fp,sp,20
  804990:	e13ffe15 	stw	r4,-8(fp)
  804994:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804998:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80499c:	e0bffe17 	ldw	r2,-8(fp)
  8049a0:	1000021e 	bne	r2,zero,8049ac <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  8049a4:	00801804 	movi	r2,96
  8049a8:	00002c06 	br	804a5c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  8049ac:	e0bfff17 	ldw	r2,-4(fp)
  8049b0:	1000021e 	bne	r2,zero,8049bc <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  8049b4:	00801844 	movi	r2,97
  8049b8:	00002806 	br	804a5c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8049bc:	0005303a 	rdctl	r2,status
  8049c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8049c4:	e0fffc17 	ldw	r3,-16(fp)
  8049c8:	00bfff84 	movi	r2,-2
  8049cc:	1884703a 	and	r2,r3,r2
  8049d0:	1001703a 	wrctl	status,r2
  
  return context;
  8049d4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8049d8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  8049dc:	e0bffe17 	ldw	r2,-8(fp)
  8049e0:	10c00017 	ldw	r3,0(r2)
  8049e4:	e0bfff17 	ldw	r2,-4(fp)
  8049e8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  8049ec:	e0bffe17 	ldw	r2,-8(fp)
  8049f0:	10c00117 	ldw	r3,4(r2)
  8049f4:	e0bfff17 	ldw	r2,-4(fp)
  8049f8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  8049fc:	e0bffe17 	ldw	r2,-8(fp)
  804a00:	10c00217 	ldw	r3,8(r2)
  804a04:	e0bfff17 	ldw	r2,-4(fp)
  804a08:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  804a0c:	e0bffe17 	ldw	r2,-8(fp)
  804a10:	10c00317 	ldw	r3,12(r2)
  804a14:	e0bfff17 	ldw	r2,-4(fp)
  804a18:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  804a1c:	e0bffe17 	ldw	r2,-8(fp)
  804a20:	10c00417 	ldw	r3,16(r2)
  804a24:	e0bfff17 	ldw	r2,-4(fp)
  804a28:	10c00415 	stw	r3,16(r2)
  804a2c:	e0bffb17 	ldw	r2,-20(fp)
  804a30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a34:	e0bffd17 	ldw	r2,-12(fp)
  804a38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  804a3c:	e0bfff17 	ldw	r2,-4(fp)
  804a40:	10c00317 	ldw	r3,12(r2)
  804a44:	e0bfff17 	ldw	r2,-4(fp)
  804a48:	10800417 	ldw	r2,16(r2)
  804a4c:	1887c83a 	sub	r3,r3,r2
  804a50:	e0bfff17 	ldw	r2,-4(fp)
  804a54:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  804a58:	0005883a 	mov	r2,zero
}
  804a5c:	e037883a 	mov	sp,fp
  804a60:	df000017 	ldw	fp,0(sp)
  804a64:	dec00104 	addi	sp,sp,4
  804a68:	f800283a 	ret

00804a6c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  804a6c:	defffc04 	addi	sp,sp,-16
  804a70:	dfc00315 	stw	ra,12(sp)
  804a74:	df000215 	stw	fp,8(sp)
  804a78:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  804a7c:	01430c04 	movi	r5,3120
  804a80:	01002074 	movhi	r4,129
  804a84:	213a4004 	addi	r4,r4,-5888
  804a88:	08023b00 	call	8023b0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  804a8c:	00802074 	movhi	r2,129
  804a90:	10ba4004 	addi	r2,r2,-5888
  804a94:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  804a98:	e03fff0d 	sth	zero,-4(fp)
  804a9c:	00001606 	br	804af8 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  804aa0:	e0bfff0b 	ldhu	r2,-4(fp)
  804aa4:	10800044 	addi	r2,r2,1
  804aa8:	01400d04 	movi	r5,52
  804aac:	1009883a 	mov	r4,r2
  804ab0:	0809c740 	call	809c74 <__mulsi3>
  804ab4:	1007883a 	mov	r3,r2
  804ab8:	00802074 	movhi	r2,129
  804abc:	10ba4004 	addi	r2,r2,-5888
  804ac0:	1887883a 	add	r3,r3,r2
  804ac4:	e0bffe17 	ldw	r2,-8(fp)
  804ac8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  804acc:	e0bffe17 	ldw	r2,-8(fp)
  804ad0:	00c00fc4 	movi	r3,63
  804ad4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  804ad8:	e0bffe17 	ldw	r2,-8(fp)
  804adc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  804ae0:	e0bffe17 	ldw	r2,-8(fp)
  804ae4:	10800d04 	addi	r2,r2,52
  804ae8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  804aec:	e0bfff0b 	ldhu	r2,-4(fp)
  804af0:	10800044 	addi	r2,r2,1
  804af4:	e0bfff0d 	sth	r2,-4(fp)
  804af8:	e0bfff0b 	ldhu	r2,-4(fp)
  804afc:	10800ef0 	cmpltui	r2,r2,59
  804b00:	103fe71e 	bne	r2,zero,804aa0 <__alt_mem_onchip_memory2_0+0xff800aa0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  804b04:	e0bffe17 	ldw	r2,-8(fp)
  804b08:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  804b0c:	e0bffe17 	ldw	r2,-8(fp)
  804b10:	00c00fc4 	movi	r3,63
  804b14:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  804b18:	e0bffe17 	ldw	r2,-8(fp)
  804b1c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  804b20:	00802074 	movhi	r2,129
  804b24:	10ba4004 	addi	r2,r2,-5888
  804b28:	d0a11215 	stw	r2,-31672(gp)
#endif
}
  804b2c:	0001883a 	nop
  804b30:	e037883a 	mov	sp,fp
  804b34:	dfc00117 	ldw	ra,4(sp)
  804b38:	df000017 	ldw	fp,0(sp)
  804b3c:	dec00204 	addi	sp,sp,8
  804b40:	f800283a 	ret

00804b44 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  804b44:	defff804 	addi	sp,sp,-32
  804b48:	df000715 	stw	fp,28(sp)
  804b4c:	df000704 	addi	fp,sp,28
  804b50:	e13ffe15 	stw	r4,-8(fp)
  804b54:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804b58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  804b5c:	e0bfff17 	ldw	r2,-4(fp)
  804b60:	1000021e 	bne	r2,zero,804b6c <OSQAccept+0x28>
        return ((void *)0);
  804b64:	0005883a 	mov	r2,zero
  804b68:	00004206 	br	804c74 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  804b6c:	e0bffe17 	ldw	r2,-8(fp)
  804b70:	1000051e 	bne	r2,zero,804b88 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  804b74:	e0bfff17 	ldw	r2,-4(fp)
  804b78:	00c00104 	movi	r3,4
  804b7c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804b80:	0005883a 	mov	r2,zero
  804b84:	00003b06 	br	804c74 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  804b88:	e0bffe17 	ldw	r2,-8(fp)
  804b8c:	10800003 	ldbu	r2,0(r2)
  804b90:	10803fcc 	andi	r2,r2,255
  804b94:	108000a0 	cmpeqi	r2,r2,2
  804b98:	1000051e 	bne	r2,zero,804bb0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  804b9c:	e0bfff17 	ldw	r2,-4(fp)
  804ba0:	00c00044 	movi	r3,1
  804ba4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  804ba8:	0005883a 	mov	r2,zero
  804bac:	00003106 	br	804c74 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804bb0:	0005303a 	rdctl	r2,status
  804bb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804bb8:	e0fffd17 	ldw	r3,-12(fp)
  804bbc:	00bfff84 	movi	r2,-2
  804bc0:	1884703a 	and	r2,r3,r2
  804bc4:	1001703a 	wrctl	status,r2
  
  return context;
  804bc8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  804bcc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  804bd0:	e0bffe17 	ldw	r2,-8(fp)
  804bd4:	10800117 	ldw	r2,4(r2)
  804bd8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  804bdc:	e0bffc17 	ldw	r2,-16(fp)
  804be0:	1080058b 	ldhu	r2,22(r2)
  804be4:	10bfffcc 	andi	r2,r2,65535
  804be8:	10001926 	beq	r2,zero,804c50 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  804bec:	e0bffc17 	ldw	r2,-16(fp)
  804bf0:	10800417 	ldw	r2,16(r2)
  804bf4:	11000104 	addi	r4,r2,4
  804bf8:	e0fffc17 	ldw	r3,-16(fp)
  804bfc:	19000415 	stw	r4,16(r3)
  804c00:	10800017 	ldw	r2,0(r2)
  804c04:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  804c08:	e0bffc17 	ldw	r2,-16(fp)
  804c0c:	1080058b 	ldhu	r2,22(r2)
  804c10:	10bfffc4 	addi	r2,r2,-1
  804c14:	1007883a 	mov	r3,r2
  804c18:	e0bffc17 	ldw	r2,-16(fp)
  804c1c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  804c20:	e0bffc17 	ldw	r2,-16(fp)
  804c24:	10c00417 	ldw	r3,16(r2)
  804c28:	e0bffc17 	ldw	r2,-16(fp)
  804c2c:	10800217 	ldw	r2,8(r2)
  804c30:	1880041e 	bne	r3,r2,804c44 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  804c34:	e0bffc17 	ldw	r2,-16(fp)
  804c38:	10c00117 	ldw	r3,4(r2)
  804c3c:	e0bffc17 	ldw	r2,-16(fp)
  804c40:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  804c44:	e0bfff17 	ldw	r2,-4(fp)
  804c48:	10000005 	stb	zero,0(r2)
  804c4c:	00000406 	br	804c60 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  804c50:	e0bfff17 	ldw	r2,-4(fp)
  804c54:	00c007c4 	movi	r3,31
  804c58:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  804c5c:	e03ff915 	stw	zero,-28(fp)
  804c60:	e0bffa17 	ldw	r2,-24(fp)
  804c64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c68:	e0bffb17 	ldw	r2,-20(fp)
  804c6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  804c70:	e0bff917 	ldw	r2,-28(fp)
}
  804c74:	e037883a 	mov	sp,fp
  804c78:	df000017 	ldw	fp,0(sp)
  804c7c:	dec00104 	addi	sp,sp,4
  804c80:	f800283a 	ret

00804c84 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  804c84:	defff404 	addi	sp,sp,-48
  804c88:	dfc00b15 	stw	ra,44(sp)
  804c8c:	df000a15 	stw	fp,40(sp)
  804c90:	df000a04 	addi	fp,sp,40
  804c94:	e13ffe15 	stw	r4,-8(fp)
  804c98:	2805883a 	mov	r2,r5
  804c9c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  804ca0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  804ca4:	d0a11703 	ldbu	r2,-31652(gp)
  804ca8:	10803fcc 	andi	r2,r2,255
  804cac:	10000226 	beq	r2,zero,804cb8 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  804cb0:	0005883a 	mov	r2,zero
  804cb4:	00005906 	br	804e1c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804cb8:	0005303a 	rdctl	r2,status
  804cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804cc0:	e0fffd17 	ldw	r3,-12(fp)
  804cc4:	00bfff84 	movi	r2,-2
  804cc8:	1884703a 	and	r2,r3,r2
  804ccc:	1001703a 	wrctl	status,r2
  
  return context;
  804cd0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  804cd4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  804cd8:	d0a11617 	ldw	r2,-31656(gp)
  804cdc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  804ce0:	d0a11617 	ldw	r2,-31656(gp)
  804ce4:	10000326 	beq	r2,zero,804cf4 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  804ce8:	d0a11617 	ldw	r2,-31656(gp)
  804cec:	10800117 	ldw	r2,4(r2)
  804cf0:	d0a11615 	stw	r2,-31656(gp)
  804cf4:	e0bff717 	ldw	r2,-36(fp)
  804cf8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804cfc:	e0bff817 	ldw	r2,-32(fp)
  804d00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  804d04:	e0bff617 	ldw	r2,-40(fp)
  804d08:	10004326 	beq	r2,zero,804e18 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804d0c:	0005303a 	rdctl	r2,status
  804d10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804d14:	e0fff917 	ldw	r3,-28(fp)
  804d18:	00bfff84 	movi	r2,-2
  804d1c:	1884703a 	and	r2,r3,r2
  804d20:	1001703a 	wrctl	status,r2
  
  return context;
  804d24:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  804d28:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  804d2c:	d0a11417 	ldw	r2,-31664(gp)
  804d30:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  804d34:	e0bffb17 	ldw	r2,-20(fp)
  804d38:	10002d26 	beq	r2,zero,804df0 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  804d3c:	d0a11417 	ldw	r2,-31664(gp)
  804d40:	10800017 	ldw	r2,0(r2)
  804d44:	d0a11415 	stw	r2,-31664(gp)
  804d48:	e0bff717 	ldw	r2,-36(fp)
  804d4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804d50:	e0bffa17 	ldw	r2,-24(fp)
  804d54:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  804d58:	e0bffb17 	ldw	r2,-20(fp)
  804d5c:	e0fffe17 	ldw	r3,-8(fp)
  804d60:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  804d64:	e0bfff0b 	ldhu	r2,-4(fp)
  804d68:	1085883a 	add	r2,r2,r2
  804d6c:	1085883a 	add	r2,r2,r2
  804d70:	1007883a 	mov	r3,r2
  804d74:	e0bffe17 	ldw	r2,-8(fp)
  804d78:	10c7883a 	add	r3,r2,r3
  804d7c:	e0bffb17 	ldw	r2,-20(fp)
  804d80:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  804d84:	e0bffb17 	ldw	r2,-20(fp)
  804d88:	e0fffe17 	ldw	r3,-8(fp)
  804d8c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  804d90:	e0bffb17 	ldw	r2,-20(fp)
  804d94:	e0fffe17 	ldw	r3,-8(fp)
  804d98:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  804d9c:	e0bffb17 	ldw	r2,-20(fp)
  804da0:	e0ffff0b 	ldhu	r3,-4(fp)
  804da4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  804da8:	e0bffb17 	ldw	r2,-20(fp)
  804dac:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  804db0:	e0bff617 	ldw	r2,-40(fp)
  804db4:	00c00084 	movi	r3,2
  804db8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  804dbc:	e0bff617 	ldw	r2,-40(fp)
  804dc0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  804dc4:	e0bff617 	ldw	r2,-40(fp)
  804dc8:	e0fffb17 	ldw	r3,-20(fp)
  804dcc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  804dd0:	e0bff617 	ldw	r2,-40(fp)
  804dd4:	00c00fc4 	movi	r3,63
  804dd8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  804ddc:	e0bff617 	ldw	r2,-40(fp)
  804de0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  804de4:	e13ff617 	ldw	r4,-40(fp)
  804de8:	0801fd00 	call	801fd0 <OS_EventWaitListInit>
  804dec:	00000a06 	br	804e18 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  804df0:	d0e11617 	ldw	r3,-31656(gp)
  804df4:	e0bff617 	ldw	r2,-40(fp)
  804df8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  804dfc:	e0bff617 	ldw	r2,-40(fp)
  804e00:	d0a11615 	stw	r2,-31656(gp)
  804e04:	e0bff717 	ldw	r2,-36(fp)
  804e08:	e0bffc15 	stw	r2,-16(fp)
  804e0c:	e0bffc17 	ldw	r2,-16(fp)
  804e10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  804e14:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
  804e18:	e0bff617 	ldw	r2,-40(fp)
}
  804e1c:	e037883a 	mov	sp,fp
  804e20:	dfc00117 	ldw	ra,4(sp)
  804e24:	df000017 	ldw	fp,0(sp)
  804e28:	dec00204 	addi	sp,sp,8
  804e2c:	f800283a 	ret

00804e30 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  804e30:	defff204 	addi	sp,sp,-56
  804e34:	dfc00d15 	stw	ra,52(sp)
  804e38:	df000c15 	stw	fp,48(sp)
  804e3c:	df000c04 	addi	fp,sp,48
  804e40:	e13ffd15 	stw	r4,-12(fp)
  804e44:	2805883a 	mov	r2,r5
  804e48:	e1bfff15 	stw	r6,-4(fp)
  804e4c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  804e50:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  804e54:	e0bfff17 	ldw	r2,-4(fp)
  804e58:	1000021e 	bne	r2,zero,804e64 <OSQDel+0x34>
        return (pevent);
  804e5c:	e0bffd17 	ldw	r2,-12(fp)
  804e60:	00008e06 	br	80509c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  804e64:	e0bffd17 	ldw	r2,-12(fp)
  804e68:	1000051e 	bne	r2,zero,804e80 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  804e6c:	e0bfff17 	ldw	r2,-4(fp)
  804e70:	00c00104 	movi	r3,4
  804e74:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804e78:	e0bffd17 	ldw	r2,-12(fp)
  804e7c:	00008706 	br	80509c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  804e80:	e0bffd17 	ldw	r2,-12(fp)
  804e84:	10800003 	ldbu	r2,0(r2)
  804e88:	10803fcc 	andi	r2,r2,255
  804e8c:	108000a0 	cmpeqi	r2,r2,2
  804e90:	1000051e 	bne	r2,zero,804ea8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  804e94:	e0bfff17 	ldw	r2,-4(fp)
  804e98:	00c00044 	movi	r3,1
  804e9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804ea0:	e0bffd17 	ldw	r2,-12(fp)
  804ea4:	00007d06 	br	80509c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  804ea8:	d0a11703 	ldbu	r2,-31652(gp)
  804eac:	10803fcc 	andi	r2,r2,255
  804eb0:	10000526 	beq	r2,zero,804ec8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  804eb4:	e0bfff17 	ldw	r2,-4(fp)
  804eb8:	00c003c4 	movi	r3,15
  804ebc:	10c00005 	stb	r3,0(r2)
        return (pevent);
  804ec0:	e0bffd17 	ldw	r2,-12(fp)
  804ec4:	00007506 	br	80509c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ec8:	0005303a 	rdctl	r2,status
  804ecc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ed0:	e0fffc17 	ldw	r3,-16(fp)
  804ed4:	00bfff84 	movi	r2,-2
  804ed8:	1884703a 	and	r2,r3,r2
  804edc:	1001703a 	wrctl	status,r2
  
  return context;
  804ee0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  804ee4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  804ee8:	e0bffd17 	ldw	r2,-12(fp)
  804eec:	10800283 	ldbu	r2,10(r2)
  804ef0:	10803fcc 	andi	r2,r2,255
  804ef4:	10000326 	beq	r2,zero,804f04 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  804ef8:	00800044 	movi	r2,1
  804efc:	e0bff405 	stb	r2,-48(fp)
  804f00:	00000106 	br	804f08 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  804f04:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
  804f08:	e0bffe03 	ldbu	r2,-8(fp)
  804f0c:	10000326 	beq	r2,zero,804f1c <OSQDel+0xec>
  804f10:	10800060 	cmpeqi	r2,r2,1
  804f14:	1000301e 	bne	r2,zero,804fd8 <OSQDel+0x1a8>
  804f18:	00005506 	br	805070 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  804f1c:	e0bff403 	ldbu	r2,-48(fp)
  804f20:	10001e1e 	bne	r2,zero,804f9c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  804f24:	e0bffd17 	ldw	r2,-12(fp)
  804f28:	00c00fc4 	movi	r3,63
  804f2c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  804f30:	e0bffd17 	ldw	r2,-12(fp)
  804f34:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  804f38:	e0bffd17 	ldw	r2,-12(fp)
  804f3c:	10800117 	ldw	r2,4(r2)
  804f40:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  804f44:	d0e11417 	ldw	r3,-31664(gp)
  804f48:	e0bff817 	ldw	r2,-32(fp)
  804f4c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  804f50:	e0bff817 	ldw	r2,-32(fp)
  804f54:	d0a11415 	stw	r2,-31664(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  804f58:	e0bffd17 	ldw	r2,-12(fp)
  804f5c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  804f60:	d0e11617 	ldw	r3,-31656(gp)
  804f64:	e0bffd17 	ldw	r2,-12(fp)
  804f68:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  804f6c:	e0bffd17 	ldw	r2,-12(fp)
  804f70:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  804f74:	e0bffd17 	ldw	r2,-12(fp)
  804f78:	d0a11615 	stw	r2,-31656(gp)
  804f7c:	e0bff617 	ldw	r2,-40(fp)
  804f80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804f84:	e0bff717 	ldw	r2,-36(fp)
  804f88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  804f8c:	e0bfff17 	ldw	r2,-4(fp)
  804f90:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  804f94:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  804f98:	00003f06 	br	805098 <OSQDel+0x268>
  804f9c:	e0bff617 	ldw	r2,-40(fp)
  804fa0:	e0bff915 	stw	r2,-28(fp)
  804fa4:	e0bff917 	ldw	r2,-28(fp)
  804fa8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  804fac:	e0bfff17 	ldw	r2,-4(fp)
  804fb0:	00c01244 	movi	r3,73
  804fb4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  804fb8:	e0bffd17 	ldw	r2,-12(fp)
  804fbc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
  804fc0:	00003506 	br	805098 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  804fc4:	000f883a 	mov	r7,zero
  804fc8:	01800104 	movi	r6,4
  804fcc:	000b883a 	mov	r5,zero
  804fd0:	e13ffd17 	ldw	r4,-12(fp)
  804fd4:	0801a200 	call	801a20 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  804fd8:	e0bffd17 	ldw	r2,-12(fp)
  804fdc:	10800283 	ldbu	r2,10(r2)
  804fe0:	10803fcc 	andi	r2,r2,255
  804fe4:	103ff71e 	bne	r2,zero,804fc4 <__alt_mem_onchip_memory2_0+0xff800fc4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  804fe8:	e0bffd17 	ldw	r2,-12(fp)
  804fec:	00c00fc4 	movi	r3,63
  804ff0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  804ff4:	e0bffd17 	ldw	r2,-12(fp)
  804ff8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  804ffc:	e0bffd17 	ldw	r2,-12(fp)
  805000:	10800117 	ldw	r2,4(r2)
  805004:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  805008:	d0e11417 	ldw	r3,-31664(gp)
  80500c:	e0bff817 	ldw	r2,-32(fp)
  805010:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  805014:	e0bff817 	ldw	r2,-32(fp)
  805018:	d0a11415 	stw	r2,-31664(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80501c:	e0bffd17 	ldw	r2,-12(fp)
  805020:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  805024:	d0e11617 	ldw	r3,-31656(gp)
  805028:	e0bffd17 	ldw	r2,-12(fp)
  80502c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  805030:	e0bffd17 	ldw	r2,-12(fp)
  805034:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  805038:	e0bffd17 	ldw	r2,-12(fp)
  80503c:	d0a11615 	stw	r2,-31656(gp)
  805040:	e0bff617 	ldw	r2,-40(fp)
  805044:	e0bffa15 	stw	r2,-24(fp)
  805048:	e0bffa17 	ldw	r2,-24(fp)
  80504c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  805050:	e0bff403 	ldbu	r2,-48(fp)
  805054:	10800058 	cmpnei	r2,r2,1
  805058:	1000011e 	bne	r2,zero,805060 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80505c:	080246c0 	call	80246c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  805060:	e0bfff17 	ldw	r2,-4(fp)
  805064:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  805068:	e03ff515 	stw	zero,-44(fp)
             break;
  80506c:	00000a06 	br	805098 <OSQDel+0x268>
  805070:	e0bff617 	ldw	r2,-40(fp)
  805074:	e0bffb15 	stw	r2,-20(fp)
  805078:	e0bffb17 	ldw	r2,-20(fp)
  80507c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  805080:	e0bfff17 	ldw	r2,-4(fp)
  805084:	00c001c4 	movi	r3,7
  805088:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  80508c:	e0bffd17 	ldw	r2,-12(fp)
  805090:	e0bff515 	stw	r2,-44(fp)
             break;
  805094:	0001883a 	nop
    }
    return (pevent_return);
  805098:	e0bff517 	ldw	r2,-44(fp)
}
  80509c:	e037883a 	mov	sp,fp
  8050a0:	dfc00117 	ldw	ra,4(sp)
  8050a4:	df000017 	ldw	fp,0(sp)
  8050a8:	dec00204 	addi	sp,sp,8
  8050ac:	f800283a 	ret

008050b0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  8050b0:	defffa04 	addi	sp,sp,-24
  8050b4:	df000515 	stw	fp,20(sp)
  8050b8:	df000504 	addi	fp,sp,20
  8050bc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8050c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8050c4:	e0bfff17 	ldw	r2,-4(fp)
  8050c8:	1000021e 	bne	r2,zero,8050d4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  8050cc:	00800104 	movi	r2,4
  8050d0:	00002106 	br	805158 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8050d4:	e0bfff17 	ldw	r2,-4(fp)
  8050d8:	10800003 	ldbu	r2,0(r2)
  8050dc:	10803fcc 	andi	r2,r2,255
  8050e0:	108000a0 	cmpeqi	r2,r2,2
  8050e4:	1000021e 	bne	r2,zero,8050f0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  8050e8:	00800044 	movi	r2,1
  8050ec:	00001a06 	br	805158 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8050f0:	0005303a 	rdctl	r2,status
  8050f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8050f8:	e0fffd17 	ldw	r3,-12(fp)
  8050fc:	00bfff84 	movi	r2,-2
  805100:	1884703a 	and	r2,r3,r2
  805104:	1001703a 	wrctl	status,r2
  
  return context;
  805108:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80510c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  805110:	e0bfff17 	ldw	r2,-4(fp)
  805114:	10800117 	ldw	r2,4(r2)
  805118:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
  80511c:	e0bffc17 	ldw	r2,-16(fp)
  805120:	10c00117 	ldw	r3,4(r2)
  805124:	e0bffc17 	ldw	r2,-16(fp)
  805128:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80512c:	e0bffc17 	ldw	r2,-16(fp)
  805130:	10c00117 	ldw	r3,4(r2)
  805134:	e0bffc17 	ldw	r2,-16(fp)
  805138:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80513c:	e0bffc17 	ldw	r2,-16(fp)
  805140:	1000058d 	sth	zero,22(r2)
  805144:	e0bffb17 	ldw	r2,-20(fp)
  805148:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80514c:	e0bffe17 	ldw	r2,-8(fp)
  805150:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805154:	0005883a 	mov	r2,zero
}
  805158:	e037883a 	mov	sp,fp
  80515c:	df000017 	ldw	fp,0(sp)
  805160:	dec00104 	addi	sp,sp,4
  805164:	f800283a 	ret

00805168 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  805168:	defff304 	addi	sp,sp,-52
  80516c:	dfc00c15 	stw	ra,48(sp)
  805170:	df000b15 	stw	fp,44(sp)
  805174:	df000b04 	addi	fp,sp,44
  805178:	e13ffd15 	stw	r4,-12(fp)
  80517c:	2805883a 	mov	r2,r5
  805180:	e1bfff15 	stw	r6,-4(fp)
  805184:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  805188:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80518c:	e0bfff17 	ldw	r2,-4(fp)
  805190:	1000021e 	bne	r2,zero,80519c <OSQPend+0x34>
        return ((void *)0);
  805194:	0005883a 	mov	r2,zero
  805198:	00009106 	br	8053e0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80519c:	e0bffd17 	ldw	r2,-12(fp)
  8051a0:	1000051e 	bne	r2,zero,8051b8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  8051a4:	e0bfff17 	ldw	r2,-4(fp)
  8051a8:	00c00104 	movi	r3,4
  8051ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8051b0:	0005883a 	mov	r2,zero
  8051b4:	00008a06 	br	8053e0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  8051b8:	e0bffd17 	ldw	r2,-12(fp)
  8051bc:	10800003 	ldbu	r2,0(r2)
  8051c0:	10803fcc 	andi	r2,r2,255
  8051c4:	108000a0 	cmpeqi	r2,r2,2
  8051c8:	1000051e 	bne	r2,zero,8051e0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  8051cc:	e0bfff17 	ldw	r2,-4(fp)
  8051d0:	00c00044 	movi	r3,1
  8051d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8051d8:	0005883a 	mov	r2,zero
  8051dc:	00008006 	br	8053e0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  8051e0:	d0a11703 	ldbu	r2,-31652(gp)
  8051e4:	10803fcc 	andi	r2,r2,255
  8051e8:	10000526 	beq	r2,zero,805200 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  8051ec:	e0bfff17 	ldw	r2,-4(fp)
  8051f0:	00c00084 	movi	r3,2
  8051f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  8051f8:	0005883a 	mov	r2,zero
  8051fc:	00007806 	br	8053e0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  805200:	d0a10903 	ldbu	r2,-31708(gp)
  805204:	10803fcc 	andi	r2,r2,255
  805208:	10000526 	beq	r2,zero,805220 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80520c:	e0bfff17 	ldw	r2,-4(fp)
  805210:	00c00344 	movi	r3,13
  805214:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  805218:	0005883a 	mov	r2,zero
  80521c:	00007006 	br	8053e0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805220:	0005303a 	rdctl	r2,status
  805224:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805228:	e0fffc17 	ldw	r3,-16(fp)
  80522c:	00bfff84 	movi	r2,-2
  805230:	1884703a 	and	r2,r3,r2
  805234:	1001703a 	wrctl	status,r2
  
  return context;
  805238:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  80523c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  805240:	e0bffd17 	ldw	r2,-12(fp)
  805244:	10800117 	ldw	r2,4(r2)
  805248:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80524c:	e0bff817 	ldw	r2,-32(fp)
  805250:	1080058b 	ldhu	r2,22(r2)
  805254:	10bfffcc 	andi	r2,r2,65535
  805258:	10001e26 	beq	r2,zero,8052d4 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80525c:	e0bff817 	ldw	r2,-32(fp)
  805260:	10800417 	ldw	r2,16(r2)
  805264:	11000104 	addi	r4,r2,4
  805268:	e0fff817 	ldw	r3,-32(fp)
  80526c:	19000415 	stw	r4,16(r3)
  805270:	10800017 	ldw	r2,0(r2)
  805274:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  805278:	e0bff817 	ldw	r2,-32(fp)
  80527c:	1080058b 	ldhu	r2,22(r2)
  805280:	10bfffc4 	addi	r2,r2,-1
  805284:	1007883a 	mov	r3,r2
  805288:	e0bff817 	ldw	r2,-32(fp)
  80528c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  805290:	e0bff817 	ldw	r2,-32(fp)
  805294:	10c00417 	ldw	r3,16(r2)
  805298:	e0bff817 	ldw	r2,-32(fp)
  80529c:	10800217 	ldw	r2,8(r2)
  8052a0:	1880041e 	bne	r3,r2,8052b4 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
  8052a4:	e0bff817 	ldw	r2,-32(fp)
  8052a8:	10c00117 	ldw	r3,4(r2)
  8052ac:	e0bff817 	ldw	r2,-32(fp)
  8052b0:	10c00415 	stw	r3,16(r2)
  8052b4:	e0bff617 	ldw	r2,-40(fp)
  8052b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8052bc:	e0bff717 	ldw	r2,-36(fp)
  8052c0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  8052c4:	e0bfff17 	ldw	r2,-4(fp)
  8052c8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  8052cc:	e0bff517 	ldw	r2,-44(fp)
  8052d0:	00004306 	br	8053e0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  8052d4:	d0a11817 	ldw	r2,-31648(gp)
  8052d8:	d0e11817 	ldw	r3,-31648(gp)
  8052dc:	18c00c03 	ldbu	r3,48(r3)
  8052e0:	18c00114 	ori	r3,r3,4
  8052e4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8052e8:	d0a11817 	ldw	r2,-31648(gp)
  8052ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  8052f0:	d0a11817 	ldw	r2,-31648(gp)
  8052f4:	e0fffe0b 	ldhu	r3,-8(fp)
  8052f8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  8052fc:	e13ffd17 	ldw	r4,-12(fp)
  805300:	0801bb80 	call	801bb8 <OS_EventTaskWait>
  805304:	e0bff617 	ldw	r2,-40(fp)
  805308:	e0bffb15 	stw	r2,-20(fp)
  80530c:	e0bffb17 	ldw	r2,-20(fp)
  805310:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  805314:	080246c0 	call	80246c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805318:	0005303a 	rdctl	r2,status
  80531c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805320:	e0fff917 	ldw	r3,-28(fp)
  805324:	00bfff84 	movi	r2,-2
  805328:	1884703a 	and	r2,r3,r2
  80532c:	1001703a 	wrctl	status,r2
  
  return context;
  805330:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  805334:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  805338:	d0a11817 	ldw	r2,-31648(gp)
  80533c:	10800c43 	ldbu	r2,49(r2)
  805340:	10803fcc 	andi	r2,r2,255
  805344:	10000326 	beq	r2,zero,805354 <OSQPend+0x1ec>
  805348:	108000a0 	cmpeqi	r2,r2,2
  80534c:	1000071e 	bne	r2,zero,80536c <OSQPend+0x204>
  805350:	00000b06 	br	805380 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  805354:	d0a11817 	ldw	r2,-31648(gp)
  805358:	10800917 	ldw	r2,36(r2)
  80535c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
  805360:	e0bfff17 	ldw	r2,-4(fp)
  805364:	10000005 	stb	zero,0(r2)
             break;
  805368:	00000e06 	br	8053a4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80536c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  805370:	e0bfff17 	ldw	r2,-4(fp)
  805374:	00c00384 	movi	r3,14
  805378:	10c00005 	stb	r3,0(r2)
             break;
  80537c:	00000906 	br	8053a4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  805380:	d0a11817 	ldw	r2,-31648(gp)
  805384:	e17ffd17 	ldw	r5,-12(fp)
  805388:	1009883a 	mov	r4,r2
  80538c:	0801e180 	call	801e18 <OS_EventTaskRemove>
             pmsg = (void *)0;
  805390:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  805394:	e0bfff17 	ldw	r2,-4(fp)
  805398:	00c00284 	movi	r3,10
  80539c:	10c00005 	stb	r3,0(r2)
             break;
  8053a0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8053a4:	d0a11817 	ldw	r2,-31648(gp)
  8053a8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8053ac:	d0a11817 	ldw	r2,-31648(gp)
  8053b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8053b4:	d0a11817 	ldw	r2,-31648(gp)
  8053b8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8053bc:	d0a11817 	ldw	r2,-31648(gp)
  8053c0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8053c4:	d0a11817 	ldw	r2,-31648(gp)
  8053c8:	10000915 	stw	zero,36(r2)
  8053cc:	e0bff617 	ldw	r2,-40(fp)
  8053d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8053d4:	e0bffa17 	ldw	r2,-24(fp)
  8053d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  8053dc:	e0bff517 	ldw	r2,-44(fp)
}
  8053e0:	e037883a 	mov	sp,fp
  8053e4:	dfc00117 	ldw	ra,4(sp)
  8053e8:	df000017 	ldw	fp,0(sp)
  8053ec:	dec00204 	addi	sp,sp,8
  8053f0:	f800283a 	ret

008053f4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8053f4:	defff604 	addi	sp,sp,-40
  8053f8:	dfc00915 	stw	ra,36(sp)
  8053fc:	df000815 	stw	fp,32(sp)
  805400:	df000804 	addi	fp,sp,32
  805404:	e13ffd15 	stw	r4,-12(fp)
  805408:	2805883a 	mov	r2,r5
  80540c:	e1bfff15 	stw	r6,-4(fp)
  805410:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805414:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  805418:	e0bfff17 	ldw	r2,-4(fp)
  80541c:	1000021e 	bne	r2,zero,805428 <OSQPendAbort+0x34>
        return (0);
  805420:	0005883a 	mov	r2,zero
  805424:	00004906 	br	80554c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  805428:	e0bffd17 	ldw	r2,-12(fp)
  80542c:	1000051e 	bne	r2,zero,805444 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  805430:	e0bfff17 	ldw	r2,-4(fp)
  805434:	00c00104 	movi	r3,4
  805438:	10c00005 	stb	r3,0(r2)
        return (0);
  80543c:	0005883a 	mov	r2,zero
  805440:	00004206 	br	80554c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  805444:	e0bffd17 	ldw	r2,-12(fp)
  805448:	10800003 	ldbu	r2,0(r2)
  80544c:	10803fcc 	andi	r2,r2,255
  805450:	108000a0 	cmpeqi	r2,r2,2
  805454:	1000051e 	bne	r2,zero,80546c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  805458:	e0bfff17 	ldw	r2,-4(fp)
  80545c:	00c00044 	movi	r3,1
  805460:	10c00005 	stb	r3,0(r2)
        return (0);
  805464:	0005883a 	mov	r2,zero
  805468:	00003806 	br	80554c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80546c:	0005303a 	rdctl	r2,status
  805470:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805474:	e0fffc17 	ldw	r3,-16(fp)
  805478:	00bfff84 	movi	r2,-2
  80547c:	1884703a 	and	r2,r3,r2
  805480:	1001703a 	wrctl	status,r2
  
  return context;
  805484:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805488:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80548c:	e0bffd17 	ldw	r2,-12(fp)
  805490:	10800283 	ldbu	r2,10(r2)
  805494:	10803fcc 	andi	r2,r2,255
  805498:	10002526 	beq	r2,zero,805530 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
  80549c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  8054a0:	e0bffe03 	ldbu	r2,-8(fp)
  8054a4:	10800060 	cmpeqi	r2,r2,1
  8054a8:	10000e26 	beq	r2,zero,8054e4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8054ac:	00000806 	br	8054d0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8054b0:	01c00084 	movi	r7,2
  8054b4:	01800104 	movi	r6,4
  8054b8:	000b883a 	mov	r5,zero
  8054bc:	e13ffd17 	ldw	r4,-12(fp)
  8054c0:	0801a200 	call	801a20 <OS_EventTaskRdy>
                     nbr_tasks++;
  8054c4:	e0bff803 	ldbu	r2,-32(fp)
  8054c8:	10800044 	addi	r2,r2,1
  8054cc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  8054d0:	e0bffd17 	ldw	r2,-12(fp)
  8054d4:	10800283 	ldbu	r2,10(r2)
  8054d8:	10803fcc 	andi	r2,r2,255
  8054dc:	103ff41e 	bne	r2,zero,8054b0 <__alt_mem_onchip_memory2_0+0xff8014b0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8054e0:	00000906 	br	805508 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8054e4:	01c00084 	movi	r7,2
  8054e8:	01800104 	movi	r6,4
  8054ec:	000b883a 	mov	r5,zero
  8054f0:	e13ffd17 	ldw	r4,-12(fp)
  8054f4:	0801a200 	call	801a20 <OS_EventTaskRdy>
                 nbr_tasks++;
  8054f8:	e0bff803 	ldbu	r2,-32(fp)
  8054fc:	10800044 	addi	r2,r2,1
  805500:	e0bff805 	stb	r2,-32(fp)
                 break;
  805504:	0001883a 	nop
  805508:	e0bff917 	ldw	r2,-28(fp)
  80550c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805510:	e0bffa17 	ldw	r2,-24(fp)
  805514:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  805518:	080246c0 	call	80246c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80551c:	e0bfff17 	ldw	r2,-4(fp)
  805520:	00c00384 	movi	r3,14
  805524:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  805528:	e0bff803 	ldbu	r2,-32(fp)
  80552c:	00000706 	br	80554c <OSQPendAbort+0x158>
  805530:	e0bff917 	ldw	r2,-28(fp)
  805534:	e0bffb15 	stw	r2,-20(fp)
  805538:	e0bffb17 	ldw	r2,-20(fp)
  80553c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805540:	e0bfff17 	ldw	r2,-4(fp)
  805544:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  805548:	0005883a 	mov	r2,zero
}
  80554c:	e037883a 	mov	sp,fp
  805550:	dfc00117 	ldw	ra,4(sp)
  805554:	df000017 	ldw	fp,0(sp)
  805558:	dec00204 	addi	sp,sp,8
  80555c:	f800283a 	ret

00805560 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  805560:	defff604 	addi	sp,sp,-40
  805564:	dfc00915 	stw	ra,36(sp)
  805568:	df000815 	stw	fp,32(sp)
  80556c:	df000804 	addi	fp,sp,32
  805570:	e13ffe15 	stw	r4,-8(fp)
  805574:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  805578:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80557c:	e0bffe17 	ldw	r2,-8(fp)
  805580:	1000021e 	bne	r2,zero,80558c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  805584:	00800104 	movi	r2,4
  805588:	00004a06 	br	8056b4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80558c:	e0bffe17 	ldw	r2,-8(fp)
  805590:	10800003 	ldbu	r2,0(r2)
  805594:	10803fcc 	andi	r2,r2,255
  805598:	108000a0 	cmpeqi	r2,r2,2
  80559c:	1000021e 	bne	r2,zero,8055a8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  8055a0:	00800044 	movi	r2,1
  8055a4:	00004306 	br	8056b4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8055a8:	0005303a 	rdctl	r2,status
  8055ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8055b0:	e0fffd17 	ldw	r3,-12(fp)
  8055b4:	00bfff84 	movi	r2,-2
  8055b8:	1884703a 	and	r2,r3,r2
  8055bc:	1001703a 	wrctl	status,r2
  
  return context;
  8055c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  8055c4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  8055c8:	e0bffe17 	ldw	r2,-8(fp)
  8055cc:	10800283 	ldbu	r2,10(r2)
  8055d0:	10803fcc 	andi	r2,r2,255
  8055d4:	10000c26 	beq	r2,zero,805608 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8055d8:	000f883a 	mov	r7,zero
  8055dc:	01800104 	movi	r6,4
  8055e0:	e17fff17 	ldw	r5,-4(fp)
  8055e4:	e13ffe17 	ldw	r4,-8(fp)
  8055e8:	0801a200 	call	801a20 <OS_EventTaskRdy>
  8055ec:	e0bff817 	ldw	r2,-32(fp)
  8055f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8055f4:	e0bff917 	ldw	r2,-28(fp)
  8055f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  8055fc:	080246c0 	call	80246c <OS_Sched>
        return (OS_ERR_NONE);
  805600:	0005883a 	mov	r2,zero
  805604:	00002b06 	br	8056b4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  805608:	e0bffe17 	ldw	r2,-8(fp)
  80560c:	10800117 	ldw	r2,4(r2)
  805610:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  805614:	e0bffb17 	ldw	r2,-20(fp)
  805618:	10c0058b 	ldhu	r3,22(r2)
  80561c:	e0bffb17 	ldw	r2,-20(fp)
  805620:	1080050b 	ldhu	r2,20(r2)
  805624:	18ffffcc 	andi	r3,r3,65535
  805628:	10bfffcc 	andi	r2,r2,65535
  80562c:	18800636 	bltu	r3,r2,805648 <OSQPost+0xe8>
  805630:	e0bff817 	ldw	r2,-32(fp)
  805634:	e0bffa15 	stw	r2,-24(fp)
  805638:	e0bffa17 	ldw	r2,-24(fp)
  80563c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  805640:	00800784 	movi	r2,30
  805644:	00001b06 	br	8056b4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  805648:	e0bffb17 	ldw	r2,-20(fp)
  80564c:	10800317 	ldw	r2,12(r2)
  805650:	11000104 	addi	r4,r2,4
  805654:	e0fffb17 	ldw	r3,-20(fp)
  805658:	19000315 	stw	r4,12(r3)
  80565c:	e0ffff17 	ldw	r3,-4(fp)
  805660:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  805664:	e0bffb17 	ldw	r2,-20(fp)
  805668:	1080058b 	ldhu	r2,22(r2)
  80566c:	10800044 	addi	r2,r2,1
  805670:	1007883a 	mov	r3,r2
  805674:	e0bffb17 	ldw	r2,-20(fp)
  805678:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80567c:	e0bffb17 	ldw	r2,-20(fp)
  805680:	10c00317 	ldw	r3,12(r2)
  805684:	e0bffb17 	ldw	r2,-20(fp)
  805688:	10800217 	ldw	r2,8(r2)
  80568c:	1880041e 	bne	r3,r2,8056a0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
  805690:	e0bffb17 	ldw	r2,-20(fp)
  805694:	10c00117 	ldw	r3,4(r2)
  805698:	e0bffb17 	ldw	r2,-20(fp)
  80569c:	10c00315 	stw	r3,12(r2)
  8056a0:	e0bff817 	ldw	r2,-32(fp)
  8056a4:	e0bffc15 	stw	r2,-16(fp)
  8056a8:	e0bffc17 	ldw	r2,-16(fp)
  8056ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8056b0:	0005883a 	mov	r2,zero
}
  8056b4:	e037883a 	mov	sp,fp
  8056b8:	dfc00117 	ldw	ra,4(sp)
  8056bc:	df000017 	ldw	fp,0(sp)
  8056c0:	dec00204 	addi	sp,sp,8
  8056c4:	f800283a 	ret

008056c8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  8056c8:	defff604 	addi	sp,sp,-40
  8056cc:	dfc00915 	stw	ra,36(sp)
  8056d0:	df000815 	stw	fp,32(sp)
  8056d4:	df000804 	addi	fp,sp,32
  8056d8:	e13ffe15 	stw	r4,-8(fp)
  8056dc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8056e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8056e4:	e0bffe17 	ldw	r2,-8(fp)
  8056e8:	1000021e 	bne	r2,zero,8056f4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  8056ec:	00800104 	movi	r2,4
  8056f0:	00004c06 	br	805824 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8056f4:	e0bffe17 	ldw	r2,-8(fp)
  8056f8:	10800003 	ldbu	r2,0(r2)
  8056fc:	10803fcc 	andi	r2,r2,255
  805700:	108000a0 	cmpeqi	r2,r2,2
  805704:	1000021e 	bne	r2,zero,805710 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  805708:	00800044 	movi	r2,1
  80570c:	00004506 	br	805824 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805710:	0005303a 	rdctl	r2,status
  805714:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805718:	e0fffd17 	ldw	r3,-12(fp)
  80571c:	00bfff84 	movi	r2,-2
  805720:	1884703a 	and	r2,r3,r2
  805724:	1001703a 	wrctl	status,r2
  
  return context;
  805728:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  80572c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  805730:	e0bffe17 	ldw	r2,-8(fp)
  805734:	10800283 	ldbu	r2,10(r2)
  805738:	10803fcc 	andi	r2,r2,255
  80573c:	10000c26 	beq	r2,zero,805770 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  805740:	000f883a 	mov	r7,zero
  805744:	01800104 	movi	r6,4
  805748:	e17fff17 	ldw	r5,-4(fp)
  80574c:	e13ffe17 	ldw	r4,-8(fp)
  805750:	0801a200 	call	801a20 <OS_EventTaskRdy>
  805754:	e0bff817 	ldw	r2,-32(fp)
  805758:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80575c:	e0bff917 	ldw	r2,-28(fp)
  805760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  805764:	080246c0 	call	80246c <OS_Sched>
        return (OS_ERR_NONE);
  805768:	0005883a 	mov	r2,zero
  80576c:	00002d06 	br	805824 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  805770:	e0bffe17 	ldw	r2,-8(fp)
  805774:	10800117 	ldw	r2,4(r2)
  805778:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80577c:	e0bffb17 	ldw	r2,-20(fp)
  805780:	10c0058b 	ldhu	r3,22(r2)
  805784:	e0bffb17 	ldw	r2,-20(fp)
  805788:	1080050b 	ldhu	r2,20(r2)
  80578c:	18ffffcc 	andi	r3,r3,65535
  805790:	10bfffcc 	andi	r2,r2,65535
  805794:	18800636 	bltu	r3,r2,8057b0 <OSQPostFront+0xe8>
  805798:	e0bff817 	ldw	r2,-32(fp)
  80579c:	e0bffa15 	stw	r2,-24(fp)
  8057a0:	e0bffa17 	ldw	r2,-24(fp)
  8057a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8057a8:	00800784 	movi	r2,30
  8057ac:	00001d06 	br	805824 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  8057b0:	e0bffb17 	ldw	r2,-20(fp)
  8057b4:	10c00417 	ldw	r3,16(r2)
  8057b8:	e0bffb17 	ldw	r2,-20(fp)
  8057bc:	10800117 	ldw	r2,4(r2)
  8057c0:	1880041e 	bne	r3,r2,8057d4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
  8057c4:	e0bffb17 	ldw	r2,-20(fp)
  8057c8:	10c00217 	ldw	r3,8(r2)
  8057cc:	e0bffb17 	ldw	r2,-20(fp)
  8057d0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  8057d4:	e0bffb17 	ldw	r2,-20(fp)
  8057d8:	10800417 	ldw	r2,16(r2)
  8057dc:	10ffff04 	addi	r3,r2,-4
  8057e0:	e0bffb17 	ldw	r2,-20(fp)
  8057e4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  8057e8:	e0bffb17 	ldw	r2,-20(fp)
  8057ec:	10800417 	ldw	r2,16(r2)
  8057f0:	e0ffff17 	ldw	r3,-4(fp)
  8057f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  8057f8:	e0bffb17 	ldw	r2,-20(fp)
  8057fc:	1080058b 	ldhu	r2,22(r2)
  805800:	10800044 	addi	r2,r2,1
  805804:	1007883a 	mov	r3,r2
  805808:	e0bffb17 	ldw	r2,-20(fp)
  80580c:	10c0058d 	sth	r3,22(r2)
  805810:	e0bff817 	ldw	r2,-32(fp)
  805814:	e0bffc15 	stw	r2,-16(fp)
  805818:	e0bffc17 	ldw	r2,-16(fp)
  80581c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805820:	0005883a 	mov	r2,zero
}
  805824:	e037883a 	mov	sp,fp
  805828:	dfc00117 	ldw	ra,4(sp)
  80582c:	df000017 	ldw	fp,0(sp)
  805830:	dec00204 	addi	sp,sp,8
  805834:	f800283a 	ret

00805838 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  805838:	defff504 	addi	sp,sp,-44
  80583c:	dfc00a15 	stw	ra,40(sp)
  805840:	df000915 	stw	fp,36(sp)
  805844:	df000904 	addi	fp,sp,36
  805848:	e13ffd15 	stw	r4,-12(fp)
  80584c:	e17ffe15 	stw	r5,-8(fp)
  805850:	3005883a 	mov	r2,r6
  805854:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805858:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80585c:	e0bffd17 	ldw	r2,-12(fp)
  805860:	1000021e 	bne	r2,zero,80586c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  805864:	00800104 	movi	r2,4
  805868:	00007106 	br	805a30 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80586c:	e0bffd17 	ldw	r2,-12(fp)
  805870:	10800003 	ldbu	r2,0(r2)
  805874:	10803fcc 	andi	r2,r2,255
  805878:	108000a0 	cmpeqi	r2,r2,2
  80587c:	1000021e 	bne	r2,zero,805888 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  805880:	00800044 	movi	r2,1
  805884:	00006a06 	br	805a30 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805888:	0005303a 	rdctl	r2,status
  80588c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805890:	e0fffc17 	ldw	r3,-16(fp)
  805894:	00bfff84 	movi	r2,-2
  805898:	1884703a 	and	r2,r3,r2
  80589c:	1001703a 	wrctl	status,r2
  
  return context;
  8058a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8058a4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  8058a8:	e0bffd17 	ldw	r2,-12(fp)
  8058ac:	10800283 	ldbu	r2,10(r2)
  8058b0:	10803fcc 	andi	r2,r2,255
  8058b4:	10001d26 	beq	r2,zero,80592c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  8058b8:	e0bfff03 	ldbu	r2,-4(fp)
  8058bc:	1080004c 	andi	r2,r2,1
  8058c0:	10000b26 	beq	r2,zero,8058f0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8058c4:	00000506 	br	8058dc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8058c8:	000f883a 	mov	r7,zero
  8058cc:	01800104 	movi	r6,4
  8058d0:	e17ffe17 	ldw	r5,-8(fp)
  8058d4:	e13ffd17 	ldw	r4,-12(fp)
  8058d8:	0801a200 	call	801a20 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  8058dc:	e0bffd17 	ldw	r2,-12(fp)
  8058e0:	10800283 	ldbu	r2,10(r2)
  8058e4:	10803fcc 	andi	r2,r2,255
  8058e8:	103ff71e 	bne	r2,zero,8058c8 <__alt_mem_onchip_memory2_0+0xff8018c8>
  8058ec:	00000506 	br	805904 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8058f0:	000f883a 	mov	r7,zero
  8058f4:	01800104 	movi	r6,4
  8058f8:	e17ffe17 	ldw	r5,-8(fp)
  8058fc:	e13ffd17 	ldw	r4,-12(fp)
  805900:	0801a200 	call	801a20 <OS_EventTaskRdy>
  805904:	e0bff717 	ldw	r2,-36(fp)
  805908:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80590c:	e0bff817 	ldw	r2,-32(fp)
  805910:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  805914:	e0bfff03 	ldbu	r2,-4(fp)
  805918:	1080010c 	andi	r2,r2,4
  80591c:	1000011e 	bne	r2,zero,805924 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
  805920:	080246c0 	call	80246c <OS_Sched>
        }
        return (OS_ERR_NONE);
  805924:	0005883a 	mov	r2,zero
  805928:	00004106 	br	805a30 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80592c:	e0bffd17 	ldw	r2,-12(fp)
  805930:	10800117 	ldw	r2,4(r2)
  805934:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  805938:	e0bffa17 	ldw	r2,-24(fp)
  80593c:	10c0058b 	ldhu	r3,22(r2)
  805940:	e0bffa17 	ldw	r2,-24(fp)
  805944:	1080050b 	ldhu	r2,20(r2)
  805948:	18ffffcc 	andi	r3,r3,65535
  80594c:	10bfffcc 	andi	r2,r2,65535
  805950:	18800636 	bltu	r3,r2,80596c <OSQPostOpt+0x134>
  805954:	e0bff717 	ldw	r2,-36(fp)
  805958:	e0bff915 	stw	r2,-28(fp)
  80595c:	e0bff917 	ldw	r2,-28(fp)
  805960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  805964:	00800784 	movi	r2,30
  805968:	00003106 	br	805a30 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80596c:	e0bfff03 	ldbu	r2,-4(fp)
  805970:	1080008c 	andi	r2,r2,2
  805974:	10001326 	beq	r2,zero,8059c4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  805978:	e0bffa17 	ldw	r2,-24(fp)
  80597c:	10c00417 	ldw	r3,16(r2)
  805980:	e0bffa17 	ldw	r2,-24(fp)
  805984:	10800117 	ldw	r2,4(r2)
  805988:	1880041e 	bne	r3,r2,80599c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80598c:	e0bffa17 	ldw	r2,-24(fp)
  805990:	10c00217 	ldw	r3,8(r2)
  805994:	e0bffa17 	ldw	r2,-24(fp)
  805998:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80599c:	e0bffa17 	ldw	r2,-24(fp)
  8059a0:	10800417 	ldw	r2,16(r2)
  8059a4:	10ffff04 	addi	r3,r2,-4
  8059a8:	e0bffa17 	ldw	r2,-24(fp)
  8059ac:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  8059b0:	e0bffa17 	ldw	r2,-24(fp)
  8059b4:	10800417 	ldw	r2,16(r2)
  8059b8:	e0fffe17 	ldw	r3,-8(fp)
  8059bc:	10c00015 	stw	r3,0(r2)
  8059c0:	00001006 	br	805a04 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  8059c4:	e0bffa17 	ldw	r2,-24(fp)
  8059c8:	10800317 	ldw	r2,12(r2)
  8059cc:	11000104 	addi	r4,r2,4
  8059d0:	e0fffa17 	ldw	r3,-24(fp)
  8059d4:	19000315 	stw	r4,12(r3)
  8059d8:	e0fffe17 	ldw	r3,-8(fp)
  8059dc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  8059e0:	e0bffa17 	ldw	r2,-24(fp)
  8059e4:	10c00317 	ldw	r3,12(r2)
  8059e8:	e0bffa17 	ldw	r2,-24(fp)
  8059ec:	10800217 	ldw	r2,8(r2)
  8059f0:	1880041e 	bne	r3,r2,805a04 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
  8059f4:	e0bffa17 	ldw	r2,-24(fp)
  8059f8:	10c00117 	ldw	r3,4(r2)
  8059fc:	e0bffa17 	ldw	r2,-24(fp)
  805a00:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  805a04:	e0bffa17 	ldw	r2,-24(fp)
  805a08:	1080058b 	ldhu	r2,22(r2)
  805a0c:	10800044 	addi	r2,r2,1
  805a10:	1007883a 	mov	r3,r2
  805a14:	e0bffa17 	ldw	r2,-24(fp)
  805a18:	10c0058d 	sth	r3,22(r2)
  805a1c:	e0bff717 	ldw	r2,-36(fp)
  805a20:	e0bffb15 	stw	r2,-20(fp)
  805a24:	e0bffb17 	ldw	r2,-20(fp)
  805a28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805a2c:	0005883a 	mov	r2,zero
}
  805a30:	e037883a 	mov	sp,fp
  805a34:	dfc00117 	ldw	ra,4(sp)
  805a38:	df000017 	ldw	fp,0(sp)
  805a3c:	dec00204 	addi	sp,sp,8
  805a40:	f800283a 	ret

00805a44 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  805a44:	defff604 	addi	sp,sp,-40
  805a48:	df000915 	stw	fp,36(sp)
  805a4c:	df000904 	addi	fp,sp,36
  805a50:	e13ffe15 	stw	r4,-8(fp)
  805a54:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  805a58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  805a5c:	e0bffe17 	ldw	r2,-8(fp)
  805a60:	1000021e 	bne	r2,zero,805a6c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  805a64:	00800104 	movi	r2,4
  805a68:	00004906 	br	805b90 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  805a6c:	e0bfff17 	ldw	r2,-4(fp)
  805a70:	1000021e 	bne	r2,zero,805a7c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  805a74:	00800244 	movi	r2,9
  805a78:	00004506 	br	805b90 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  805a7c:	e0bffe17 	ldw	r2,-8(fp)
  805a80:	10800003 	ldbu	r2,0(r2)
  805a84:	10803fcc 	andi	r2,r2,255
  805a88:	108000a0 	cmpeqi	r2,r2,2
  805a8c:	1000021e 	bne	r2,zero,805a98 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  805a90:	00800044 	movi	r2,1
  805a94:	00003e06 	br	805b90 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a98:	0005303a 	rdctl	r2,status
  805a9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805aa0:	e0fffd17 	ldw	r3,-12(fp)
  805aa4:	00bfff84 	movi	r2,-2
  805aa8:	1884703a 	and	r2,r3,r2
  805aac:	1001703a 	wrctl	status,r2
  
  return context;
  805ab0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  805ab4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  805ab8:	e0bffe17 	ldw	r2,-8(fp)
  805abc:	10c00283 	ldbu	r3,10(r2)
  805ac0:	e0bfff17 	ldw	r2,-4(fp)
  805ac4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  805ac8:	e0bffe17 	ldw	r2,-8(fp)
  805acc:	108002c4 	addi	r2,r2,11
  805ad0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  805ad4:	e0bfff17 	ldw	r2,-4(fp)
  805ad8:	10800204 	addi	r2,r2,8
  805adc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805ae0:	e03ff705 	stb	zero,-36(fp)
  805ae4:	00000b06 	br	805b14 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
  805ae8:	e0bff917 	ldw	r2,-28(fp)
  805aec:	10c00044 	addi	r3,r2,1
  805af0:	e0fff915 	stw	r3,-28(fp)
  805af4:	e0fff817 	ldw	r3,-32(fp)
  805af8:	19000044 	addi	r4,r3,1
  805afc:	e13ff815 	stw	r4,-32(fp)
  805b00:	18c00003 	ldbu	r3,0(r3)
  805b04:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  805b08:	e0bff703 	ldbu	r2,-36(fp)
  805b0c:	10800044 	addi	r2,r2,1
  805b10:	e0bff705 	stb	r2,-36(fp)
  805b14:	e0bff703 	ldbu	r2,-36(fp)
  805b18:	108000f0 	cmpltui	r2,r2,3
  805b1c:	103ff21e 	bne	r2,zero,805ae8 <__alt_mem_onchip_memory2_0+0xff801ae8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  805b20:	e0bffe17 	ldw	r2,-8(fp)
  805b24:	10800117 	ldw	r2,4(r2)
  805b28:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  805b2c:	e0bffc17 	ldw	r2,-16(fp)
  805b30:	1080058b 	ldhu	r2,22(r2)
  805b34:	10bfffcc 	andi	r2,r2,65535
  805b38:	10000626 	beq	r2,zero,805b54 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  805b3c:	e0bffc17 	ldw	r2,-16(fp)
  805b40:	10800417 	ldw	r2,16(r2)
  805b44:	10c00017 	ldw	r3,0(r2)
  805b48:	e0bfff17 	ldw	r2,-4(fp)
  805b4c:	10c00015 	stw	r3,0(r2)
  805b50:	00000206 	br	805b5c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
  805b54:	e0bfff17 	ldw	r2,-4(fp)
  805b58:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  805b5c:	e0bffc17 	ldw	r2,-16(fp)
  805b60:	10c0058b 	ldhu	r3,22(r2)
  805b64:	e0bfff17 	ldw	r2,-4(fp)
  805b68:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  805b6c:	e0bffc17 	ldw	r2,-16(fp)
  805b70:	10c0050b 	ldhu	r3,20(r2)
  805b74:	e0bfff17 	ldw	r2,-4(fp)
  805b78:	10c0018d 	sth	r3,6(r2)
  805b7c:	e0bffa17 	ldw	r2,-24(fp)
  805b80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805b84:	e0bffb17 	ldw	r2,-20(fp)
  805b88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  805b8c:	0005883a 	mov	r2,zero
}
  805b90:	e037883a 	mov	sp,fp
  805b94:	df000017 	ldw	fp,0(sp)
  805b98:	dec00104 	addi	sp,sp,4
  805b9c:	f800283a 	ret

00805ba0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  805ba0:	defffb04 	addi	sp,sp,-20
  805ba4:	dfc00415 	stw	ra,16(sp)
  805ba8:	df000315 	stw	fp,12(sp)
  805bac:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  805bb0:	01407804 	movi	r5,480
  805bb4:	01002074 	movhi	r4,129
  805bb8:	213f4c04 	addi	r4,r4,-720
  805bbc:	08023b00 	call	8023b0 <OS_MemClr>
    pq1 = &OSQTbl[0];
  805bc0:	00802074 	movhi	r2,129
  805bc4:	10bf4c04 	addi	r2,r2,-720
  805bc8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  805bcc:	00802074 	movhi	r2,129
  805bd0:	10bf5204 	addi	r2,r2,-696
  805bd4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  805bd8:	e03ffd0d 	sth	zero,-12(fp)
  805bdc:	00000c06 	br	805c10 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  805be0:	e0bffe17 	ldw	r2,-8(fp)
  805be4:	e0ffff17 	ldw	r3,-4(fp)
  805be8:	10c00015 	stw	r3,0(r2)
        pq1++;
  805bec:	e0bffe17 	ldw	r2,-8(fp)
  805bf0:	10800604 	addi	r2,r2,24
  805bf4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  805bf8:	e0bfff17 	ldw	r2,-4(fp)
  805bfc:	10800604 	addi	r2,r2,24
  805c00:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  805c04:	e0bffd0b 	ldhu	r2,-12(fp)
  805c08:	10800044 	addi	r2,r2,1
  805c0c:	e0bffd0d 	sth	r2,-12(fp)
  805c10:	e0bffd0b 	ldhu	r2,-12(fp)
  805c14:	108004f0 	cmpltui	r2,r2,19
  805c18:	103ff11e 	bne	r2,zero,805be0 <__alt_mem_onchip_memory2_0+0xff801be0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  805c1c:	e0bffe17 	ldw	r2,-8(fp)
  805c20:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  805c24:	00802074 	movhi	r2,129
  805c28:	10bf4c04 	addi	r2,r2,-720
  805c2c:	d0a11415 	stw	r2,-31664(gp)
#endif
}
  805c30:	0001883a 	nop
  805c34:	e037883a 	mov	sp,fp
  805c38:	dfc00117 	ldw	ra,4(sp)
  805c3c:	df000017 	ldw	fp,0(sp)
  805c40:	dec00204 	addi	sp,sp,8
  805c44:	f800283a 	ret

00805c48 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  805c48:	defffa04 	addi	sp,sp,-24
  805c4c:	df000515 	stw	fp,20(sp)
  805c50:	df000504 	addi	fp,sp,20
  805c54:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  805c58:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  805c5c:	e0bfff17 	ldw	r2,-4(fp)
  805c60:	1000021e 	bne	r2,zero,805c6c <OSSemAccept+0x24>
        return (0);
  805c64:	0005883a 	mov	r2,zero
  805c68:	00001f06 	br	805ce8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805c6c:	e0bfff17 	ldw	r2,-4(fp)
  805c70:	10800003 	ldbu	r2,0(r2)
  805c74:	10803fcc 	andi	r2,r2,255
  805c78:	108000e0 	cmpeqi	r2,r2,3
  805c7c:	1000021e 	bne	r2,zero,805c88 <OSSemAccept+0x40>
        return (0);
  805c80:	0005883a 	mov	r2,zero
  805c84:	00001806 	br	805ce8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805c88:	0005303a 	rdctl	r2,status
  805c8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c90:	e0fffe17 	ldw	r3,-8(fp)
  805c94:	00bfff84 	movi	r2,-2
  805c98:	1884703a 	and	r2,r3,r2
  805c9c:	1001703a 	wrctl	status,r2
  
  return context;
  805ca0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  805ca4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
  805ca8:	e0bfff17 	ldw	r2,-4(fp)
  805cac:	1080020b 	ldhu	r2,8(r2)
  805cb0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  805cb4:	e0bffd0b 	ldhu	r2,-12(fp)
  805cb8:	10000626 	beq	r2,zero,805cd4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  805cbc:	e0bfff17 	ldw	r2,-4(fp)
  805cc0:	1080020b 	ldhu	r2,8(r2)
  805cc4:	10bfffc4 	addi	r2,r2,-1
  805cc8:	1007883a 	mov	r3,r2
  805ccc:	e0bfff17 	ldw	r2,-4(fp)
  805cd0:	10c0020d 	sth	r3,8(r2)
  805cd4:	e0bffb17 	ldw	r2,-20(fp)
  805cd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805cdc:	e0bffc17 	ldw	r2,-16(fp)
  805ce0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  805ce4:	e0bffd0b 	ldhu	r2,-12(fp)
}
  805ce8:	e037883a 	mov	sp,fp
  805cec:	df000017 	ldw	fp,0(sp)
  805cf0:	dec00104 	addi	sp,sp,4
  805cf4:	f800283a 	ret

00805cf8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  805cf8:	defff904 	addi	sp,sp,-28
  805cfc:	dfc00615 	stw	ra,24(sp)
  805d00:	df000515 	stw	fp,20(sp)
  805d04:	df000504 	addi	fp,sp,20
  805d08:	2005883a 	mov	r2,r4
  805d0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805d10:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  805d14:	d0a11703 	ldbu	r2,-31652(gp)
  805d18:	10803fcc 	andi	r2,r2,255
  805d1c:	10000226 	beq	r2,zero,805d28 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  805d20:	0005883a 	mov	r2,zero
  805d24:	00002506 	br	805dbc <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d28:	0005303a 	rdctl	r2,status
  805d2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d30:	e0fffe17 	ldw	r3,-8(fp)
  805d34:	00bfff84 	movi	r2,-2
  805d38:	1884703a 	and	r2,r3,r2
  805d3c:	1001703a 	wrctl	status,r2
  
  return context;
  805d40:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  805d44:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  805d48:	d0a11617 	ldw	r2,-31656(gp)
  805d4c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  805d50:	d0a11617 	ldw	r2,-31656(gp)
  805d54:	10000326 	beq	r2,zero,805d64 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  805d58:	d0a11617 	ldw	r2,-31656(gp)
  805d5c:	10800117 	ldw	r2,4(r2)
  805d60:	d0a11615 	stw	r2,-31656(gp)
  805d64:	e0bffb17 	ldw	r2,-20(fp)
  805d68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d6c:	e0bffc17 	ldw	r2,-16(fp)
  805d70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  805d74:	e0bffd17 	ldw	r2,-12(fp)
  805d78:	10000f26 	beq	r2,zero,805db8 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  805d7c:	e0bffd17 	ldw	r2,-12(fp)
  805d80:	00c000c4 	movi	r3,3
  805d84:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  805d88:	e0bffd17 	ldw	r2,-12(fp)
  805d8c:	e0ffff0b 	ldhu	r3,-4(fp)
  805d90:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  805d94:	e0bffd17 	ldw	r2,-12(fp)
  805d98:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  805d9c:	e0bffd17 	ldw	r2,-12(fp)
  805da0:	00c00fc4 	movi	r3,63
  805da4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  805da8:	e0bffd17 	ldw	r2,-12(fp)
  805dac:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  805db0:	e13ffd17 	ldw	r4,-12(fp)
  805db4:	0801fd00 	call	801fd0 <OS_EventWaitListInit>
    }
    return (pevent);
  805db8:	e0bffd17 	ldw	r2,-12(fp)
}
  805dbc:	e037883a 	mov	sp,fp
  805dc0:	dfc00117 	ldw	ra,4(sp)
  805dc4:	df000017 	ldw	fp,0(sp)
  805dc8:	dec00204 	addi	sp,sp,8
  805dcc:	f800283a 	ret

00805dd0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805dd0:	defff304 	addi	sp,sp,-52
  805dd4:	dfc00c15 	stw	ra,48(sp)
  805dd8:	df000b15 	stw	fp,44(sp)
  805ddc:	df000b04 	addi	fp,sp,44
  805de0:	e13ffd15 	stw	r4,-12(fp)
  805de4:	2805883a 	mov	r2,r5
  805de8:	e1bfff15 	stw	r6,-4(fp)
  805dec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  805df0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  805df4:	e0bfff17 	ldw	r2,-4(fp)
  805df8:	1000021e 	bne	r2,zero,805e04 <OSSemDel+0x34>
        return (pevent);
  805dfc:	e0bffd17 	ldw	r2,-12(fp)
  805e00:	00007e06 	br	805ffc <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  805e04:	e0bffd17 	ldw	r2,-12(fp)
  805e08:	1000051e 	bne	r2,zero,805e20 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  805e0c:	e0bfff17 	ldw	r2,-4(fp)
  805e10:	00c00104 	movi	r3,4
  805e14:	10c00005 	stb	r3,0(r2)
        return (pevent);
  805e18:	e0bffd17 	ldw	r2,-12(fp)
  805e1c:	00007706 	br	805ffc <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  805e20:	e0bffd17 	ldw	r2,-12(fp)
  805e24:	10800003 	ldbu	r2,0(r2)
  805e28:	10803fcc 	andi	r2,r2,255
  805e2c:	108000e0 	cmpeqi	r2,r2,3
  805e30:	1000051e 	bne	r2,zero,805e48 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  805e34:	e0bfff17 	ldw	r2,-4(fp)
  805e38:	00c00044 	movi	r3,1
  805e3c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  805e40:	e0bffd17 	ldw	r2,-12(fp)
  805e44:	00006d06 	br	805ffc <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  805e48:	d0a11703 	ldbu	r2,-31652(gp)
  805e4c:	10803fcc 	andi	r2,r2,255
  805e50:	10000526 	beq	r2,zero,805e68 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  805e54:	e0bfff17 	ldw	r2,-4(fp)
  805e58:	00c003c4 	movi	r3,15
  805e5c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  805e60:	e0bffd17 	ldw	r2,-12(fp)
  805e64:	00006506 	br	805ffc <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805e68:	0005303a 	rdctl	r2,status
  805e6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e70:	e0fffc17 	ldw	r3,-16(fp)
  805e74:	00bfff84 	movi	r2,-2
  805e78:	1884703a 	and	r2,r3,r2
  805e7c:	1001703a 	wrctl	status,r2
  
  return context;
  805e80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  805e84:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  805e88:	e0bffd17 	ldw	r2,-12(fp)
  805e8c:	10800283 	ldbu	r2,10(r2)
  805e90:	10803fcc 	andi	r2,r2,255
  805e94:	10000326 	beq	r2,zero,805ea4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  805e98:	00800044 	movi	r2,1
  805e9c:	e0bff505 	stb	r2,-44(fp)
  805ea0:	00000106 	br	805ea8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  805ea4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
  805ea8:	e0bffe03 	ldbu	r2,-8(fp)
  805eac:	10000326 	beq	r2,zero,805ebc <OSSemDel+0xec>
  805eb0:	10800060 	cmpeqi	r2,r2,1
  805eb4:	1000281e 	bne	r2,zero,805f58 <OSSemDel+0x188>
  805eb8:	00004506 	br	805fd0 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  805ebc:	e0bff503 	ldbu	r2,-44(fp)
  805ec0:	1000161e 	bne	r2,zero,805f1c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  805ec4:	e0bffd17 	ldw	r2,-12(fp)
  805ec8:	00c00fc4 	movi	r3,63
  805ecc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  805ed0:	e0bffd17 	ldw	r2,-12(fp)
  805ed4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  805ed8:	e0bffd17 	ldw	r2,-12(fp)
  805edc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  805ee0:	d0e11617 	ldw	r3,-31656(gp)
  805ee4:	e0bffd17 	ldw	r2,-12(fp)
  805ee8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  805eec:	e0bffd17 	ldw	r2,-12(fp)
  805ef0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  805ef4:	e0bffd17 	ldw	r2,-12(fp)
  805ef8:	d0a11615 	stw	r2,-31656(gp)
  805efc:	e0bff717 	ldw	r2,-36(fp)
  805f00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f04:	e0bff817 	ldw	r2,-32(fp)
  805f08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  805f0c:	e0bfff17 	ldw	r2,-4(fp)
  805f10:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  805f14:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  805f18:	00003706 	br	805ff8 <OSSemDel+0x228>
  805f1c:	e0bff717 	ldw	r2,-36(fp)
  805f20:	e0bff915 	stw	r2,-28(fp)
  805f24:	e0bff917 	ldw	r2,-28(fp)
  805f28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  805f2c:	e0bfff17 	ldw	r2,-4(fp)
  805f30:	00c01244 	movi	r3,73
  805f34:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  805f38:	e0bffd17 	ldw	r2,-12(fp)
  805f3c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
  805f40:	00002d06 	br	805ff8 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  805f44:	000f883a 	mov	r7,zero
  805f48:	01800044 	movi	r6,1
  805f4c:	000b883a 	mov	r5,zero
  805f50:	e13ffd17 	ldw	r4,-12(fp)
  805f54:	0801a200 	call	801a20 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  805f58:	e0bffd17 	ldw	r2,-12(fp)
  805f5c:	10800283 	ldbu	r2,10(r2)
  805f60:	10803fcc 	andi	r2,r2,255
  805f64:	103ff71e 	bne	r2,zero,805f44 <__alt_mem_onchip_memory2_0+0xff801f44>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  805f68:	e0bffd17 	ldw	r2,-12(fp)
  805f6c:	00c00fc4 	movi	r3,63
  805f70:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  805f74:	e0bffd17 	ldw	r2,-12(fp)
  805f78:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  805f7c:	e0bffd17 	ldw	r2,-12(fp)
  805f80:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  805f84:	d0e11617 	ldw	r3,-31656(gp)
  805f88:	e0bffd17 	ldw	r2,-12(fp)
  805f8c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  805f90:	e0bffd17 	ldw	r2,-12(fp)
  805f94:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  805f98:	e0bffd17 	ldw	r2,-12(fp)
  805f9c:	d0a11615 	stw	r2,-31656(gp)
  805fa0:	e0bff717 	ldw	r2,-36(fp)
  805fa4:	e0bffa15 	stw	r2,-24(fp)
  805fa8:	e0bffa17 	ldw	r2,-24(fp)
  805fac:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  805fb0:	e0bff503 	ldbu	r2,-44(fp)
  805fb4:	10800058 	cmpnei	r2,r2,1
  805fb8:	1000011e 	bne	r2,zero,805fc0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  805fbc:	080246c0 	call	80246c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  805fc0:	e0bfff17 	ldw	r2,-4(fp)
  805fc4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  805fc8:	e03ff615 	stw	zero,-40(fp)
             break;
  805fcc:	00000a06 	br	805ff8 <OSSemDel+0x228>
  805fd0:	e0bff717 	ldw	r2,-36(fp)
  805fd4:	e0bffb15 	stw	r2,-20(fp)
  805fd8:	e0bffb17 	ldw	r2,-20(fp)
  805fdc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  805fe0:	e0bfff17 	ldw	r2,-4(fp)
  805fe4:	00c001c4 	movi	r3,7
  805fe8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  805fec:	e0bffd17 	ldw	r2,-12(fp)
  805ff0:	e0bff615 	stw	r2,-40(fp)
             break;
  805ff4:	0001883a 	nop
    }
    return (pevent_return);
  805ff8:	e0bff617 	ldw	r2,-40(fp)
}
  805ffc:	e037883a 	mov	sp,fp
  806000:	dfc00117 	ldw	ra,4(sp)
  806004:	df000017 	ldw	fp,0(sp)
  806008:	dec00204 	addi	sp,sp,8
  80600c:	f800283a 	ret

00806010 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  806010:	defff504 	addi	sp,sp,-44
  806014:	dfc00a15 	stw	ra,40(sp)
  806018:	df000915 	stw	fp,36(sp)
  80601c:	df000904 	addi	fp,sp,36
  806020:	e13ffd15 	stw	r4,-12(fp)
  806024:	2805883a 	mov	r2,r5
  806028:	e1bfff15 	stw	r6,-4(fp)
  80602c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  806030:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  806034:	e0bfff17 	ldw	r2,-4(fp)
  806038:	10007226 	beq	r2,zero,806204 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80603c:	e0bffd17 	ldw	r2,-12(fp)
  806040:	1000041e 	bne	r2,zero,806054 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  806044:	e0bfff17 	ldw	r2,-4(fp)
  806048:	00c00104 	movi	r3,4
  80604c:	10c00005 	stb	r3,0(r2)
        return;
  806050:	00006d06 	br	806208 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  806054:	e0bffd17 	ldw	r2,-12(fp)
  806058:	10800003 	ldbu	r2,0(r2)
  80605c:	10803fcc 	andi	r2,r2,255
  806060:	108000e0 	cmpeqi	r2,r2,3
  806064:	1000041e 	bne	r2,zero,806078 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  806068:	e0bfff17 	ldw	r2,-4(fp)
  80606c:	00c00044 	movi	r3,1
  806070:	10c00005 	stb	r3,0(r2)
        return;
  806074:	00006406 	br	806208 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  806078:	d0a11703 	ldbu	r2,-31652(gp)
  80607c:	10803fcc 	andi	r2,r2,255
  806080:	10000426 	beq	r2,zero,806094 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  806084:	e0bfff17 	ldw	r2,-4(fp)
  806088:	00c00084 	movi	r3,2
  80608c:	10c00005 	stb	r3,0(r2)
        return;
  806090:	00005d06 	br	806208 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  806094:	d0a10903 	ldbu	r2,-31708(gp)
  806098:	10803fcc 	andi	r2,r2,255
  80609c:	10000426 	beq	r2,zero,8060b0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  8060a0:	e0bfff17 	ldw	r2,-4(fp)
  8060a4:	00c00344 	movi	r3,13
  8060a8:	10c00005 	stb	r3,0(r2)
        return;
  8060ac:	00005606 	br	806208 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8060b0:	0005303a 	rdctl	r2,status
  8060b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8060b8:	e0fffc17 	ldw	r3,-16(fp)
  8060bc:	00bfff84 	movi	r2,-2
  8060c0:	1884703a 	and	r2,r3,r2
  8060c4:	1001703a 	wrctl	status,r2
  
  return context;
  8060c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8060cc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  8060d0:	e0bffd17 	ldw	r2,-12(fp)
  8060d4:	1080020b 	ldhu	r2,8(r2)
  8060d8:	10bfffcc 	andi	r2,r2,65535
  8060dc:	10000d26 	beq	r2,zero,806114 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  8060e0:	e0bffd17 	ldw	r2,-12(fp)
  8060e4:	1080020b 	ldhu	r2,8(r2)
  8060e8:	10bfffc4 	addi	r2,r2,-1
  8060ec:	1007883a 	mov	r3,r2
  8060f0:	e0bffd17 	ldw	r2,-12(fp)
  8060f4:	10c0020d 	sth	r3,8(r2)
  8060f8:	e0bff717 	ldw	r2,-36(fp)
  8060fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806100:	e0bff817 	ldw	r2,-32(fp)
  806104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  806108:	e0bfff17 	ldw	r2,-4(fp)
  80610c:	10000005 	stb	zero,0(r2)
        return;
  806110:	00003d06 	br	806208 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  806114:	d0a11817 	ldw	r2,-31648(gp)
  806118:	d0e11817 	ldw	r3,-31648(gp)
  80611c:	18c00c03 	ldbu	r3,48(r3)
  806120:	18c00054 	ori	r3,r3,1
  806124:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  806128:	d0a11817 	ldw	r2,-31648(gp)
  80612c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  806130:	d0a11817 	ldw	r2,-31648(gp)
  806134:	e0fffe0b 	ldhu	r3,-8(fp)
  806138:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  80613c:	e13ffd17 	ldw	r4,-12(fp)
  806140:	0801bb80 	call	801bb8 <OS_EventTaskWait>
  806144:	e0bff717 	ldw	r2,-36(fp)
  806148:	e0bffb15 	stw	r2,-20(fp)
  80614c:	e0bffb17 	ldw	r2,-20(fp)
  806150:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  806154:	080246c0 	call	80246c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806158:	0005303a 	rdctl	r2,status
  80615c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806160:	e0fff917 	ldw	r3,-28(fp)
  806164:	00bfff84 	movi	r2,-2
  806168:	1884703a 	and	r2,r3,r2
  80616c:	1001703a 	wrctl	status,r2
  
  return context;
  806170:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
  806174:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  806178:	d0a11817 	ldw	r2,-31648(gp)
  80617c:	10800c43 	ldbu	r2,49(r2)
  806180:	10803fcc 	andi	r2,r2,255
  806184:	10000326 	beq	r2,zero,806194 <OSSemPend+0x184>
  806188:	108000a0 	cmpeqi	r2,r2,2
  80618c:	1000041e 	bne	r2,zero,8061a0 <OSSemPend+0x190>
  806190:	00000706 	br	8061b0 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  806194:	e0bfff17 	ldw	r2,-4(fp)
  806198:	10000005 	stb	zero,0(r2)
             break;
  80619c:	00000c06 	br	8061d0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  8061a0:	e0bfff17 	ldw	r2,-4(fp)
  8061a4:	00c00384 	movi	r3,14
  8061a8:	10c00005 	stb	r3,0(r2)
             break;
  8061ac:	00000806 	br	8061d0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  8061b0:	d0a11817 	ldw	r2,-31648(gp)
  8061b4:	e17ffd17 	ldw	r5,-12(fp)
  8061b8:	1009883a 	mov	r4,r2
  8061bc:	0801e180 	call	801e18 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  8061c0:	e0bfff17 	ldw	r2,-4(fp)
  8061c4:	00c00284 	movi	r3,10
  8061c8:	10c00005 	stb	r3,0(r2)
             break;
  8061cc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8061d0:	d0a11817 	ldw	r2,-31648(gp)
  8061d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8061d8:	d0a11817 	ldw	r2,-31648(gp)
  8061dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8061e0:	d0a11817 	ldw	r2,-31648(gp)
  8061e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8061e8:	d0a11817 	ldw	r2,-31648(gp)
  8061ec:	10000815 	stw	zero,32(r2)
  8061f0:	e0bff717 	ldw	r2,-36(fp)
  8061f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8061f8:	e0bffa17 	ldw	r2,-24(fp)
  8061fc:	1001703a 	wrctl	status,r2
  806200:	00000106 	br	806208 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  806204:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  806208:	e037883a 	mov	sp,fp
  80620c:	dfc00117 	ldw	ra,4(sp)
  806210:	df000017 	ldw	fp,0(sp)
  806214:	dec00204 	addi	sp,sp,8
  806218:	f800283a 	ret

0080621c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80621c:	defff604 	addi	sp,sp,-40
  806220:	dfc00915 	stw	ra,36(sp)
  806224:	df000815 	stw	fp,32(sp)
  806228:	df000804 	addi	fp,sp,32
  80622c:	e13ffd15 	stw	r4,-12(fp)
  806230:	2805883a 	mov	r2,r5
  806234:	e1bfff15 	stw	r6,-4(fp)
  806238:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80623c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  806240:	e0bfff17 	ldw	r2,-4(fp)
  806244:	1000021e 	bne	r2,zero,806250 <OSSemPendAbort+0x34>
        return (0);
  806248:	0005883a 	mov	r2,zero
  80624c:	00004906 	br	806374 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  806250:	e0bffd17 	ldw	r2,-12(fp)
  806254:	1000051e 	bne	r2,zero,80626c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  806258:	e0bfff17 	ldw	r2,-4(fp)
  80625c:	00c00104 	movi	r3,4
  806260:	10c00005 	stb	r3,0(r2)
        return (0);
  806264:	0005883a 	mov	r2,zero
  806268:	00004206 	br	806374 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  80626c:	e0bffd17 	ldw	r2,-12(fp)
  806270:	10800003 	ldbu	r2,0(r2)
  806274:	10803fcc 	andi	r2,r2,255
  806278:	108000e0 	cmpeqi	r2,r2,3
  80627c:	1000051e 	bne	r2,zero,806294 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  806280:	e0bfff17 	ldw	r2,-4(fp)
  806284:	00c00044 	movi	r3,1
  806288:	10c00005 	stb	r3,0(r2)
        return (0);
  80628c:	0005883a 	mov	r2,zero
  806290:	00003806 	br	806374 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806294:	0005303a 	rdctl	r2,status
  806298:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80629c:	e0fffc17 	ldw	r3,-16(fp)
  8062a0:	00bfff84 	movi	r2,-2
  8062a4:	1884703a 	and	r2,r3,r2
  8062a8:	1001703a 	wrctl	status,r2
  
  return context;
  8062ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8062b0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  8062b4:	e0bffd17 	ldw	r2,-12(fp)
  8062b8:	10800283 	ldbu	r2,10(r2)
  8062bc:	10803fcc 	andi	r2,r2,255
  8062c0:	10002526 	beq	r2,zero,806358 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
  8062c4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
  8062c8:	e0bffe03 	ldbu	r2,-8(fp)
  8062cc:	10800060 	cmpeqi	r2,r2,1
  8062d0:	10000e26 	beq	r2,zero,80630c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8062d4:	00000806 	br	8062f8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8062d8:	01c00084 	movi	r7,2
  8062dc:	01800044 	movi	r6,1
  8062e0:	000b883a 	mov	r5,zero
  8062e4:	e13ffd17 	ldw	r4,-12(fp)
  8062e8:	0801a200 	call	801a20 <OS_EventTaskRdy>
                     nbr_tasks++;
  8062ec:	e0bff803 	ldbu	r2,-32(fp)
  8062f0:	10800044 	addi	r2,r2,1
  8062f4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8062f8:	e0bffd17 	ldw	r2,-12(fp)
  8062fc:	10800283 	ldbu	r2,10(r2)
  806300:	10803fcc 	andi	r2,r2,255
  806304:	103ff41e 	bne	r2,zero,8062d8 <__alt_mem_onchip_memory2_0+0xff8022d8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  806308:	00000906 	br	806330 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  80630c:	01c00084 	movi	r7,2
  806310:	01800044 	movi	r6,1
  806314:	000b883a 	mov	r5,zero
  806318:	e13ffd17 	ldw	r4,-12(fp)
  80631c:	0801a200 	call	801a20 <OS_EventTaskRdy>
                 nbr_tasks++;
  806320:	e0bff803 	ldbu	r2,-32(fp)
  806324:	10800044 	addi	r2,r2,1
  806328:	e0bff805 	stb	r2,-32(fp)
                 break;
  80632c:	0001883a 	nop
  806330:	e0bff917 	ldw	r2,-28(fp)
  806334:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806338:	e0bffa17 	ldw	r2,-24(fp)
  80633c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  806340:	080246c0 	call	80246c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  806344:	e0bfff17 	ldw	r2,-4(fp)
  806348:	00c00384 	movi	r3,14
  80634c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  806350:	e0bff803 	ldbu	r2,-32(fp)
  806354:	00000706 	br	806374 <OSSemPendAbort+0x158>
  806358:	e0bff917 	ldw	r2,-28(fp)
  80635c:	e0bffb15 	stw	r2,-20(fp)
  806360:	e0bffb17 	ldw	r2,-20(fp)
  806364:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  806368:	e0bfff17 	ldw	r2,-4(fp)
  80636c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  806370:	0005883a 	mov	r2,zero
}
  806374:	e037883a 	mov	sp,fp
  806378:	dfc00117 	ldw	ra,4(sp)
  80637c:	df000017 	ldw	fp,0(sp)
  806380:	dec00204 	addi	sp,sp,8
  806384:	f800283a 	ret

00806388 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  806388:	defff804 	addi	sp,sp,-32
  80638c:	dfc00715 	stw	ra,28(sp)
  806390:	df000615 	stw	fp,24(sp)
  806394:	df000604 	addi	fp,sp,24
  806398:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80639c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8063a0:	e0bfff17 	ldw	r2,-4(fp)
  8063a4:	1000021e 	bne	r2,zero,8063b0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  8063a8:	00800104 	movi	r2,4
  8063ac:	00003506 	br	806484 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8063b0:	e0bfff17 	ldw	r2,-4(fp)
  8063b4:	10800003 	ldbu	r2,0(r2)
  8063b8:	10803fcc 	andi	r2,r2,255
  8063bc:	108000e0 	cmpeqi	r2,r2,3
  8063c0:	1000021e 	bne	r2,zero,8063cc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  8063c4:	00800044 	movi	r2,1
  8063c8:	00002e06 	br	806484 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8063cc:	0005303a 	rdctl	r2,status
  8063d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8063d4:	e0fffe17 	ldw	r3,-8(fp)
  8063d8:	00bfff84 	movi	r2,-2
  8063dc:	1884703a 	and	r2,r3,r2
  8063e0:	1001703a 	wrctl	status,r2
  
  return context;
  8063e4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8063e8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  8063ec:	e0bfff17 	ldw	r2,-4(fp)
  8063f0:	10800283 	ldbu	r2,10(r2)
  8063f4:	10803fcc 	andi	r2,r2,255
  8063f8:	10000c26 	beq	r2,zero,80642c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8063fc:	000f883a 	mov	r7,zero
  806400:	01800044 	movi	r6,1
  806404:	000b883a 	mov	r5,zero
  806408:	e13fff17 	ldw	r4,-4(fp)
  80640c:	0801a200 	call	801a20 <OS_EventTaskRdy>
  806410:	e0bffa17 	ldw	r2,-24(fp)
  806414:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806418:	e0bffb17 	ldw	r2,-20(fp)
  80641c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  806420:	080246c0 	call	80246c <OS_Sched>
        return (OS_ERR_NONE);
  806424:	0005883a 	mov	r2,zero
  806428:	00001606 	br	806484 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  80642c:	e0bfff17 	ldw	r2,-4(fp)
  806430:	1080020b 	ldhu	r2,8(r2)
  806434:	10ffffcc 	andi	r3,r2,65535
  806438:	00bfffd4 	movui	r2,65535
  80643c:	18800c26 	beq	r3,r2,806470 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  806440:	e0bfff17 	ldw	r2,-4(fp)
  806444:	1080020b 	ldhu	r2,8(r2)
  806448:	10800044 	addi	r2,r2,1
  80644c:	1007883a 	mov	r3,r2
  806450:	e0bfff17 	ldw	r2,-4(fp)
  806454:	10c0020d 	sth	r3,8(r2)
  806458:	e0bffa17 	ldw	r2,-24(fp)
  80645c:	e0bffc15 	stw	r2,-16(fp)
  806460:	e0bffc17 	ldw	r2,-16(fp)
  806464:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  806468:	0005883a 	mov	r2,zero
  80646c:	00000506 	br	806484 <OSSemPost+0xfc>
  806470:	e0bffa17 	ldw	r2,-24(fp)
  806474:	e0bffd15 	stw	r2,-12(fp)
  806478:	e0bffd17 	ldw	r2,-12(fp)
  80647c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  806480:	00800c84 	movi	r2,50
}
  806484:	e037883a 	mov	sp,fp
  806488:	dfc00117 	ldw	ra,4(sp)
  80648c:	df000017 	ldw	fp,0(sp)
  806490:	dec00204 	addi	sp,sp,8
  806494:	f800283a 	ret

00806498 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  806498:	defff704 	addi	sp,sp,-36
  80649c:	df000815 	stw	fp,32(sp)
  8064a0:	df000804 	addi	fp,sp,32
  8064a4:	e13ffe15 	stw	r4,-8(fp)
  8064a8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8064ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8064b0:	e0bffe17 	ldw	r2,-8(fp)
  8064b4:	1000021e 	bne	r2,zero,8064c0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  8064b8:	00800104 	movi	r2,4
  8064bc:	00003606 	br	806598 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  8064c0:	e0bfff17 	ldw	r2,-4(fp)
  8064c4:	1000021e 	bne	r2,zero,8064d0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  8064c8:	00800244 	movi	r2,9
  8064cc:	00003206 	br	806598 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8064d0:	e0bffe17 	ldw	r2,-8(fp)
  8064d4:	10800003 	ldbu	r2,0(r2)
  8064d8:	10803fcc 	andi	r2,r2,255
  8064dc:	108000e0 	cmpeqi	r2,r2,3
  8064e0:	1000021e 	bne	r2,zero,8064ec <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  8064e4:	00800044 	movi	r2,1
  8064e8:	00002b06 	br	806598 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8064ec:	0005303a 	rdctl	r2,status
  8064f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8064f4:	e0fffd17 	ldw	r3,-12(fp)
  8064f8:	00bfff84 	movi	r2,-2
  8064fc:	1884703a 	and	r2,r3,r2
  806500:	1001703a 	wrctl	status,r2
  
  return context;
  806504:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
  806508:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  80650c:	e0bffe17 	ldw	r2,-8(fp)
  806510:	10c00283 	ldbu	r3,10(r2)
  806514:	e0bfff17 	ldw	r2,-4(fp)
  806518:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  80651c:	e0bffe17 	ldw	r2,-8(fp)
  806520:	108002c4 	addi	r2,r2,11
  806524:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  806528:	e0bfff17 	ldw	r2,-4(fp)
  80652c:	10800084 	addi	r2,r2,2
  806530:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  806534:	e03ffa05 	stb	zero,-24(fp)
  806538:	00000b06 	br	806568 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
  80653c:	e0bff917 	ldw	r2,-28(fp)
  806540:	10c00044 	addi	r3,r2,1
  806544:	e0fff915 	stw	r3,-28(fp)
  806548:	e0fff817 	ldw	r3,-32(fp)
  80654c:	19000044 	addi	r4,r3,1
  806550:	e13ff815 	stw	r4,-32(fp)
  806554:	18c00003 	ldbu	r3,0(r3)
  806558:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80655c:	e0bffa03 	ldbu	r2,-24(fp)
  806560:	10800044 	addi	r2,r2,1
  806564:	e0bffa05 	stb	r2,-24(fp)
  806568:	e0bffa03 	ldbu	r2,-24(fp)
  80656c:	108000f0 	cmpltui	r2,r2,3
  806570:	103ff21e 	bne	r2,zero,80653c <__alt_mem_onchip_memory2_0+0xff80253c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  806574:	e0bffe17 	ldw	r2,-8(fp)
  806578:	10c0020b 	ldhu	r3,8(r2)
  80657c:	e0bfff17 	ldw	r2,-4(fp)
  806580:	10c0000d 	sth	r3,0(r2)
  806584:	e0bffb17 	ldw	r2,-20(fp)
  806588:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80658c:	e0bffc17 	ldw	r2,-16(fp)
  806590:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  806594:	0005883a 	mov	r2,zero
}
  806598:	e037883a 	mov	sp,fp
  80659c:	df000017 	ldw	fp,0(sp)
  8065a0:	dec00104 	addi	sp,sp,4
  8065a4:	f800283a 	ret

008065a8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  8065a8:	defff904 	addi	sp,sp,-28
  8065ac:	df000615 	stw	fp,24(sp)
  8065b0:	df000604 	addi	fp,sp,24
  8065b4:	e13ffd15 	stw	r4,-12(fp)
  8065b8:	2805883a 	mov	r2,r5
  8065bc:	e1bfff15 	stw	r6,-4(fp)
  8065c0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8065c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8065c8:	e0bfff17 	ldw	r2,-4(fp)
  8065cc:	10003126 	beq	r2,zero,806694 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8065d0:	e0bffd17 	ldw	r2,-12(fp)
  8065d4:	1000041e 	bne	r2,zero,8065e8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  8065d8:	e0bfff17 	ldw	r2,-4(fp)
  8065dc:	00c00104 	movi	r3,4
  8065e0:	10c00005 	stb	r3,0(r2)
        return;
  8065e4:	00002c06 	br	806698 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8065e8:	e0bffd17 	ldw	r2,-12(fp)
  8065ec:	10800003 	ldbu	r2,0(r2)
  8065f0:	10803fcc 	andi	r2,r2,255
  8065f4:	108000e0 	cmpeqi	r2,r2,3
  8065f8:	1000041e 	bne	r2,zero,80660c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  8065fc:	e0bfff17 	ldw	r2,-4(fp)
  806600:	00c00044 	movi	r3,1
  806604:	10c00005 	stb	r3,0(r2)
        return;
  806608:	00002306 	br	806698 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80660c:	0005303a 	rdctl	r2,status
  806610:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806614:	e0fffc17 	ldw	r3,-16(fp)
  806618:	00bfff84 	movi	r2,-2
  80661c:	1884703a 	and	r2,r3,r2
  806620:	1001703a 	wrctl	status,r2
  
  return context;
  806624:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  806628:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
  80662c:	e0bfff17 	ldw	r2,-4(fp)
  806630:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  806634:	e0bffd17 	ldw	r2,-12(fp)
  806638:	1080020b 	ldhu	r2,8(r2)
  80663c:	10bfffcc 	andi	r2,r2,65535
  806640:	10000426 	beq	r2,zero,806654 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  806644:	e0bffd17 	ldw	r2,-12(fp)
  806648:	e0fffe0b 	ldhu	r3,-8(fp)
  80664c:	10c0020d 	sth	r3,8(r2)
  806650:	00000b06 	br	806680 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  806654:	e0bffd17 	ldw	r2,-12(fp)
  806658:	10800283 	ldbu	r2,10(r2)
  80665c:	10803fcc 	andi	r2,r2,255
  806660:	1000041e 	bne	r2,zero,806674 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  806664:	e0bffd17 	ldw	r2,-12(fp)
  806668:	e0fffe0b 	ldhu	r3,-8(fp)
  80666c:	10c0020d 	sth	r3,8(r2)
  806670:	00000306 	br	806680 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  806674:	e0bfff17 	ldw	r2,-4(fp)
  806678:	00c01244 	movi	r3,73
  80667c:	10c00005 	stb	r3,0(r2)
  806680:	e0bffa17 	ldw	r2,-24(fp)
  806684:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806688:	e0bffb17 	ldw	r2,-20(fp)
  80668c:	1001703a 	wrctl	status,r2
  806690:	00000106 	br	806698 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  806694:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  806698:	e037883a 	mov	sp,fp
  80669c:	df000017 	ldw	fp,0(sp)
  8066a0:	dec00104 	addi	sp,sp,4
  8066a4:	f800283a 	ret

008066a8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  8066a8:	defff104 	addi	sp,sp,-60
  8066ac:	dfc00e15 	stw	ra,56(sp)
  8066b0:	df000d15 	stw	fp,52(sp)
  8066b4:	df000d04 	addi	fp,sp,52
  8066b8:	2007883a 	mov	r3,r4
  8066bc:	2805883a 	mov	r2,r5
  8066c0:	e0fffe05 	stb	r3,-8(fp)
  8066c4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8066c8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8066cc:	e0bffe03 	ldbu	r2,-8(fp)
  8066d0:	10800530 	cmpltui	r2,r2,20
  8066d4:	1000051e 	bne	r2,zero,8066ec <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  8066d8:	e0bffe03 	ldbu	r2,-8(fp)
  8066dc:	10803fe0 	cmpeqi	r2,r2,255
  8066e0:	1000021e 	bne	r2,zero,8066ec <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  8066e4:	00800a84 	movi	r2,42
  8066e8:	00012606 	br	806b84 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  8066ec:	e0bfff03 	ldbu	r2,-4(fp)
  8066f0:	10800530 	cmpltui	r2,r2,20
  8066f4:	1000021e 	bne	r2,zero,806700 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  8066f8:	00800a84 	movi	r2,42
  8066fc:	00012106 	br	806b84 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806700:	0005303a 	rdctl	r2,status
  806704:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806708:	e0fffd17 	ldw	r3,-12(fp)
  80670c:	00bfff84 	movi	r2,-2
  806710:	1884703a 	and	r2,r3,r2
  806714:	1001703a 	wrctl	status,r2
  
  return context;
  806718:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80671c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  806720:	e0ffff03 	ldbu	r3,-4(fp)
  806724:	00802074 	movhi	r2,129
  806728:	1085d804 	addi	r2,r2,5984
  80672c:	18c7883a 	add	r3,r3,r3
  806730:	18c7883a 	add	r3,r3,r3
  806734:	10c5883a 	add	r2,r2,r3
  806738:	10800017 	ldw	r2,0(r2)
  80673c:	10000626 	beq	r2,zero,806758 <OSTaskChangePrio+0xb0>
  806740:	e0bff517 	ldw	r2,-44(fp)
  806744:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806748:	e0bff617 	ldw	r2,-40(fp)
  80674c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  806750:	00800a04 	movi	r2,40
  806754:	00010b06 	br	806b84 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  806758:	e0bffe03 	ldbu	r2,-8(fp)
  80675c:	10803fd8 	cmpnei	r2,r2,255
  806760:	1000031e 	bne	r2,zero,806770 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  806764:	d0a11817 	ldw	r2,-31648(gp)
  806768:	10800c83 	ldbu	r2,50(r2)
  80676c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  806770:	e0fffe03 	ldbu	r3,-8(fp)
  806774:	00802074 	movhi	r2,129
  806778:	1085d804 	addi	r2,r2,5984
  80677c:	18c7883a 	add	r3,r3,r3
  806780:	18c7883a 	add	r3,r3,r3
  806784:	10c5883a 	add	r2,r2,r3
  806788:	10800017 	ldw	r2,0(r2)
  80678c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  806790:	e0bff817 	ldw	r2,-32(fp)
  806794:	1000061e 	bne	r2,zero,8067b0 <OSTaskChangePrio+0x108>
  806798:	e0bff517 	ldw	r2,-44(fp)
  80679c:	e0bff715 	stw	r2,-36(fp)
  8067a0:	e0bff717 	ldw	r2,-36(fp)
  8067a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8067a8:	00800a44 	movi	r2,41
  8067ac:	0000f506 	br	806b84 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  8067b0:	e0bff817 	ldw	r2,-32(fp)
  8067b4:	10800058 	cmpnei	r2,r2,1
  8067b8:	1000061e 	bne	r2,zero,8067d4 <OSTaskChangePrio+0x12c>
  8067bc:	e0bff517 	ldw	r2,-44(fp)
  8067c0:	e0bff915 	stw	r2,-28(fp)
  8067c4:	e0bff917 	ldw	r2,-28(fp)
  8067c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  8067cc:	008010c4 	movi	r2,67
  8067d0:	0000ec06 	br	806b84 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  8067d4:	e0bfff03 	ldbu	r2,-4(fp)
  8067d8:	1004d0fa 	srli	r2,r2,3
  8067dc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  8067e0:	e0bfff03 	ldbu	r2,-4(fp)
  8067e4:	108001cc 	andi	r2,r2,7
  8067e8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
  8067ec:	e0bffb03 	ldbu	r2,-20(fp)
  8067f0:	00c00044 	movi	r3,1
  8067f4:	1884983a 	sll	r2,r3,r2
  8067f8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
  8067fc:	e0bffb43 	ldbu	r2,-19(fp)
  806800:	00c00044 	movi	r3,1
  806804:	1884983a 	sll	r2,r3,r2
  806808:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  80680c:	e0fffe03 	ldbu	r3,-8(fp)
  806810:	00802074 	movhi	r2,129
  806814:	1085d804 	addi	r2,r2,5984
  806818:	18c7883a 	add	r3,r3,r3
  80681c:	18c7883a 	add	r3,r3,r3
  806820:	10c5883a 	add	r2,r2,r3
  806824:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  806828:	e0ffff03 	ldbu	r3,-4(fp)
  80682c:	00802074 	movhi	r2,129
  806830:	1085d804 	addi	r2,r2,5984
  806834:	18c7883a 	add	r3,r3,r3
  806838:	18c7883a 	add	r3,r3,r3
  80683c:	10c5883a 	add	r2,r2,r3
  806840:	e0fff817 	ldw	r3,-32(fp)
  806844:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  806848:	e0bff817 	ldw	r2,-32(fp)
  80684c:	10800d03 	ldbu	r2,52(r2)
  806850:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
  806854:	e0bff817 	ldw	r2,-32(fp)
  806858:	10800d83 	ldbu	r2,54(r2)
  80685c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  806860:	e0bff817 	ldw	r2,-32(fp)
  806864:	10800d43 	ldbu	r2,53(r2)
  806868:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  80686c:	e0fffc03 	ldbu	r3,-16(fp)
  806870:	d0a11544 	addi	r2,gp,-31659
  806874:	1885883a 	add	r2,r3,r2
  806878:	10c00003 	ldbu	r3,0(r2)
  80687c:	e0bffc83 	ldbu	r2,-14(fp)
  806880:	1884703a 	and	r2,r3,r2
  806884:	10803fcc 	andi	r2,r2,255
  806888:	10002826 	beq	r2,zero,80692c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
  80688c:	e0fffc03 	ldbu	r3,-16(fp)
  806890:	e13ffc03 	ldbu	r4,-16(fp)
  806894:	d0a11544 	addi	r2,gp,-31659
  806898:	2085883a 	add	r2,r4,r2
  80689c:	10800003 	ldbu	r2,0(r2)
  8068a0:	1009883a 	mov	r4,r2
  8068a4:	e0bffc83 	ldbu	r2,-14(fp)
  8068a8:	0084303a 	nor	r2,zero,r2
  8068ac:	2084703a 	and	r2,r4,r2
  8068b0:	1009883a 	mov	r4,r2
  8068b4:	d0a11544 	addi	r2,gp,-31659
  8068b8:	1885883a 	add	r2,r3,r2
  8068bc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  8068c0:	e0fffc03 	ldbu	r3,-16(fp)
  8068c4:	d0a11544 	addi	r2,gp,-31659
  8068c8:	1885883a 	add	r2,r3,r2
  8068cc:	10800003 	ldbu	r2,0(r2)
  8068d0:	10803fcc 	andi	r2,r2,255
  8068d4:	1000061e 	bne	r2,zero,8068f0 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
  8068d8:	e0bffc43 	ldbu	r2,-15(fp)
  8068dc:	0084303a 	nor	r2,zero,r2
  8068e0:	1007883a 	mov	r3,r2
  8068e4:	d0a11503 	ldbu	r2,-31660(gp)
  8068e8:	1884703a 	and	r2,r3,r2
  8068ec:	d0a11505 	stb	r2,-31660(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  8068f0:	d0e11503 	ldbu	r3,-31660(gp)
  8068f4:	e0bffb83 	ldbu	r2,-18(fp)
  8068f8:	1884b03a 	or	r2,r3,r2
  8068fc:	d0a11505 	stb	r2,-31660(gp)
         OSRdyTbl[y_new] |= bitx_new;
  806900:	e0fffb03 	ldbu	r3,-20(fp)
  806904:	e13ffb03 	ldbu	r4,-20(fp)
  806908:	d0a11544 	addi	r2,gp,-31659
  80690c:	2085883a 	add	r2,r4,r2
  806910:	11000003 	ldbu	r4,0(r2)
  806914:	e0bffbc3 	ldbu	r2,-17(fp)
  806918:	2084b03a 	or	r2,r4,r2
  80691c:	1009883a 	mov	r4,r2
  806920:	d0a11544 	addi	r2,gp,-31659
  806924:	1885883a 	add	r2,r3,r2
  806928:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  80692c:	e0bff817 	ldw	r2,-32(fp)
  806930:	10800717 	ldw	r2,28(r2)
  806934:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
  806938:	e0bff317 	ldw	r2,-52(fp)
  80693c:	10003326 	beq	r2,zero,806a0c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  806940:	e0bffc03 	ldbu	r2,-16(fp)
  806944:	e0fffc03 	ldbu	r3,-16(fp)
  806948:	e13ff317 	ldw	r4,-52(fp)
  80694c:	20c7883a 	add	r3,r4,r3
  806950:	18c002c4 	addi	r3,r3,11
  806954:	18c00003 	ldbu	r3,0(r3)
  806958:	1809883a 	mov	r4,r3
  80695c:	e0fffc83 	ldbu	r3,-14(fp)
  806960:	00c6303a 	nor	r3,zero,r3
  806964:	20c6703a 	and	r3,r4,r3
  806968:	1809883a 	mov	r4,r3
  80696c:	e0fff317 	ldw	r3,-52(fp)
  806970:	1885883a 	add	r2,r3,r2
  806974:	108002c4 	addi	r2,r2,11
  806978:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  80697c:	e0bffc03 	ldbu	r2,-16(fp)
  806980:	e0fff317 	ldw	r3,-52(fp)
  806984:	1885883a 	add	r2,r3,r2
  806988:	108002c4 	addi	r2,r2,11
  80698c:	10800003 	ldbu	r2,0(r2)
  806990:	10803fcc 	andi	r2,r2,255
  806994:	1000091e 	bne	r2,zero,8069bc <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
  806998:	e0bff317 	ldw	r2,-52(fp)
  80699c:	10800283 	ldbu	r2,10(r2)
  8069a0:	1007883a 	mov	r3,r2
  8069a4:	e0bffc43 	ldbu	r2,-15(fp)
  8069a8:	0084303a 	nor	r2,zero,r2
  8069ac:	1884703a 	and	r2,r3,r2
  8069b0:	1007883a 	mov	r3,r2
  8069b4:	e0bff317 	ldw	r2,-52(fp)
  8069b8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  8069bc:	e0bff317 	ldw	r2,-52(fp)
  8069c0:	10c00283 	ldbu	r3,10(r2)
  8069c4:	e0bffb83 	ldbu	r2,-18(fp)
  8069c8:	1884b03a 	or	r2,r3,r2
  8069cc:	1007883a 	mov	r3,r2
  8069d0:	e0bff317 	ldw	r2,-52(fp)
  8069d4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  8069d8:	e0bffb03 	ldbu	r2,-20(fp)
  8069dc:	e0fffb03 	ldbu	r3,-20(fp)
  8069e0:	e13ff317 	ldw	r4,-52(fp)
  8069e4:	20c7883a 	add	r3,r4,r3
  8069e8:	18c002c4 	addi	r3,r3,11
  8069ec:	19000003 	ldbu	r4,0(r3)
  8069f0:	e0fffbc3 	ldbu	r3,-17(fp)
  8069f4:	20c6b03a 	or	r3,r4,r3
  8069f8:	1809883a 	mov	r4,r3
  8069fc:	e0fff317 	ldw	r3,-52(fp)
  806a00:	1885883a 	add	r2,r3,r2
  806a04:	108002c4 	addi	r2,r2,11
  806a08:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  806a0c:	e0bff817 	ldw	r2,-32(fp)
  806a10:	10800817 	ldw	r2,32(r2)
  806a14:	10004226 	beq	r2,zero,806b20 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
  806a18:	e0bff817 	ldw	r2,-32(fp)
  806a1c:	10800817 	ldw	r2,32(r2)
  806a20:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
  806a24:	e0bff417 	ldw	r2,-48(fp)
  806a28:	10800017 	ldw	r2,0(r2)
  806a2c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
  806a30:	00003906 	br	806b18 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  806a34:	e0bffc03 	ldbu	r2,-16(fp)
  806a38:	e0fffc03 	ldbu	r3,-16(fp)
  806a3c:	e13ff317 	ldw	r4,-52(fp)
  806a40:	20c7883a 	add	r3,r4,r3
  806a44:	18c002c4 	addi	r3,r3,11
  806a48:	18c00003 	ldbu	r3,0(r3)
  806a4c:	1809883a 	mov	r4,r3
  806a50:	e0fffc83 	ldbu	r3,-14(fp)
  806a54:	00c6303a 	nor	r3,zero,r3
  806a58:	20c6703a 	and	r3,r4,r3
  806a5c:	1809883a 	mov	r4,r3
  806a60:	e0fff317 	ldw	r3,-52(fp)
  806a64:	1885883a 	add	r2,r3,r2
  806a68:	108002c4 	addi	r2,r2,11
  806a6c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  806a70:	e0bffc03 	ldbu	r2,-16(fp)
  806a74:	e0fff317 	ldw	r3,-52(fp)
  806a78:	1885883a 	add	r2,r3,r2
  806a7c:	108002c4 	addi	r2,r2,11
  806a80:	10800003 	ldbu	r2,0(r2)
  806a84:	10803fcc 	andi	r2,r2,255
  806a88:	1000091e 	bne	r2,zero,806ab0 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
  806a8c:	e0bff317 	ldw	r2,-52(fp)
  806a90:	10800283 	ldbu	r2,10(r2)
  806a94:	1007883a 	mov	r3,r2
  806a98:	e0bffc43 	ldbu	r2,-15(fp)
  806a9c:	0084303a 	nor	r2,zero,r2
  806aa0:	1884703a 	and	r2,r3,r2
  806aa4:	1007883a 	mov	r3,r2
  806aa8:	e0bff317 	ldw	r2,-52(fp)
  806aac:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  806ab0:	e0bff317 	ldw	r2,-52(fp)
  806ab4:	10c00283 	ldbu	r3,10(r2)
  806ab8:	e0bffb83 	ldbu	r2,-18(fp)
  806abc:	1884b03a 	or	r2,r3,r2
  806ac0:	1007883a 	mov	r3,r2
  806ac4:	e0bff317 	ldw	r2,-52(fp)
  806ac8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  806acc:	e0bffb03 	ldbu	r2,-20(fp)
  806ad0:	e0fffb03 	ldbu	r3,-20(fp)
  806ad4:	e13ff317 	ldw	r4,-52(fp)
  806ad8:	20c7883a 	add	r3,r4,r3
  806adc:	18c002c4 	addi	r3,r3,11
  806ae0:	19000003 	ldbu	r4,0(r3)
  806ae4:	e0fffbc3 	ldbu	r3,-17(fp)
  806ae8:	20c6b03a 	or	r3,r4,r3
  806aec:	1809883a 	mov	r4,r3
  806af0:	e0fff317 	ldw	r3,-52(fp)
  806af4:	1885883a 	add	r2,r3,r2
  806af8:	108002c4 	addi	r2,r2,11
  806afc:	11000005 	stb	r4,0(r2)
            pevents++;
  806b00:	e0bff417 	ldw	r2,-48(fp)
  806b04:	10800104 	addi	r2,r2,4
  806b08:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
  806b0c:	e0bff417 	ldw	r2,-48(fp)
  806b10:	10800017 	ldw	r2,0(r2)
  806b14:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  806b18:	e0bff317 	ldw	r2,-52(fp)
  806b1c:	103fc51e 	bne	r2,zero,806a34 <__alt_mem_onchip_memory2_0+0xff802a34>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  806b20:	e0bff817 	ldw	r2,-32(fp)
  806b24:	e0ffff03 	ldbu	r3,-4(fp)
  806b28:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  806b2c:	e0bff817 	ldw	r2,-32(fp)
  806b30:	e0fffb03 	ldbu	r3,-20(fp)
  806b34:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  806b38:	e0bff817 	ldw	r2,-32(fp)
  806b3c:	e0fffb43 	ldbu	r3,-19(fp)
  806b40:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  806b44:	e0bff817 	ldw	r2,-32(fp)
  806b48:	e0fffb83 	ldbu	r3,-18(fp)
  806b4c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  806b50:	e0bff817 	ldw	r2,-32(fp)
  806b54:	e0fffbc3 	ldbu	r3,-17(fp)
  806b58:	10c00d45 	stb	r3,53(r2)
  806b5c:	e0bff517 	ldw	r2,-44(fp)
  806b60:	e0bffa15 	stw	r2,-24(fp)
  806b64:	e0bffa17 	ldw	r2,-24(fp)
  806b68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  806b6c:	d0a10943 	ldbu	r2,-31707(gp)
  806b70:	10803fcc 	andi	r2,r2,255
  806b74:	10800058 	cmpnei	r2,r2,1
  806b78:	1000011e 	bne	r2,zero,806b80 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
  806b7c:	080246c0 	call	80246c <OS_Sched>
    }
    return (OS_ERR_NONE);
  806b80:	0005883a 	mov	r2,zero
}
  806b84:	e037883a 	mov	sp,fp
  806b88:	dfc00117 	ldw	ra,4(sp)
  806b8c:	df000017 	ldw	fp,0(sp)
  806b90:	dec00204 	addi	sp,sp,8
  806b94:	f800283a 	ret

00806b98 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  806b98:	deffee04 	addi	sp,sp,-72
  806b9c:	dfc01115 	stw	ra,68(sp)
  806ba0:	df001015 	stw	fp,64(sp)
  806ba4:	df001004 	addi	fp,sp,64
  806ba8:	e13ffc15 	stw	r4,-16(fp)
  806bac:	e17ffd15 	stw	r5,-12(fp)
  806bb0:	e1bffe15 	stw	r6,-8(fp)
  806bb4:	3805883a 	mov	r2,r7
  806bb8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  806bbc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  806bc0:	e0bfff03 	ldbu	r2,-4(fp)
  806bc4:	10800570 	cmpltui	r2,r2,21
  806bc8:	1000021e 	bne	r2,zero,806bd4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  806bcc:	00800a84 	movi	r2,42
  806bd0:	00005706 	br	806d30 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806bd4:	0005303a 	rdctl	r2,status
  806bd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806bdc:	e0fffb17 	ldw	r3,-20(fp)
  806be0:	00bfff84 	movi	r2,-2
  806be4:	1884703a 	and	r2,r3,r2
  806be8:	1001703a 	wrctl	status,r2
  
  return context;
  806bec:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  806bf0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  806bf4:	d0a11703 	ldbu	r2,-31652(gp)
  806bf8:	10803fcc 	andi	r2,r2,255
  806bfc:	10000626 	beq	r2,zero,806c18 <OSTaskCreate+0x80>
  806c00:	e0bff317 	ldw	r2,-52(fp)
  806c04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806c08:	e0bff417 	ldw	r2,-48(fp)
  806c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  806c10:	00800f04 	movi	r2,60
  806c14:	00004606 	br	806d30 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  806c18:	e0ffff03 	ldbu	r3,-4(fp)
  806c1c:	00802074 	movhi	r2,129
  806c20:	1085d804 	addi	r2,r2,5984
  806c24:	18c7883a 	add	r3,r3,r3
  806c28:	18c7883a 	add	r3,r3,r3
  806c2c:	10c5883a 	add	r2,r2,r3
  806c30:	10800017 	ldw	r2,0(r2)
  806c34:	1000391e 	bne	r2,zero,806d1c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  806c38:	e0ffff03 	ldbu	r3,-4(fp)
  806c3c:	00802074 	movhi	r2,129
  806c40:	1085d804 	addi	r2,r2,5984
  806c44:	18c7883a 	add	r3,r3,r3
  806c48:	18c7883a 	add	r3,r3,r3
  806c4c:	10c5883a 	add	r2,r2,r3
  806c50:	00c00044 	movi	r3,1
  806c54:	10c00015 	stw	r3,0(r2)
  806c58:	e0bff317 	ldw	r2,-52(fp)
  806c5c:	e0bff515 	stw	r2,-44(fp)
  806c60:	e0bff517 	ldw	r2,-44(fp)
  806c64:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  806c68:	000f883a 	mov	r7,zero
  806c6c:	e1bffe17 	ldw	r6,-8(fp)
  806c70:	e17ffd17 	ldw	r5,-12(fp)
  806c74:	e13ffc17 	ldw	r4,-16(fp)
  806c78:	08093100 	call	809310 <OSTaskStkInit>
  806c7c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  806c80:	e0bfff03 	ldbu	r2,-4(fp)
  806c84:	d8000215 	stw	zero,8(sp)
  806c88:	d8000115 	stw	zero,4(sp)
  806c8c:	d8000015 	stw	zero,0(sp)
  806c90:	000f883a 	mov	r7,zero
  806c94:	000d883a 	mov	r6,zero
  806c98:	e17ff717 	ldw	r5,-36(fp)
  806c9c:	1009883a 	mov	r4,r2
  806ca0:	080286c0 	call	80286c <OS_TCBInit>
  806ca4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
  806ca8:	e0bff803 	ldbu	r2,-32(fp)
  806cac:	1000061e 	bne	r2,zero,806cc8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  806cb0:	d0a10943 	ldbu	r2,-31707(gp)
  806cb4:	10803fcc 	andi	r2,r2,255
  806cb8:	10800058 	cmpnei	r2,r2,1
  806cbc:	1000151e 	bne	r2,zero,806d14 <OSTaskCreate+0x17c>
                OS_Sched();
  806cc0:	080246c0 	call	80246c <OS_Sched>
  806cc4:	00001306 	br	806d14 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806cc8:	0005303a 	rdctl	r2,status
  806ccc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806cd0:	e0fffa17 	ldw	r3,-24(fp)
  806cd4:	00bfff84 	movi	r2,-2
  806cd8:	1884703a 	and	r2,r3,r2
  806cdc:	1001703a 	wrctl	status,r2
  
  return context;
  806ce0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  806ce4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  806ce8:	e0ffff03 	ldbu	r3,-4(fp)
  806cec:	00802074 	movhi	r2,129
  806cf0:	1085d804 	addi	r2,r2,5984
  806cf4:	18c7883a 	add	r3,r3,r3
  806cf8:	18c7883a 	add	r3,r3,r3
  806cfc:	10c5883a 	add	r2,r2,r3
  806d00:	10000015 	stw	zero,0(r2)
  806d04:	e0bff317 	ldw	r2,-52(fp)
  806d08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806d0c:	e0bff617 	ldw	r2,-40(fp)
  806d10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  806d14:	e0bff803 	ldbu	r2,-32(fp)
  806d18:	00000506 	br	806d30 <OSTaskCreate+0x198>
  806d1c:	e0bff317 	ldw	r2,-52(fp)
  806d20:	e0bff915 	stw	r2,-28(fp)
  806d24:	e0bff917 	ldw	r2,-28(fp)
  806d28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  806d2c:	00800a04 	movi	r2,40
}
  806d30:	e037883a 	mov	sp,fp
  806d34:	dfc00117 	ldw	ra,4(sp)
  806d38:	df000017 	ldw	fp,0(sp)
  806d3c:	dec00204 	addi	sp,sp,8
  806d40:	f800283a 	ret

00806d44 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  806d44:	deffec04 	addi	sp,sp,-80
  806d48:	dfc01315 	stw	ra,76(sp)
  806d4c:	df001215 	stw	fp,72(sp)
  806d50:	df001204 	addi	fp,sp,72
  806d54:	e13ffa15 	stw	r4,-24(fp)
  806d58:	e17ffb15 	stw	r5,-20(fp)
  806d5c:	e1bffc15 	stw	r6,-16(fp)
  806d60:	3809883a 	mov	r4,r7
  806d64:	e0c00217 	ldw	r3,8(fp)
  806d68:	e0800617 	ldw	r2,24(fp)
  806d6c:	e13ffd05 	stb	r4,-12(fp)
  806d70:	e0fffe0d 	sth	r3,-8(fp)
  806d74:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  806d78:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  806d7c:	e0bffd03 	ldbu	r2,-12(fp)
  806d80:	10800570 	cmpltui	r2,r2,21
  806d84:	1000021e 	bne	r2,zero,806d90 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  806d88:	00800a84 	movi	r2,42
  806d8c:	00006106 	br	806f14 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d90:	0005303a 	rdctl	r2,status
  806d94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806d98:	e0fff917 	ldw	r3,-28(fp)
  806d9c:	00bfff84 	movi	r2,-2
  806da0:	1884703a 	and	r2,r3,r2
  806da4:	1001703a 	wrctl	status,r2
  
  return context;
  806da8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  806dac:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  806db0:	d0a11703 	ldbu	r2,-31652(gp)
  806db4:	10803fcc 	andi	r2,r2,255
  806db8:	10000626 	beq	r2,zero,806dd4 <OSTaskCreateExt+0x90>
  806dbc:	e0bff117 	ldw	r2,-60(fp)
  806dc0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806dc4:	e0bff217 	ldw	r2,-56(fp)
  806dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  806dcc:	00800f04 	movi	r2,60
  806dd0:	00005006 	br	806f14 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  806dd4:	e0fffd03 	ldbu	r3,-12(fp)
  806dd8:	00802074 	movhi	r2,129
  806ddc:	1085d804 	addi	r2,r2,5984
  806de0:	18c7883a 	add	r3,r3,r3
  806de4:	18c7883a 	add	r3,r3,r3
  806de8:	10c5883a 	add	r2,r2,r3
  806dec:	10800017 	ldw	r2,0(r2)
  806df0:	1000431e 	bne	r2,zero,806f00 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  806df4:	e0fffd03 	ldbu	r3,-12(fp)
  806df8:	00802074 	movhi	r2,129
  806dfc:	1085d804 	addi	r2,r2,5984
  806e00:	18c7883a 	add	r3,r3,r3
  806e04:	18c7883a 	add	r3,r3,r3
  806e08:	10c5883a 	add	r2,r2,r3
  806e0c:	00c00044 	movi	r3,1
  806e10:	10c00015 	stw	r3,0(r2)
  806e14:	e0bff117 	ldw	r2,-60(fp)
  806e18:	e0bff315 	stw	r2,-52(fp)
  806e1c:	e0bff317 	ldw	r2,-52(fp)
  806e20:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  806e24:	e0bfff0b 	ldhu	r2,-4(fp)
  806e28:	100d883a 	mov	r6,r2
  806e2c:	e1400417 	ldw	r5,16(fp)
  806e30:	e1000317 	ldw	r4,12(fp)
  806e34:	0807da40 	call	807da4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  806e38:	e0bfff0b 	ldhu	r2,-4(fp)
  806e3c:	100f883a 	mov	r7,r2
  806e40:	e1bffc17 	ldw	r6,-16(fp)
  806e44:	e17ffb17 	ldw	r5,-20(fp)
  806e48:	e13ffa17 	ldw	r4,-24(fp)
  806e4c:	08093100 	call	809310 <OSTaskStkInit>
  806e50:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  806e54:	e0fffd03 	ldbu	r3,-12(fp)
  806e58:	e13ffe0b 	ldhu	r4,-8(fp)
  806e5c:	e0bfff0b 	ldhu	r2,-4(fp)
  806e60:	d8800215 	stw	r2,8(sp)
  806e64:	e0800517 	ldw	r2,20(fp)
  806e68:	d8800115 	stw	r2,4(sp)
  806e6c:	e0800417 	ldw	r2,16(fp)
  806e70:	d8800015 	stw	r2,0(sp)
  806e74:	200f883a 	mov	r7,r4
  806e78:	e1800317 	ldw	r6,12(fp)
  806e7c:	e17ff517 	ldw	r5,-44(fp)
  806e80:	1809883a 	mov	r4,r3
  806e84:	080286c0 	call	80286c <OS_TCBInit>
  806e88:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
  806e8c:	e0bff603 	ldbu	r2,-40(fp)
  806e90:	1000061e 	bne	r2,zero,806eac <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  806e94:	d0a10943 	ldbu	r2,-31707(gp)
  806e98:	10803fcc 	andi	r2,r2,255
  806e9c:	10800058 	cmpnei	r2,r2,1
  806ea0:	1000151e 	bne	r2,zero,806ef8 <OSTaskCreateExt+0x1b4>
                OS_Sched();
  806ea4:	080246c0 	call	80246c <OS_Sched>
  806ea8:	00001306 	br	806ef8 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806eac:	0005303a 	rdctl	r2,status
  806eb0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806eb4:	e0fff817 	ldw	r3,-32(fp)
  806eb8:	00bfff84 	movi	r2,-2
  806ebc:	1884703a 	and	r2,r3,r2
  806ec0:	1001703a 	wrctl	status,r2
  
  return context;
  806ec4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  806ec8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  806ecc:	e0fffd03 	ldbu	r3,-12(fp)
  806ed0:	00802074 	movhi	r2,129
  806ed4:	1085d804 	addi	r2,r2,5984
  806ed8:	18c7883a 	add	r3,r3,r3
  806edc:	18c7883a 	add	r3,r3,r3
  806ee0:	10c5883a 	add	r2,r2,r3
  806ee4:	10000015 	stw	zero,0(r2)
  806ee8:	e0bff117 	ldw	r2,-60(fp)
  806eec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ef0:	e0bff417 	ldw	r2,-48(fp)
  806ef4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  806ef8:	e0bff603 	ldbu	r2,-40(fp)
  806efc:	00000506 	br	806f14 <OSTaskCreateExt+0x1d0>
  806f00:	e0bff117 	ldw	r2,-60(fp)
  806f04:	e0bff715 	stw	r2,-36(fp)
  806f08:	e0bff717 	ldw	r2,-36(fp)
  806f0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  806f10:	00800a04 	movi	r2,40
}
  806f14:	e037883a 	mov	sp,fp
  806f18:	dfc00117 	ldw	ra,4(sp)
  806f1c:	df000017 	ldw	fp,0(sp)
  806f20:	dec00204 	addi	sp,sp,8
  806f24:	f800283a 	ret

00806f28 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  806f28:	defff404 	addi	sp,sp,-48
  806f2c:	dfc00b15 	stw	ra,44(sp)
  806f30:	df000a15 	stw	fp,40(sp)
  806f34:	df000a04 	addi	fp,sp,40
  806f38:	2005883a 	mov	r2,r4
  806f3c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  806f40:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  806f44:	d0a11703 	ldbu	r2,-31652(gp)
  806f48:	10803fcc 	andi	r2,r2,255
  806f4c:	10000226 	beq	r2,zero,806f58 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
  806f50:	00801004 	movi	r2,64
  806f54:	0000c006 	br	807258 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  806f58:	e0bfff03 	ldbu	r2,-4(fp)
  806f5c:	10800518 	cmpnei	r2,r2,20
  806f60:	1000021e 	bne	r2,zero,806f6c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
  806f64:	00800f84 	movi	r2,62
  806f68:	0000bb06 	br	807258 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  806f6c:	e0bfff03 	ldbu	r2,-4(fp)
  806f70:	10800530 	cmpltui	r2,r2,20
  806f74:	1000051e 	bne	r2,zero,806f8c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
  806f78:	e0bfff03 	ldbu	r2,-4(fp)
  806f7c:	10803fe0 	cmpeqi	r2,r2,255
  806f80:	1000021e 	bne	r2,zero,806f8c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
  806f84:	00800a84 	movi	r2,42
  806f88:	0000b306 	br	807258 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806f8c:	0005303a 	rdctl	r2,status
  806f90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806f94:	e0fffe17 	ldw	r3,-8(fp)
  806f98:	00bfff84 	movi	r2,-2
  806f9c:	1884703a 	and	r2,r3,r2
  806fa0:	1001703a 	wrctl	status,r2
  
  return context;
  806fa4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  806fa8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  806fac:	e0bfff03 	ldbu	r2,-4(fp)
  806fb0:	10803fd8 	cmpnei	r2,r2,255
  806fb4:	1000031e 	bne	r2,zero,806fc4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  806fb8:	d0a11817 	ldw	r2,-31648(gp)
  806fbc:	10800c83 	ldbu	r2,50(r2)
  806fc0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  806fc4:	e0ffff03 	ldbu	r3,-4(fp)
  806fc8:	00802074 	movhi	r2,129
  806fcc:	1085d804 	addi	r2,r2,5984
  806fd0:	18c7883a 	add	r3,r3,r3
  806fd4:	18c7883a 	add	r3,r3,r3
  806fd8:	10c5883a 	add	r2,r2,r3
  806fdc:	10800017 	ldw	r2,0(r2)
  806fe0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  806fe4:	e0bff817 	ldw	r2,-32(fp)
  806fe8:	1000061e 	bne	r2,zero,807004 <OSTaskDel+0xdc>
  806fec:	e0bff617 	ldw	r2,-40(fp)
  806ff0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806ff4:	e0bff717 	ldw	r2,-36(fp)
  806ff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  806ffc:	008010c4 	movi	r2,67
  807000:	00009506 	br	807258 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  807004:	e0bff817 	ldw	r2,-32(fp)
  807008:	10800058 	cmpnei	r2,r2,1
  80700c:	1000061e 	bne	r2,zero,807028 <OSTaskDel+0x100>
  807010:	e0bff617 	ldw	r2,-40(fp)
  807014:	e0bff915 	stw	r2,-28(fp)
  807018:	e0bff917 	ldw	r2,-28(fp)
  80701c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  807020:	00800f44 	movi	r2,61
  807024:	00008c06 	br	807258 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  807028:	e0bff817 	ldw	r2,-32(fp)
  80702c:	10800d03 	ldbu	r2,52(r2)
  807030:	10c03fcc 	andi	r3,r2,255
  807034:	e0bff817 	ldw	r2,-32(fp)
  807038:	10800d03 	ldbu	r2,52(r2)
  80703c:	11003fcc 	andi	r4,r2,255
  807040:	d0a11544 	addi	r2,gp,-31659
  807044:	2085883a 	add	r2,r4,r2
  807048:	10800003 	ldbu	r2,0(r2)
  80704c:	1009883a 	mov	r4,r2
  807050:	e0bff817 	ldw	r2,-32(fp)
  807054:	10800d43 	ldbu	r2,53(r2)
  807058:	0084303a 	nor	r2,zero,r2
  80705c:	2084703a 	and	r2,r4,r2
  807060:	1009883a 	mov	r4,r2
  807064:	d0a11544 	addi	r2,gp,-31659
  807068:	1885883a 	add	r2,r3,r2
  80706c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  807070:	e0bff817 	ldw	r2,-32(fp)
  807074:	10800d03 	ldbu	r2,52(r2)
  807078:	10c03fcc 	andi	r3,r2,255
  80707c:	d0a11544 	addi	r2,gp,-31659
  807080:	1885883a 	add	r2,r3,r2
  807084:	10800003 	ldbu	r2,0(r2)
  807088:	10803fcc 	andi	r2,r2,255
  80708c:	1000071e 	bne	r2,zero,8070ac <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  807090:	e0bff817 	ldw	r2,-32(fp)
  807094:	10800d83 	ldbu	r2,54(r2)
  807098:	0084303a 	nor	r2,zero,r2
  80709c:	1007883a 	mov	r3,r2
  8070a0:	d0a11503 	ldbu	r2,-31660(gp)
  8070a4:	1884703a 	and	r2,r3,r2
  8070a8:	d0a11505 	stb	r2,-31660(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  8070ac:	e0bff817 	ldw	r2,-32(fp)
  8070b0:	10800717 	ldw	r2,28(r2)
  8070b4:	10000526 	beq	r2,zero,8070cc <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  8070b8:	e0bff817 	ldw	r2,-32(fp)
  8070bc:	10800717 	ldw	r2,28(r2)
  8070c0:	100b883a 	mov	r5,r2
  8070c4:	e13ff817 	ldw	r4,-32(fp)
  8070c8:	0801e180 	call	801e18 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  8070cc:	e0bff817 	ldw	r2,-32(fp)
  8070d0:	10800817 	ldw	r2,32(r2)
  8070d4:	10000526 	beq	r2,zero,8070ec <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8070d8:	e0bff817 	ldw	r2,-32(fp)
  8070dc:	10800817 	ldw	r2,32(r2)
  8070e0:	100b883a 	mov	r5,r2
  8070e4:	e13ff817 	ldw	r4,-32(fp)
  8070e8:	0801ed00 	call	801ed0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  8070ec:	e0bff817 	ldw	r2,-32(fp)
  8070f0:	10800a17 	ldw	r2,40(r2)
  8070f4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  8070f8:	e0bffb17 	ldw	r2,-20(fp)
  8070fc:	10000226 	beq	r2,zero,807108 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  807100:	e13ffb17 	ldw	r4,-20(fp)
  807104:	08043400 	call	804340 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  807108:	e0bff817 	ldw	r2,-32(fp)
  80710c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  807110:	e0bff817 	ldw	r2,-32(fp)
  807114:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  807118:	e0bff817 	ldw	r2,-32(fp)
  80711c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  807120:	d0a10903 	ldbu	r2,-31708(gp)
  807124:	10803fcc 	andi	r2,r2,255
  807128:	10803fe0 	cmpeqi	r2,r2,255
  80712c:	1000031e 	bne	r2,zero,80713c <OSTaskDel+0x214>
        OSLockNesting++;
  807130:	d0a10903 	ldbu	r2,-31708(gp)
  807134:	10800044 	addi	r2,r2,1
  807138:	d0a10905 	stb	r2,-31708(gp)
  80713c:	e0bff617 	ldw	r2,-40(fp)
  807140:	e0bffd15 	stw	r2,-12(fp)
  807144:	e0bffd17 	ldw	r2,-12(fp)
  807148:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  80714c:	0801a000 	call	801a00 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807150:	0005303a 	rdctl	r2,status
  807154:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807158:	e0fffa17 	ldw	r3,-24(fp)
  80715c:	00bfff84 	movi	r2,-2
  807160:	1884703a 	and	r2,r3,r2
  807164:	1001703a 	wrctl	status,r2
  
  return context;
  807168:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  80716c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  807170:	d0a10903 	ldbu	r2,-31708(gp)
  807174:	10803fcc 	andi	r2,r2,255
  807178:	10000326 	beq	r2,zero,807188 <OSTaskDel+0x260>
        OSLockNesting--;
  80717c:	d0a10903 	ldbu	r2,-31708(gp)
  807180:	10bfffc4 	addi	r2,r2,-1
  807184:	d0a10905 	stb	r2,-31708(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  807188:	e13ff817 	ldw	r4,-32(fp)
  80718c:	08094900 	call	809490 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  807190:	d0a11143 	ldbu	r2,-31675(gp)
  807194:	10bfffc4 	addi	r2,r2,-1
  807198:	d0a11145 	stb	r2,-31675(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  80719c:	e0ffff03 	ldbu	r3,-4(fp)
  8071a0:	00802074 	movhi	r2,129
  8071a4:	1085d804 	addi	r2,r2,5984
  8071a8:	18c7883a 	add	r3,r3,r3
  8071ac:	18c7883a 	add	r3,r3,r3
  8071b0:	10c5883a 	add	r2,r2,r3
  8071b4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  8071b8:	e0bff817 	ldw	r2,-32(fp)
  8071bc:	10800617 	ldw	r2,24(r2)
  8071c0:	1000071e 	bne	r2,zero,8071e0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  8071c4:	e0bff817 	ldw	r2,-32(fp)
  8071c8:	10800517 	ldw	r2,20(r2)
  8071cc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  8071d0:	e0bff817 	ldw	r2,-32(fp)
  8071d4:	10800517 	ldw	r2,20(r2)
  8071d8:	d0a10c15 	stw	r2,-31696(gp)
  8071dc:	00000a06 	br	807208 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  8071e0:	e0bff817 	ldw	r2,-32(fp)
  8071e4:	10800617 	ldw	r2,24(r2)
  8071e8:	e0fff817 	ldw	r3,-32(fp)
  8071ec:	18c00517 	ldw	r3,20(r3)
  8071f0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  8071f4:	e0bff817 	ldw	r2,-32(fp)
  8071f8:	10800517 	ldw	r2,20(r2)
  8071fc:	e0fff817 	ldw	r3,-32(fp)
  807200:	18c00617 	ldw	r3,24(r3)
  807204:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  807208:	d0e11017 	ldw	r3,-31680(gp)
  80720c:	e0bff817 	ldw	r2,-32(fp)
  807210:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  807214:	e0bff817 	ldw	r2,-32(fp)
  807218:	d0a11015 	stw	r2,-31680(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80721c:	e0bff817 	ldw	r2,-32(fp)
  807220:	00c00fc4 	movi	r3,63
  807224:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  807228:	e0bff817 	ldw	r2,-32(fp)
  80722c:	10001345 	stb	zero,77(r2)
  807230:	e0bff617 	ldw	r2,-40(fp)
  807234:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807238:	e0bffc17 	ldw	r2,-16(fp)
  80723c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  807240:	d0a10943 	ldbu	r2,-31707(gp)
  807244:	10803fcc 	andi	r2,r2,255
  807248:	10800058 	cmpnei	r2,r2,1
  80724c:	1000011e 	bne	r2,zero,807254 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
  807250:	080246c0 	call	80246c <OS_Sched>
    }
    return (OS_ERR_NONE);
  807254:	0005883a 	mov	r2,zero
}
  807258:	e037883a 	mov	sp,fp
  80725c:	dfc00117 	ldw	ra,4(sp)
  807260:	df000017 	ldw	fp,0(sp)
  807264:	dec00204 	addi	sp,sp,8
  807268:	f800283a 	ret

0080726c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  80726c:	defff504 	addi	sp,sp,-44
  807270:	df000a15 	stw	fp,40(sp)
  807274:	df000a04 	addi	fp,sp,40
  807278:	2005883a 	mov	r2,r4
  80727c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807280:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  807284:	e0bfff03 	ldbu	r2,-4(fp)
  807288:	10800518 	cmpnei	r2,r2,20
  80728c:	1000021e 	bne	r2,zero,807298 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  807290:	00800f84 	movi	r2,62
  807294:	00004506 	br	8073ac <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  807298:	e0bfff03 	ldbu	r2,-4(fp)
  80729c:	10800530 	cmpltui	r2,r2,20
  8072a0:	1000051e 	bne	r2,zero,8072b8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  8072a4:	e0bfff03 	ldbu	r2,-4(fp)
  8072a8:	10803fe0 	cmpeqi	r2,r2,255
  8072ac:	1000021e 	bne	r2,zero,8072b8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  8072b0:	00800a84 	movi	r2,42
  8072b4:	00003d06 	br	8073ac <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  8072b8:	e0bfff03 	ldbu	r2,-4(fp)
  8072bc:	10803fd8 	cmpnei	r2,r2,255
  8072c0:	1000111e 	bne	r2,zero,807308 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8072c4:	0005303a 	rdctl	r2,status
  8072c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8072cc:	e0fff917 	ldw	r3,-28(fp)
  8072d0:	00bfff84 	movi	r2,-2
  8072d4:	1884703a 	and	r2,r3,r2
  8072d8:	1001703a 	wrctl	status,r2
  
  return context;
  8072dc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  8072e0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  8072e4:	d0a11817 	ldw	r2,-31648(gp)
  8072e8:	10800dc3 	ldbu	r2,55(r2)
  8072ec:	e0bff805 	stb	r2,-32(fp)
  8072f0:	e0bff617 	ldw	r2,-40(fp)
  8072f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8072f8:	e0bffe17 	ldw	r2,-8(fp)
  8072fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  807300:	e0bff803 	ldbu	r2,-32(fp)
  807304:	00002906 	br	8073ac <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807308:	0005303a 	rdctl	r2,status
  80730c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807310:	e0fff717 	ldw	r3,-36(fp)
  807314:	00bfff84 	movi	r2,-2
  807318:	1884703a 	and	r2,r3,r2
  80731c:	1001703a 	wrctl	status,r2
  
  return context;
  807320:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  807324:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  807328:	e0ffff03 	ldbu	r3,-4(fp)
  80732c:	00802074 	movhi	r2,129
  807330:	1085d804 	addi	r2,r2,5984
  807334:	18c7883a 	add	r3,r3,r3
  807338:	18c7883a 	add	r3,r3,r3
  80733c:	10c5883a 	add	r2,r2,r3
  807340:	10800017 	ldw	r2,0(r2)
  807344:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  807348:	e0bffb17 	ldw	r2,-20(fp)
  80734c:	1000061e 	bne	r2,zero,807368 <OSTaskDelReq+0xfc>
  807350:	e0bff617 	ldw	r2,-40(fp)
  807354:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807358:	e0bffa17 	ldw	r2,-24(fp)
  80735c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  807360:	008010c4 	movi	r2,67
  807364:	00001106 	br	8073ac <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  807368:	e0bffb17 	ldw	r2,-20(fp)
  80736c:	10800058 	cmpnei	r2,r2,1
  807370:	1000061e 	bne	r2,zero,80738c <OSTaskDelReq+0x120>
  807374:	e0bff617 	ldw	r2,-40(fp)
  807378:	e0bffc15 	stw	r2,-16(fp)
  80737c:	e0bffc17 	ldw	r2,-16(fp)
  807380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  807384:	00800f44 	movi	r2,61
  807388:	00000806 	br	8073ac <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80738c:	e0bffb17 	ldw	r2,-20(fp)
  807390:	00c00fc4 	movi	r3,63
  807394:	10c00dc5 	stb	r3,55(r2)
  807398:	e0bff617 	ldw	r2,-40(fp)
  80739c:	e0bffd15 	stw	r2,-12(fp)
  8073a0:	e0bffd17 	ldw	r2,-12(fp)
  8073a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8073a8:	0005883a 	mov	r2,zero
}
  8073ac:	e037883a 	mov	sp,fp
  8073b0:	df000017 	ldw	fp,0(sp)
  8073b4:	dec00104 	addi	sp,sp,4
  8073b8:	f800283a 	ret

008073bc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  8073bc:	defff404 	addi	sp,sp,-48
  8073c0:	dfc00b15 	stw	ra,44(sp)
  8073c4:	df000a15 	stw	fp,40(sp)
  8073c8:	df000a04 	addi	fp,sp,40
  8073cc:	2005883a 	mov	r2,r4
  8073d0:	e17ffe15 	stw	r5,-8(fp)
  8073d4:	e1bfff15 	stw	r6,-4(fp)
  8073d8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  8073dc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  8073e0:	e0bfff17 	ldw	r2,-4(fp)
  8073e4:	1000021e 	bne	r2,zero,8073f0 <OSTaskNameGet+0x34>
        return (0);
  8073e8:	0005883a 	mov	r2,zero
  8073ec:	00005406 	br	807540 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  8073f0:	e0bffd03 	ldbu	r2,-12(fp)
  8073f4:	10800570 	cmpltui	r2,r2,21
  8073f8:	1000081e 	bne	r2,zero,80741c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  8073fc:	e0bffd03 	ldbu	r2,-12(fp)
  807400:	10803fe0 	cmpeqi	r2,r2,255
  807404:	1000051e 	bne	r2,zero,80741c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  807408:	e0bfff17 	ldw	r2,-4(fp)
  80740c:	00c00a84 	movi	r3,42
  807410:	10c00005 	stb	r3,0(r2)
            return (0);
  807414:	0005883a 	mov	r2,zero
  807418:	00004906 	br	807540 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  80741c:	e0bffe17 	ldw	r2,-8(fp)
  807420:	1000051e 	bne	r2,zero,807438 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  807424:	e0bfff17 	ldw	r2,-4(fp)
  807428:	00c00304 	movi	r3,12
  80742c:	10c00005 	stb	r3,0(r2)
        return (0);
  807430:	0005883a 	mov	r2,zero
  807434:	00004206 	br	807540 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  807438:	d0a11703 	ldbu	r2,-31652(gp)
  80743c:	10803fcc 	andi	r2,r2,255
  807440:	10000526 	beq	r2,zero,807458 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
  807444:	e0bfff17 	ldw	r2,-4(fp)
  807448:	00c00444 	movi	r3,17
  80744c:	10c00005 	stb	r3,0(r2)
        return (0);
  807450:	0005883a 	mov	r2,zero
  807454:	00003a06 	br	807540 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807458:	0005303a 	rdctl	r2,status
  80745c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807460:	e0fffc17 	ldw	r3,-16(fp)
  807464:	00bfff84 	movi	r2,-2
  807468:	1884703a 	and	r2,r3,r2
  80746c:	1001703a 	wrctl	status,r2
  
  return context;
  807470:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  807474:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  807478:	e0bffd03 	ldbu	r2,-12(fp)
  80747c:	10803fd8 	cmpnei	r2,r2,255
  807480:	1000031e 	bne	r2,zero,807490 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
  807484:	d0a11817 	ldw	r2,-31648(gp)
  807488:	10800c83 	ldbu	r2,50(r2)
  80748c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807490:	e0fffd03 	ldbu	r3,-12(fp)
  807494:	00802074 	movhi	r2,129
  807498:	1085d804 	addi	r2,r2,5984
  80749c:	18c7883a 	add	r3,r3,r3
  8074a0:	18c7883a 	add	r3,r3,r3
  8074a4:	10c5883a 	add	r2,r2,r3
  8074a8:	10800017 	ldw	r2,0(r2)
  8074ac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  8074b0:	e0bff817 	ldw	r2,-32(fp)
  8074b4:	1000091e 	bne	r2,zero,8074dc <OSTaskNameGet+0x120>
  8074b8:	e0bff617 	ldw	r2,-40(fp)
  8074bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8074c0:	e0bff717 	ldw	r2,-36(fp)
  8074c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8074c8:	e0bfff17 	ldw	r2,-4(fp)
  8074cc:	00c010c4 	movi	r3,67
  8074d0:	10c00005 	stb	r3,0(r2)
        return (0);
  8074d4:	0005883a 	mov	r2,zero
  8074d8:	00001906 	br	807540 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  8074dc:	e0bff817 	ldw	r2,-32(fp)
  8074e0:	10800058 	cmpnei	r2,r2,1
  8074e4:	1000091e 	bne	r2,zero,80750c <OSTaskNameGet+0x150>
  8074e8:	e0bff617 	ldw	r2,-40(fp)
  8074ec:	e0bff915 	stw	r2,-28(fp)
  8074f0:	e0bff917 	ldw	r2,-28(fp)
  8074f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8074f8:	e0bfff17 	ldw	r2,-4(fp)
  8074fc:	00c010c4 	movi	r3,67
  807500:	10c00005 	stb	r3,0(r2)
        return (0);
  807504:	0005883a 	mov	r2,zero
  807508:	00000d06 	br	807540 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  80750c:	e0bff817 	ldw	r2,-32(fp)
  807510:	10801304 	addi	r2,r2,76
  807514:	100b883a 	mov	r5,r2
  807518:	e13ffe17 	ldw	r4,-8(fp)
  80751c:	08025b00 	call	8025b0 <OS_StrCopy>
  807520:	e0bffb05 	stb	r2,-20(fp)
  807524:	e0bff617 	ldw	r2,-40(fp)
  807528:	e0bffa15 	stw	r2,-24(fp)
  80752c:	e0bffa17 	ldw	r2,-24(fp)
  807530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  807534:	e0bfff17 	ldw	r2,-4(fp)
  807538:	10000005 	stb	zero,0(r2)
    return (len);
  80753c:	e0bffb03 	ldbu	r2,-20(fp)
}
  807540:	e037883a 	mov	sp,fp
  807544:	dfc00117 	ldw	ra,4(sp)
  807548:	df000017 	ldw	fp,0(sp)
  80754c:	dec00204 	addi	sp,sp,8
  807550:	f800283a 	ret

00807554 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  807554:	defff304 	addi	sp,sp,-52
  807558:	dfc00c15 	stw	ra,48(sp)
  80755c:	df000b15 	stw	fp,44(sp)
  807560:	df000b04 	addi	fp,sp,44
  807564:	2005883a 	mov	r2,r4
  807568:	e17ffe15 	stw	r5,-8(fp)
  80756c:	e1bfff15 	stw	r6,-4(fp)
  807570:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  807574:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  807578:	e0bfff17 	ldw	r2,-4(fp)
  80757c:	10005c26 	beq	r2,zero,8076f0 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  807580:	e0bffd03 	ldbu	r2,-12(fp)
  807584:	10800570 	cmpltui	r2,r2,21
  807588:	1000071e 	bne	r2,zero,8075a8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  80758c:	e0bffd03 	ldbu	r2,-12(fp)
  807590:	10803fe0 	cmpeqi	r2,r2,255
  807594:	1000041e 	bne	r2,zero,8075a8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  807598:	e0bfff17 	ldw	r2,-4(fp)
  80759c:	00c00a84 	movi	r3,42
  8075a0:	10c00005 	stb	r3,0(r2)
            return;
  8075a4:	00005306 	br	8076f4 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  8075a8:	e0bffe17 	ldw	r2,-8(fp)
  8075ac:	1000041e 	bne	r2,zero,8075c0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  8075b0:	e0bfff17 	ldw	r2,-4(fp)
  8075b4:	00c00304 	movi	r3,12
  8075b8:	10c00005 	stb	r3,0(r2)
        return;
  8075bc:	00004d06 	br	8076f4 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  8075c0:	d0a11703 	ldbu	r2,-31652(gp)
  8075c4:	10803fcc 	andi	r2,r2,255
  8075c8:	10000426 	beq	r2,zero,8075dc <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
  8075cc:	e0bfff17 	ldw	r2,-4(fp)
  8075d0:	00c00484 	movi	r3,18
  8075d4:	10c00005 	stb	r3,0(r2)
        return;
  8075d8:	00004606 	br	8076f4 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8075dc:	0005303a 	rdctl	r2,status
  8075e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8075e4:	e0fffc17 	ldw	r3,-16(fp)
  8075e8:	00bfff84 	movi	r2,-2
  8075ec:	1884703a 	and	r2,r3,r2
  8075f0:	1001703a 	wrctl	status,r2
  
  return context;
  8075f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8075f8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  8075fc:	e0bffd03 	ldbu	r2,-12(fp)
  807600:	10803fd8 	cmpnei	r2,r2,255
  807604:	1000031e 	bne	r2,zero,807614 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
  807608:	d0a11817 	ldw	r2,-31648(gp)
  80760c:	10800c83 	ldbu	r2,50(r2)
  807610:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807614:	e0fffd03 	ldbu	r3,-12(fp)
  807618:	00802074 	movhi	r2,129
  80761c:	1085d804 	addi	r2,r2,5984
  807620:	18c7883a 	add	r3,r3,r3
  807624:	18c7883a 	add	r3,r3,r3
  807628:	10c5883a 	add	r2,r2,r3
  80762c:	10800017 	ldw	r2,0(r2)
  807630:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  807634:	e0bff717 	ldw	r2,-36(fp)
  807638:	1000081e 	bne	r2,zero,80765c <OSTaskNameSet+0x108>
  80763c:	e0bff517 	ldw	r2,-44(fp)
  807640:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807644:	e0bff617 	ldw	r2,-40(fp)
  807648:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  80764c:	e0bfff17 	ldw	r2,-4(fp)
  807650:	00c010c4 	movi	r3,67
  807654:	10c00005 	stb	r3,0(r2)
        return;
  807658:	00002606 	br	8076f4 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  80765c:	e0bff717 	ldw	r2,-36(fp)
  807660:	10800058 	cmpnei	r2,r2,1
  807664:	1000081e 	bne	r2,zero,807688 <OSTaskNameSet+0x134>
  807668:	e0bff517 	ldw	r2,-44(fp)
  80766c:	e0bff815 	stw	r2,-32(fp)
  807670:	e0bff817 	ldw	r2,-32(fp)
  807674:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  807678:	e0bfff17 	ldw	r2,-4(fp)
  80767c:	00c010c4 	movi	r3,67
  807680:	10c00005 	stb	r3,0(r2)
        return;
  807684:	00001b06 	br	8076f4 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  807688:	e13ffe17 	ldw	r4,-8(fp)
  80768c:	08026240 	call	802624 <OS_StrLen>
  807690:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  807694:	e0bffa03 	ldbu	r2,-24(fp)
  807698:	10800830 	cmpltui	r2,r2,32
  80769c:	1000081e 	bne	r2,zero,8076c0 <OSTaskNameSet+0x16c>
  8076a0:	e0bff517 	ldw	r2,-44(fp)
  8076a4:	e0bff915 	stw	r2,-28(fp)
  8076a8:	e0bff917 	ldw	r2,-28(fp)
  8076ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  8076b0:	e0bfff17 	ldw	r2,-4(fp)
  8076b4:	00c01044 	movi	r3,65
  8076b8:	10c00005 	stb	r3,0(r2)
        return;
  8076bc:	00000d06 	br	8076f4 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8076c0:	e0bff717 	ldw	r2,-36(fp)
  8076c4:	10801304 	addi	r2,r2,76
  8076c8:	e17ffe17 	ldw	r5,-8(fp)
  8076cc:	1009883a 	mov	r4,r2
  8076d0:	08025b00 	call	8025b0 <OS_StrCopy>
  8076d4:	e0bff517 	ldw	r2,-44(fp)
  8076d8:	e0bffb15 	stw	r2,-20(fp)
  8076dc:	e0bffb17 	ldw	r2,-20(fp)
  8076e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8076e4:	e0bfff17 	ldw	r2,-4(fp)
  8076e8:	10000005 	stb	zero,0(r2)
  8076ec:	00000106 	br	8076f4 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  8076f0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  8076f4:	e037883a 	mov	sp,fp
  8076f8:	dfc00117 	ldw	ra,4(sp)
  8076fc:	df000017 	ldw	fp,0(sp)
  807700:	dec00204 	addi	sp,sp,8
  807704:	f800283a 	ret

00807708 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  807708:	defff404 	addi	sp,sp,-48
  80770c:	dfc00b15 	stw	ra,44(sp)
  807710:	df000a15 	stw	fp,40(sp)
  807714:	df000a04 	addi	fp,sp,40
  807718:	2005883a 	mov	r2,r4
  80771c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  807720:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  807724:	e0bfff03 	ldbu	r2,-4(fp)
  807728:	10800530 	cmpltui	r2,r2,20
  80772c:	1000021e 	bne	r2,zero,807738 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  807730:	00800a84 	movi	r2,42
  807734:	00006406 	br	8078c8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807738:	0005303a 	rdctl	r2,status
  80773c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807740:	e0fffe17 	ldw	r3,-8(fp)
  807744:	00bfff84 	movi	r2,-2
  807748:	1884703a 	and	r2,r3,r2
  80774c:	1001703a 	wrctl	status,r2
  
  return context;
  807750:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807754:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
  807758:	e0ffff03 	ldbu	r3,-4(fp)
  80775c:	00802074 	movhi	r2,129
  807760:	1085d804 	addi	r2,r2,5984
  807764:	18c7883a 	add	r3,r3,r3
  807768:	18c7883a 	add	r3,r3,r3
  80776c:	10c5883a 	add	r2,r2,r3
  807770:	10800017 	ldw	r2,0(r2)
  807774:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  807778:	e0bff817 	ldw	r2,-32(fp)
  80777c:	1000061e 	bne	r2,zero,807798 <OSTaskResume+0x90>
  807780:	e0bff617 	ldw	r2,-40(fp)
  807784:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807788:	e0bff717 	ldw	r2,-36(fp)
  80778c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  807790:	00801184 	movi	r2,70
  807794:	00004c06 	br	8078c8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  807798:	e0bff817 	ldw	r2,-32(fp)
  80779c:	10800058 	cmpnei	r2,r2,1
  8077a0:	1000061e 	bne	r2,zero,8077bc <OSTaskResume+0xb4>
  8077a4:	e0bff617 	ldw	r2,-40(fp)
  8077a8:	e0bff915 	stw	r2,-28(fp)
  8077ac:	e0bff917 	ldw	r2,-28(fp)
  8077b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8077b4:	008010c4 	movi	r2,67
  8077b8:	00004306 	br	8078c8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8077bc:	e0bff817 	ldw	r2,-32(fp)
  8077c0:	10800c03 	ldbu	r2,48(r2)
  8077c4:	10803fcc 	andi	r2,r2,255
  8077c8:	1080020c 	andi	r2,r2,8
  8077cc:	10003926 	beq	r2,zero,8078b4 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8077d0:	e0bff817 	ldw	r2,-32(fp)
  8077d4:	10c00c03 	ldbu	r3,48(r2)
  8077d8:	00bffdc4 	movi	r2,-9
  8077dc:	1884703a 	and	r2,r3,r2
  8077e0:	1007883a 	mov	r3,r2
  8077e4:	e0bff817 	ldw	r2,-32(fp)
  8077e8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8077ec:	e0bff817 	ldw	r2,-32(fp)
  8077f0:	10800c03 	ldbu	r2,48(r2)
  8077f4:	10803fcc 	andi	r2,r2,255
  8077f8:	1000281e 	bne	r2,zero,80789c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
  8077fc:	e0bff817 	ldw	r2,-32(fp)
  807800:	10800b8b 	ldhu	r2,46(r2)
  807804:	10bfffcc 	andi	r2,r2,65535
  807808:	10001f1e 	bne	r2,zero,807888 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80780c:	e0bff817 	ldw	r2,-32(fp)
  807810:	10c00d83 	ldbu	r3,54(r2)
  807814:	d0a11503 	ldbu	r2,-31660(gp)
  807818:	1884b03a 	or	r2,r3,r2
  80781c:	d0a11505 	stb	r2,-31660(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  807820:	e0bff817 	ldw	r2,-32(fp)
  807824:	10800d03 	ldbu	r2,52(r2)
  807828:	10c03fcc 	andi	r3,r2,255
  80782c:	e0bff817 	ldw	r2,-32(fp)
  807830:	10800d03 	ldbu	r2,52(r2)
  807834:	11003fcc 	andi	r4,r2,255
  807838:	d0a11544 	addi	r2,gp,-31659
  80783c:	2085883a 	add	r2,r4,r2
  807840:	11000003 	ldbu	r4,0(r2)
  807844:	e0bff817 	ldw	r2,-32(fp)
  807848:	10800d43 	ldbu	r2,53(r2)
  80784c:	2084b03a 	or	r2,r4,r2
  807850:	1009883a 	mov	r4,r2
  807854:	d0a11544 	addi	r2,gp,-31659
  807858:	1885883a 	add	r2,r3,r2
  80785c:	11000005 	stb	r4,0(r2)
  807860:	e0bff617 	ldw	r2,-40(fp)
  807864:	e0bffa15 	stw	r2,-24(fp)
  807868:	e0bffa17 	ldw	r2,-24(fp)
  80786c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  807870:	d0a10943 	ldbu	r2,-31707(gp)
  807874:	10803fcc 	andi	r2,r2,255
  807878:	10800058 	cmpnei	r2,r2,1
  80787c:	10000b1e 	bne	r2,zero,8078ac <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
  807880:	080246c0 	call	80246c <OS_Sched>
  807884:	00000906 	br	8078ac <OSTaskResume+0x1a4>
  807888:	e0bff617 	ldw	r2,-40(fp)
  80788c:	e0bffb15 	stw	r2,-20(fp)
  807890:	e0bffb17 	ldw	r2,-20(fp)
  807894:	1001703a 	wrctl	status,r2
  807898:	00000406 	br	8078ac <OSTaskResume+0x1a4>
  80789c:	e0bff617 	ldw	r2,-40(fp)
  8078a0:	e0bffc15 	stw	r2,-16(fp)
  8078a4:	e0bffc17 	ldw	r2,-16(fp)
  8078a8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8078ac:	0005883a 	mov	r2,zero
  8078b0:	00000506 	br	8078c8 <OSTaskResume+0x1c0>
  8078b4:	e0bff617 	ldw	r2,-40(fp)
  8078b8:	e0bffd15 	stw	r2,-12(fp)
  8078bc:	e0bffd17 	ldw	r2,-12(fp)
  8078c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8078c4:	00801104 	movi	r2,68
}
  8078c8:	e037883a 	mov	sp,fp
  8078cc:	dfc00117 	ldw	ra,4(sp)
  8078d0:	df000017 	ldw	fp,0(sp)
  8078d4:	dec00204 	addi	sp,sp,8
  8078d8:	f800283a 	ret

008078dc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  8078dc:	defff304 	addi	sp,sp,-52
  8078e0:	df000c15 	stw	fp,48(sp)
  8078e4:	df000c04 	addi	fp,sp,48
  8078e8:	2005883a 	mov	r2,r4
  8078ec:	e17fff15 	stw	r5,-4(fp)
  8078f0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8078f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  8078f8:	e0bffe03 	ldbu	r2,-8(fp)
  8078fc:	10800570 	cmpltui	r2,r2,21
  807900:	1000051e 	bne	r2,zero,807918 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  807904:	e0bffe03 	ldbu	r2,-8(fp)
  807908:	10803fe0 	cmpeqi	r2,r2,255
  80790c:	1000021e 	bne	r2,zero,807918 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  807910:	00800a84 	movi	r2,42
  807914:	00005d06 	br	807a8c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  807918:	e0bfff17 	ldw	r2,-4(fp)
  80791c:	1000021e 	bne	r2,zero,807928 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  807920:	00800244 	movi	r2,9
  807924:	00005906 	br	807a8c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  807928:	e0bfff17 	ldw	r2,-4(fp)
  80792c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  807930:	e0bfff17 	ldw	r2,-4(fp)
  807934:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807938:	0005303a 	rdctl	r2,status
  80793c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807940:	e0fffd17 	ldw	r3,-12(fp)
  807944:	00bfff84 	movi	r2,-2
  807948:	1884703a 	and	r2,r3,r2
  80794c:	1001703a 	wrctl	status,r2
  
  return context;
  807950:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  807954:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  807958:	e0bffe03 	ldbu	r2,-8(fp)
  80795c:	10803fd8 	cmpnei	r2,r2,255
  807960:	1000031e 	bne	r2,zero,807970 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
  807964:	d0a11817 	ldw	r2,-31648(gp)
  807968:	10800c83 	ldbu	r2,50(r2)
  80796c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807970:	e0fffe03 	ldbu	r3,-8(fp)
  807974:	00802074 	movhi	r2,129
  807978:	1085d804 	addi	r2,r2,5984
  80797c:	18c7883a 	add	r3,r3,r3
  807980:	18c7883a 	add	r3,r3,r3
  807984:	10c5883a 	add	r2,r2,r3
  807988:	10800017 	ldw	r2,0(r2)
  80798c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  807990:	e0bff817 	ldw	r2,-32(fp)
  807994:	1000061e 	bne	r2,zero,8079b0 <OSTaskStkChk+0xd4>
  807998:	e0bff617 	ldw	r2,-40(fp)
  80799c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8079a0:	e0bff717 	ldw	r2,-36(fp)
  8079a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8079a8:	008010c4 	movi	r2,67
  8079ac:	00003706 	br	807a8c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8079b0:	e0bff817 	ldw	r2,-32(fp)
  8079b4:	10800058 	cmpnei	r2,r2,1
  8079b8:	1000061e 	bne	r2,zero,8079d4 <OSTaskStkChk+0xf8>
  8079bc:	e0bff617 	ldw	r2,-40(fp)
  8079c0:	e0bff915 	stw	r2,-28(fp)
  8079c4:	e0bff917 	ldw	r2,-28(fp)
  8079c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8079cc:	008010c4 	movi	r2,67
  8079d0:	00002e06 	br	807a8c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  8079d4:	e0bff817 	ldw	r2,-32(fp)
  8079d8:	1080040b 	ldhu	r2,16(r2)
  8079dc:	10bfffcc 	andi	r2,r2,65535
  8079e0:	1080004c 	andi	r2,r2,1
  8079e4:	1000061e 	bne	r2,zero,807a00 <OSTaskStkChk+0x124>
  8079e8:	e0bff617 	ldw	r2,-40(fp)
  8079ec:	e0bffa15 	stw	r2,-24(fp)
  8079f0:	e0bffa17 	ldw	r2,-24(fp)
  8079f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  8079f8:	00801144 	movi	r2,69
  8079fc:	00002306 	br	807a8c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
  807a00:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
  807a04:	e0bff817 	ldw	r2,-32(fp)
  807a08:	10800317 	ldw	r2,12(r2)
  807a0c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
  807a10:	e0bff817 	ldw	r2,-32(fp)
  807a14:	10800217 	ldw	r2,8(r2)
  807a18:	e0bff415 	stw	r2,-48(fp)
  807a1c:	e0bff617 	ldw	r2,-40(fp)
  807a20:	e0bffb15 	stw	r2,-20(fp)
  807a24:	e0bffb17 	ldw	r2,-20(fp)
  807a28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  807a2c:	00000306 	br	807a3c <OSTaskStkChk+0x160>
        nfree++;
  807a30:	e0bff517 	ldw	r2,-44(fp)
  807a34:	10800044 	addi	r2,r2,1
  807a38:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  807a3c:	e0bff417 	ldw	r2,-48(fp)
  807a40:	10c00104 	addi	r3,r2,4
  807a44:	e0fff415 	stw	r3,-48(fp)
  807a48:	10800017 	ldw	r2,0(r2)
  807a4c:	103ff826 	beq	r2,zero,807a30 <__alt_mem_onchip_memory2_0+0xff803a30>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  807a50:	e0bff517 	ldw	r2,-44(fp)
  807a54:	1085883a 	add	r2,r2,r2
  807a58:	1085883a 	add	r2,r2,r2
  807a5c:	1007883a 	mov	r3,r2
  807a60:	e0bfff17 	ldw	r2,-4(fp)
  807a64:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  807a68:	e0fffc17 	ldw	r3,-16(fp)
  807a6c:	e0bff517 	ldw	r2,-44(fp)
  807a70:	1885c83a 	sub	r2,r3,r2
  807a74:	1085883a 	add	r2,r2,r2
  807a78:	1085883a 	add	r2,r2,r2
  807a7c:	1007883a 	mov	r3,r2
  807a80:	e0bfff17 	ldw	r2,-4(fp)
  807a84:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  807a88:	0005883a 	mov	r2,zero
}
  807a8c:	e037883a 	mov	sp,fp
  807a90:	df000017 	ldw	fp,0(sp)
  807a94:	dec00104 	addi	sp,sp,4
  807a98:	f800283a 	ret

00807a9c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  807a9c:	defff504 	addi	sp,sp,-44
  807aa0:	dfc00a15 	stw	ra,40(sp)
  807aa4:	df000915 	stw	fp,36(sp)
  807aa8:	df000904 	addi	fp,sp,36
  807aac:	2005883a 	mov	r2,r4
  807ab0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807ab4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  807ab8:	e0bfff03 	ldbu	r2,-4(fp)
  807abc:	10800518 	cmpnei	r2,r2,20
  807ac0:	1000021e 	bne	r2,zero,807acc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  807ac4:	008011c4 	movi	r2,71
  807ac8:	00006806 	br	807c6c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  807acc:	e0bfff03 	ldbu	r2,-4(fp)
  807ad0:	10800530 	cmpltui	r2,r2,20
  807ad4:	1000051e 	bne	r2,zero,807aec <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  807ad8:	e0bfff03 	ldbu	r2,-4(fp)
  807adc:	10803fe0 	cmpeqi	r2,r2,255
  807ae0:	1000021e 	bne	r2,zero,807aec <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  807ae4:	00800a84 	movi	r2,42
  807ae8:	00006006 	br	807c6c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807aec:	0005303a 	rdctl	r2,status
  807af0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807af4:	e0fffe17 	ldw	r3,-8(fp)
  807af8:	00bfff84 	movi	r2,-2
  807afc:	1884703a 	and	r2,r3,r2
  807b00:	1001703a 	wrctl	status,r2
  
  return context;
  807b04:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  807b08:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  807b0c:	e0bfff03 	ldbu	r2,-4(fp)
  807b10:	10803fd8 	cmpnei	r2,r2,255
  807b14:	1000061e 	bne	r2,zero,807b30 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
  807b18:	d0a11817 	ldw	r2,-31648(gp)
  807b1c:	10800c83 	ldbu	r2,50(r2)
  807b20:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  807b24:	00800044 	movi	r2,1
  807b28:	e0bff705 	stb	r2,-36(fp)
  807b2c:	00000906 	br	807b54 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  807b30:	d0a11817 	ldw	r2,-31648(gp)
  807b34:	10800c83 	ldbu	r2,50(r2)
  807b38:	10c03fcc 	andi	r3,r2,255
  807b3c:	e0bfff03 	ldbu	r2,-4(fp)
  807b40:	1880031e 	bne	r3,r2,807b50 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
  807b44:	00800044 	movi	r2,1
  807b48:	e0bff705 	stb	r2,-36(fp)
  807b4c:	00000106 	br	807b54 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  807b50:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807b54:	e0ffff03 	ldbu	r3,-4(fp)
  807b58:	00802074 	movhi	r2,129
  807b5c:	1085d804 	addi	r2,r2,5984
  807b60:	18c7883a 	add	r3,r3,r3
  807b64:	18c7883a 	add	r3,r3,r3
  807b68:	10c5883a 	add	r2,r2,r3
  807b6c:	10800017 	ldw	r2,0(r2)
  807b70:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  807b74:	e0bffa17 	ldw	r2,-24(fp)
  807b78:	1000061e 	bne	r2,zero,807b94 <OSTaskSuspend+0xf8>
  807b7c:	e0bff817 	ldw	r2,-32(fp)
  807b80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807b84:	e0bff917 	ldw	r2,-28(fp)
  807b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  807b8c:	00801204 	movi	r2,72
  807b90:	00003606 	br	807c6c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  807b94:	e0bffa17 	ldw	r2,-24(fp)
  807b98:	10800058 	cmpnei	r2,r2,1
  807b9c:	1000061e 	bne	r2,zero,807bb8 <OSTaskSuspend+0x11c>
  807ba0:	e0bff817 	ldw	r2,-32(fp)
  807ba4:	e0bffb15 	stw	r2,-20(fp)
  807ba8:	e0bffb17 	ldw	r2,-20(fp)
  807bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  807bb0:	008010c4 	movi	r2,67
  807bb4:	00002d06 	br	807c6c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
  807bb8:	e0bffa17 	ldw	r2,-24(fp)
  807bbc:	10800d03 	ldbu	r2,52(r2)
  807bc0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  807bc4:	e0fffd03 	ldbu	r3,-12(fp)
  807bc8:	e13ffd03 	ldbu	r4,-12(fp)
  807bcc:	d0a11544 	addi	r2,gp,-31659
  807bd0:	2085883a 	add	r2,r4,r2
  807bd4:	10800003 	ldbu	r2,0(r2)
  807bd8:	1009883a 	mov	r4,r2
  807bdc:	e0bffa17 	ldw	r2,-24(fp)
  807be0:	10800d43 	ldbu	r2,53(r2)
  807be4:	0084303a 	nor	r2,zero,r2
  807be8:	2084703a 	and	r2,r4,r2
  807bec:	1009883a 	mov	r4,r2
  807bf0:	d0a11544 	addi	r2,gp,-31659
  807bf4:	1885883a 	add	r2,r3,r2
  807bf8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
  807bfc:	e0fffd03 	ldbu	r3,-12(fp)
  807c00:	d0a11544 	addi	r2,gp,-31659
  807c04:	1885883a 	add	r2,r3,r2
  807c08:	10800003 	ldbu	r2,0(r2)
  807c0c:	10803fcc 	andi	r2,r2,255
  807c10:	1000071e 	bne	r2,zero,807c30 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  807c14:	e0bffa17 	ldw	r2,-24(fp)
  807c18:	10800d83 	ldbu	r2,54(r2)
  807c1c:	0084303a 	nor	r2,zero,r2
  807c20:	1007883a 	mov	r3,r2
  807c24:	d0a11503 	ldbu	r2,-31660(gp)
  807c28:	1884703a 	and	r2,r3,r2
  807c2c:	d0a11505 	stb	r2,-31660(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  807c30:	e0bffa17 	ldw	r2,-24(fp)
  807c34:	10800c03 	ldbu	r2,48(r2)
  807c38:	10800214 	ori	r2,r2,8
  807c3c:	1007883a 	mov	r3,r2
  807c40:	e0bffa17 	ldw	r2,-24(fp)
  807c44:	10c00c05 	stb	r3,48(r2)
  807c48:	e0bff817 	ldw	r2,-32(fp)
  807c4c:	e0bffc15 	stw	r2,-16(fp)
  807c50:	e0bffc17 	ldw	r2,-16(fp)
  807c54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  807c58:	e0bff703 	ldbu	r2,-36(fp)
  807c5c:	10800058 	cmpnei	r2,r2,1
  807c60:	1000011e 	bne	r2,zero,807c68 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
  807c64:	080246c0 	call	80246c <OS_Sched>
    }
    return (OS_ERR_NONE);
  807c68:	0005883a 	mov	r2,zero
}
  807c6c:	e037883a 	mov	sp,fp
  807c70:	dfc00117 	ldw	ra,4(sp)
  807c74:	df000017 	ldw	fp,0(sp)
  807c78:	dec00204 	addi	sp,sp,8
  807c7c:	f800283a 	ret

00807c80 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  807c80:	defff604 	addi	sp,sp,-40
  807c84:	dfc00915 	stw	ra,36(sp)
  807c88:	df000815 	stw	fp,32(sp)
  807c8c:	df000804 	addi	fp,sp,32
  807c90:	2005883a 	mov	r2,r4
  807c94:	e17fff15 	stw	r5,-4(fp)
  807c98:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807c9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  807ca0:	e0bffe03 	ldbu	r2,-8(fp)
  807ca4:	10800570 	cmpltui	r2,r2,21
  807ca8:	1000051e 	bne	r2,zero,807cc0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  807cac:	e0bffe03 	ldbu	r2,-8(fp)
  807cb0:	10803fe0 	cmpeqi	r2,r2,255
  807cb4:	1000021e 	bne	r2,zero,807cc0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  807cb8:	00800a84 	movi	r2,42
  807cbc:	00003406 	br	807d90 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  807cc0:	e0bfff17 	ldw	r2,-4(fp)
  807cc4:	1000021e 	bne	r2,zero,807cd0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  807cc8:	00800244 	movi	r2,9
  807ccc:	00003006 	br	807d90 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807cd0:	0005303a 	rdctl	r2,status
  807cd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807cd8:	e0fffd17 	ldw	r3,-12(fp)
  807cdc:	00bfff84 	movi	r2,-2
  807ce0:	1884703a 	and	r2,r3,r2
  807ce4:	1001703a 	wrctl	status,r2
  
  return context;
  807ce8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  807cec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  807cf0:	e0bffe03 	ldbu	r2,-8(fp)
  807cf4:	10803fd8 	cmpnei	r2,r2,255
  807cf8:	1000031e 	bne	r2,zero,807d08 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
  807cfc:	d0a11817 	ldw	r2,-31648(gp)
  807d00:	10800c83 	ldbu	r2,50(r2)
  807d04:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  807d08:	e0fffe03 	ldbu	r3,-8(fp)
  807d0c:	00802074 	movhi	r2,129
  807d10:	1085d804 	addi	r2,r2,5984
  807d14:	18c7883a 	add	r3,r3,r3
  807d18:	18c7883a 	add	r3,r3,r3
  807d1c:	10c5883a 	add	r2,r2,r3
  807d20:	10800017 	ldw	r2,0(r2)
  807d24:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  807d28:	e0bffa17 	ldw	r2,-24(fp)
  807d2c:	1000061e 	bne	r2,zero,807d48 <OSTaskQuery+0xc8>
  807d30:	e0bff817 	ldw	r2,-32(fp)
  807d34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807d38:	e0bff917 	ldw	r2,-28(fp)
  807d3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  807d40:	00800a44 	movi	r2,41
  807d44:	00001206 	br	807d90 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  807d48:	e0bffa17 	ldw	r2,-24(fp)
  807d4c:	10800058 	cmpnei	r2,r2,1
  807d50:	1000061e 	bne	r2,zero,807d6c <OSTaskQuery+0xec>
  807d54:	e0bff817 	ldw	r2,-32(fp)
  807d58:	e0bffb15 	stw	r2,-20(fp)
  807d5c:	e0bffb17 	ldw	r2,-20(fp)
  807d60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  807d64:	008010c4 	movi	r2,67
  807d68:	00000906 	br	807d90 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  807d6c:	01801b04 	movi	r6,108
  807d70:	e17ffa17 	ldw	r5,-24(fp)
  807d74:	e13fff17 	ldw	r4,-4(fp)
  807d78:	08024040 	call	802404 <OS_MemCopy>
  807d7c:	e0bff817 	ldw	r2,-32(fp)
  807d80:	e0bffc15 	stw	r2,-16(fp)
  807d84:	e0bffc17 	ldw	r2,-16(fp)
  807d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  807d8c:	0005883a 	mov	r2,zero
}
  807d90:	e037883a 	mov	sp,fp
  807d94:	dfc00117 	ldw	ra,4(sp)
  807d98:	df000017 	ldw	fp,0(sp)
  807d9c:	dec00204 	addi	sp,sp,8
  807da0:	f800283a 	ret

00807da4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  807da4:	defffc04 	addi	sp,sp,-16
  807da8:	df000315 	stw	fp,12(sp)
  807dac:	df000304 	addi	fp,sp,12
  807db0:	e13ffd15 	stw	r4,-12(fp)
  807db4:	e17ffe15 	stw	r5,-8(fp)
  807db8:	3005883a 	mov	r2,r6
  807dbc:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  807dc0:	e0bfff0b 	ldhu	r2,-4(fp)
  807dc4:	1080004c 	andi	r2,r2,1
  807dc8:	10000d26 	beq	r2,zero,807e00 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  807dcc:	e0bfff0b 	ldhu	r2,-4(fp)
  807dd0:	1080008c 	andi	r2,r2,2
  807dd4:	10000a26 	beq	r2,zero,807e00 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  807dd8:	00000706 	br	807df8 <OS_TaskStkClr+0x54>
                size--;
  807ddc:	e0bffe17 	ldw	r2,-8(fp)
  807de0:	10bfffc4 	addi	r2,r2,-1
  807de4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  807de8:	e0bffd17 	ldw	r2,-12(fp)
  807dec:	10c00104 	addi	r3,r2,4
  807df0:	e0fffd15 	stw	r3,-12(fp)
  807df4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  807df8:	e0bffe17 	ldw	r2,-8(fp)
  807dfc:	103ff71e 	bne	r2,zero,807ddc <__alt_mem_onchip_memory2_0+0xff803ddc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  807e00:	0001883a 	nop
  807e04:	e037883a 	mov	sp,fp
  807e08:	df000017 	ldw	fp,0(sp)
  807e0c:	dec00104 	addi	sp,sp,4
  807e10:	f800283a 	ret

00807e14 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  807e14:	defff904 	addi	sp,sp,-28
  807e18:	dfc00615 	stw	ra,24(sp)
  807e1c:	df000515 	stw	fp,20(sp)
  807e20:	df000504 	addi	fp,sp,20
  807e24:	2005883a 	mov	r2,r4
  807e28:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  807e2c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807e30:	d0a11703 	ldbu	r2,-31652(gp)
  807e34:	10803fcc 	andi	r2,r2,255
  807e38:	1000311e 	bne	r2,zero,807f00 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  807e3c:	e0bfff0b 	ldhu	r2,-4(fp)
  807e40:	10003026 	beq	r2,zero,807f04 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e44:	0005303a 	rdctl	r2,status
  807e48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e4c:	e0fffe17 	ldw	r3,-8(fp)
  807e50:	00bfff84 	movi	r2,-2
  807e54:	1884703a 	and	r2,r3,r2
  807e58:	1001703a 	wrctl	status,r2
  
  return context;
  807e5c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  807e60:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  807e64:	d0a11817 	ldw	r2,-31648(gp)
  807e68:	10800d03 	ldbu	r2,52(r2)
  807e6c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  807e70:	e0fffd03 	ldbu	r3,-12(fp)
  807e74:	e13ffd03 	ldbu	r4,-12(fp)
  807e78:	d0a11544 	addi	r2,gp,-31659
  807e7c:	2085883a 	add	r2,r4,r2
  807e80:	10800003 	ldbu	r2,0(r2)
  807e84:	1009883a 	mov	r4,r2
  807e88:	d0a11817 	ldw	r2,-31648(gp)
  807e8c:	10800d43 	ldbu	r2,53(r2)
  807e90:	0084303a 	nor	r2,zero,r2
  807e94:	2084703a 	and	r2,r4,r2
  807e98:	1009883a 	mov	r4,r2
  807e9c:	d0a11544 	addi	r2,gp,-31659
  807ea0:	1885883a 	add	r2,r3,r2
  807ea4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
  807ea8:	e0fffd03 	ldbu	r3,-12(fp)
  807eac:	d0a11544 	addi	r2,gp,-31659
  807eb0:	1885883a 	add	r2,r3,r2
  807eb4:	10800003 	ldbu	r2,0(r2)
  807eb8:	10803fcc 	andi	r2,r2,255
  807ebc:	1000071e 	bne	r2,zero,807edc <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  807ec0:	d0a11817 	ldw	r2,-31648(gp)
  807ec4:	10800d83 	ldbu	r2,54(r2)
  807ec8:	0084303a 	nor	r2,zero,r2
  807ecc:	1007883a 	mov	r3,r2
  807ed0:	d0a11503 	ldbu	r2,-31660(gp)
  807ed4:	1884703a 	and	r2,r3,r2
  807ed8:	d0a11505 	stb	r2,-31660(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  807edc:	d0a11817 	ldw	r2,-31648(gp)
  807ee0:	e0ffff0b 	ldhu	r3,-4(fp)
  807ee4:	10c00b8d 	sth	r3,46(r2)
  807ee8:	e0bffb17 	ldw	r2,-20(fp)
  807eec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807ef0:	e0bffc17 	ldw	r2,-16(fp)
  807ef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  807ef8:	080246c0 	call	80246c <OS_Sched>
  807efc:	00000106 	br	807f04 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  807f00:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  807f04:	e037883a 	mov	sp,fp
  807f08:	dfc00117 	ldw	ra,4(sp)
  807f0c:	df000017 	ldw	fp,0(sp)
  807f10:	dec00204 	addi	sp,sp,8
  807f14:	f800283a 	ret

00807f18 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  807f18:	defff704 	addi	sp,sp,-36
  807f1c:	dfc00815 	stw	ra,32(sp)
  807f20:	df000715 	stw	fp,28(sp)
  807f24:	dc000615 	stw	r16,24(sp)
  807f28:	df000704 	addi	fp,sp,28
  807f2c:	2011883a 	mov	r8,r4
  807f30:	2809883a 	mov	r4,r5
  807f34:	3007883a 	mov	r3,r6
  807f38:	3805883a 	mov	r2,r7
  807f3c:	e23ffb05 	stb	r8,-20(fp)
  807f40:	e13ffc05 	stb	r4,-16(fp)
  807f44:	e0fffd05 	stb	r3,-12(fp)
  807f48:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  807f4c:	d0a11703 	ldbu	r2,-31652(gp)
  807f50:	10803fcc 	andi	r2,r2,255
  807f54:	10000226 	beq	r2,zero,807f60 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  807f58:	00801544 	movi	r2,85
  807f5c:	00004706 	br	80807c <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  807f60:	e0bffb03 	ldbu	r2,-20(fp)
  807f64:	1000081e 	bne	r2,zero,807f88 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
  807f68:	e0bffc03 	ldbu	r2,-16(fp)
  807f6c:	1000061e 	bne	r2,zero,807f88 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
  807f70:	e0bffd03 	ldbu	r2,-12(fp)
  807f74:	1000041e 	bne	r2,zero,807f88 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
  807f78:	e0bffe0b 	ldhu	r2,-8(fp)
  807f7c:	1000021e 	bne	r2,zero,807f88 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
  807f80:	00801504 	movi	r2,84
  807f84:	00003d06 	br	80807c <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
  807f88:	e0bffc03 	ldbu	r2,-16(fp)
  807f8c:	10800f30 	cmpltui	r2,r2,60
  807f90:	1000021e 	bne	r2,zero,807f9c <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  807f94:	00801444 	movi	r2,81
  807f98:	00003806 	br	80807c <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
  807f9c:	e0bffd03 	ldbu	r2,-12(fp)
  807fa0:	10800f30 	cmpltui	r2,r2,60
  807fa4:	1000021e 	bne	r2,zero,807fb0 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
  807fa8:	00801484 	movi	r2,82
  807fac:	00003306 	br	80807c <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
  807fb0:	e0bffe0b 	ldhu	r2,-8(fp)
  807fb4:	1080fa30 	cmpltui	r2,r2,1000
  807fb8:	1000021e 	bne	r2,zero,807fc4 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
  807fbc:	008014c4 	movi	r2,83
  807fc0:	00002e06 	br	80807c <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  807fc4:	e0bffb03 	ldbu	r2,-20(fp)
  807fc8:	01438404 	movi	r5,3600
  807fcc:	1009883a 	mov	r4,r2
  807fd0:	0809c740 	call	809c74 <__mulsi3>
  807fd4:	1021883a 	mov	r16,r2
  807fd8:	e0bffc03 	ldbu	r2,-16(fp)
  807fdc:	01400f04 	movi	r5,60
  807fe0:	1009883a 	mov	r4,r2
  807fe4:	0809c740 	call	809c74 <__mulsi3>
  807fe8:	8087883a 	add	r3,r16,r2
  807fec:	e0bffd03 	ldbu	r2,-12(fp)
  807ff0:	1885883a 	add	r2,r3,r2
  807ff4:	0140fa04 	movi	r5,1000
  807ff8:	1009883a 	mov	r4,r2
  807ffc:	0809c740 	call	809c74 <__mulsi3>
  808000:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  808004:	e0bffe0b 	ldhu	r2,-8(fp)
  808008:	0140fa04 	movi	r5,1000
  80800c:	1009883a 	mov	r4,r2
  808010:	0809c740 	call	809c74 <__mulsi3>
  808014:	0140fa04 	movi	r5,1000
  808018:	1009883a 	mov	r4,r2
  80801c:	0809bb80 	call	809bb8 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  808020:	8085883a 	add	r2,r16,r2
  808024:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  808028:	e0bffa17 	ldw	r2,-24(fp)
  80802c:	1004d43a 	srli	r2,r2,16
  808030:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  808034:	e0bffa17 	ldw	r2,-24(fp)
  808038:	10bfffcc 	andi	r2,r2,65535
  80803c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  808040:	e0bffa17 	ldw	r2,-24(fp)
  808044:	10bfffcc 	andi	r2,r2,65535
  808048:	1009883a 	mov	r4,r2
  80804c:	0807e140 	call	807e14 <OSTimeDly>
    while (loops > 0) {
  808050:	00000706 	br	808070 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
  808054:	01200014 	movui	r4,32768
  808058:	0807e140 	call	807e14 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  80805c:	01200014 	movui	r4,32768
  808060:	0807e140 	call	807e14 <OSTimeDly>
        loops--;
  808064:	e0bff90b 	ldhu	r2,-28(fp)
  808068:	10bfffc4 	addi	r2,r2,-1
  80806c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  808070:	e0bff90b 	ldhu	r2,-28(fp)
  808074:	103ff71e 	bne	r2,zero,808054 <__alt_mem_onchip_memory2_0+0xff804054>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  808078:	0005883a 	mov	r2,zero
}
  80807c:	e6ffff04 	addi	sp,fp,-4
  808080:	dfc00217 	ldw	ra,8(sp)
  808084:	df000117 	ldw	fp,4(sp)
  808088:	dc000017 	ldw	r16,0(sp)
  80808c:	dec00304 	addi	sp,sp,12
  808090:	f800283a 	ret

00808094 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  808094:	defff504 	addi	sp,sp,-44
  808098:	dfc00a15 	stw	ra,40(sp)
  80809c:	df000915 	stw	fp,36(sp)
  8080a0:	df000904 	addi	fp,sp,36
  8080a4:	2005883a 	mov	r2,r4
  8080a8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8080ac:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  8080b0:	e0bfff03 	ldbu	r2,-4(fp)
  8080b4:	10800530 	cmpltui	r2,r2,20
  8080b8:	1000021e 	bne	r2,zero,8080c4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8080bc:	00800a84 	movi	r2,42
  8080c0:	00006406 	br	808254 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8080c4:	0005303a 	rdctl	r2,status
  8080c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8080cc:	e0fffe17 	ldw	r3,-8(fp)
  8080d0:	00bfff84 	movi	r2,-2
  8080d4:	1884703a 	and	r2,r3,r2
  8080d8:	1001703a 	wrctl	status,r2
  
  return context;
  8080dc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
  8080e0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  8080e4:	e0ffff03 	ldbu	r3,-4(fp)
  8080e8:	00802074 	movhi	r2,129
  8080ec:	1085d804 	addi	r2,r2,5984
  8080f0:	18c7883a 	add	r3,r3,r3
  8080f4:	18c7883a 	add	r3,r3,r3
  8080f8:	10c5883a 	add	r2,r2,r3
  8080fc:	10800017 	ldw	r2,0(r2)
  808100:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
  808104:	e0bff917 	ldw	r2,-28(fp)
  808108:	1000061e 	bne	r2,zero,808124 <OSTimeDlyResume+0x90>
  80810c:	e0bff717 	ldw	r2,-36(fp)
  808110:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808114:	e0bff817 	ldw	r2,-32(fp)
  808118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  80811c:	008010c4 	movi	r2,67
  808120:	00004c06 	br	808254 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
  808124:	e0bff917 	ldw	r2,-28(fp)
  808128:	10800058 	cmpnei	r2,r2,1
  80812c:	1000061e 	bne	r2,zero,808148 <OSTimeDlyResume+0xb4>
  808130:	e0bff717 	ldw	r2,-36(fp)
  808134:	e0bffa15 	stw	r2,-24(fp)
  808138:	e0bffa17 	ldw	r2,-24(fp)
  80813c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  808140:	008010c4 	movi	r2,67
  808144:	00004306 	br	808254 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  808148:	e0bff917 	ldw	r2,-28(fp)
  80814c:	10800b8b 	ldhu	r2,46(r2)
  808150:	10bfffcc 	andi	r2,r2,65535
  808154:	1000061e 	bne	r2,zero,808170 <OSTimeDlyResume+0xdc>
  808158:	e0bff717 	ldw	r2,-36(fp)
  80815c:	e0bffb15 	stw	r2,-20(fp)
  808160:	e0bffb17 	ldw	r2,-20(fp)
  808164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  808168:	00801404 	movi	r2,80
  80816c:	00003906 	br	808254 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  808170:	e0bff917 	ldw	r2,-28(fp)
  808174:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  808178:	e0bff917 	ldw	r2,-28(fp)
  80817c:	10800c03 	ldbu	r2,48(r2)
  808180:	10803fcc 	andi	r2,r2,255
  808184:	10800dcc 	andi	r2,r2,55
  808188:	10000b26 	beq	r2,zero,8081b8 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  80818c:	e0bff917 	ldw	r2,-28(fp)
  808190:	10c00c03 	ldbu	r3,48(r2)
  808194:	00bff204 	movi	r2,-56
  808198:	1884703a 	and	r2,r3,r2
  80819c:	1007883a 	mov	r3,r2
  8081a0:	e0bff917 	ldw	r2,-28(fp)
  8081a4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  8081a8:	e0bff917 	ldw	r2,-28(fp)
  8081ac:	00c00044 	movi	r3,1
  8081b0:	10c00c45 	stb	r3,49(r2)
  8081b4:	00000206 	br	8081c0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  8081b8:	e0bff917 	ldw	r2,-28(fp)
  8081bc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  8081c0:	e0bff917 	ldw	r2,-28(fp)
  8081c4:	10800c03 	ldbu	r2,48(r2)
  8081c8:	10803fcc 	andi	r2,r2,255
  8081cc:	1080020c 	andi	r2,r2,8
  8081d0:	10001b1e 	bne	r2,zero,808240 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  8081d4:	e0bff917 	ldw	r2,-28(fp)
  8081d8:	10c00d83 	ldbu	r3,54(r2)
  8081dc:	d0a11503 	ldbu	r2,-31660(gp)
  8081e0:	1884b03a 	or	r2,r3,r2
  8081e4:	d0a11505 	stb	r2,-31660(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8081e8:	e0bff917 	ldw	r2,-28(fp)
  8081ec:	10800d03 	ldbu	r2,52(r2)
  8081f0:	10c03fcc 	andi	r3,r2,255
  8081f4:	e0bff917 	ldw	r2,-28(fp)
  8081f8:	10800d03 	ldbu	r2,52(r2)
  8081fc:	11003fcc 	andi	r4,r2,255
  808200:	d0a11544 	addi	r2,gp,-31659
  808204:	2085883a 	add	r2,r4,r2
  808208:	11000003 	ldbu	r4,0(r2)
  80820c:	e0bff917 	ldw	r2,-28(fp)
  808210:	10800d43 	ldbu	r2,53(r2)
  808214:	2084b03a 	or	r2,r4,r2
  808218:	1009883a 	mov	r4,r2
  80821c:	d0a11544 	addi	r2,gp,-31659
  808220:	1885883a 	add	r2,r3,r2
  808224:	11000005 	stb	r4,0(r2)
  808228:	e0bff717 	ldw	r2,-36(fp)
  80822c:	e0bffc15 	stw	r2,-16(fp)
  808230:	e0bffc17 	ldw	r2,-16(fp)
  808234:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  808238:	080246c0 	call	80246c <OS_Sched>
  80823c:	00000406 	br	808250 <OSTimeDlyResume+0x1bc>
  808240:	e0bff717 	ldw	r2,-36(fp)
  808244:	e0bffd15 	stw	r2,-12(fp)
  808248:	e0bffd17 	ldw	r2,-12(fp)
  80824c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  808250:	0005883a 	mov	r2,zero
}
  808254:	e037883a 	mov	sp,fp
  808258:	dfc00117 	ldw	ra,4(sp)
  80825c:	df000017 	ldw	fp,0(sp)
  808260:	dec00204 	addi	sp,sp,8
  808264:	f800283a 	ret

00808268 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  808268:	defffb04 	addi	sp,sp,-20
  80826c:	df000415 	stw	fp,16(sp)
  808270:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  808274:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808278:	0005303a 	rdctl	r2,status
  80827c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808280:	e0fffe17 	ldw	r3,-8(fp)
  808284:	00bfff84 	movi	r2,-2
  808288:	1884703a 	and	r2,r3,r2
  80828c:	1001703a 	wrctl	status,r2
  
  return context;
  808290:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  808294:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
  808298:	d0a11917 	ldw	r2,-31644(gp)
  80829c:	e0bffd15 	stw	r2,-12(fp)
  8082a0:	e0bffc17 	ldw	r2,-16(fp)
  8082a4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8082a8:	e0bfff17 	ldw	r2,-4(fp)
  8082ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  8082b0:	e0bffd17 	ldw	r2,-12(fp)
}
  8082b4:	e037883a 	mov	sp,fp
  8082b8:	df000017 	ldw	fp,0(sp)
  8082bc:	dec00104 	addi	sp,sp,4
  8082c0:	f800283a 	ret

008082c4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  8082c4:	defffb04 	addi	sp,sp,-20
  8082c8:	df000415 	stw	fp,16(sp)
  8082cc:	df000404 	addi	fp,sp,16
  8082d0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8082d4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8082d8:	0005303a 	rdctl	r2,status
  8082dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8082e0:	e0fffd17 	ldw	r3,-12(fp)
  8082e4:	00bfff84 	movi	r2,-2
  8082e8:	1884703a 	and	r2,r3,r2
  8082ec:	1001703a 	wrctl	status,r2
  
  return context;
  8082f0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8082f4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
  8082f8:	e0bfff17 	ldw	r2,-4(fp)
  8082fc:	d0a11915 	stw	r2,-31644(gp)
  808300:	e0bffc17 	ldw	r2,-16(fp)
  808304:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808308:	e0bffe17 	ldw	r2,-8(fp)
  80830c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  808310:	0001883a 	nop
  808314:	e037883a 	mov	sp,fp
  808318:	df000017 	ldw	fp,0(sp)
  80831c:	dec00104 	addi	sp,sp,4
  808320:	f800283a 	ret

00808324 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  808324:	defffd04 	addi	sp,sp,-12
  808328:	dfc00215 	stw	ra,8(sp)
  80832c:	df000115 	stw	fp,4(sp)
  808330:	df000104 	addi	fp,sp,4
  808334:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  808338:	d1602304 	addi	r5,gp,-32628
  80833c:	e13fff17 	ldw	r4,-4(fp)
  808340:	08088ac0 	call	8088ac <alt_dev_llist_insert>
}
  808344:	e037883a 	mov	sp,fp
  808348:	dfc00117 	ldw	ra,4(sp)
  80834c:	df000017 	ldw	fp,0(sp)
  808350:	dec00204 	addi	sp,sp,8
  808354:	f800283a 	ret

00808358 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  808358:	defffd04 	addi	sp,sp,-12
  80835c:	dfc00215 	stw	ra,8(sp)
  808360:	df000115 	stw	fp,4(sp)
  808364:	df000104 	addi	fp,sp,4
  808368:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80836c:	080921c0 	call	80921c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  808370:	00800044 	movi	r2,1
  808374:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  808378:	0001883a 	nop
  80837c:	e037883a 	mov	sp,fp
  808380:	dfc00117 	ldw	ra,4(sp)
  808384:	df000017 	ldw	fp,0(sp)
  808388:	dec00204 	addi	sp,sp,8
  80838c:	f800283a 	ret

00808390 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  808390:	defffe04 	addi	sp,sp,-8
  808394:	dfc00115 	stw	ra,4(sp)
  808398:	df000015 	stw	fp,0(sp)
  80839c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8083a0:	01c0fa04 	movi	r7,1000
  8083a4:	000d883a 	mov	r6,zero
  8083a8:	000b883a 	mov	r5,zero
  8083ac:	01004074 	movhi	r4,257
  8083b0:	21240004 	addi	r4,r4,-28672
  8083b4:	08086940 	call	808694 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8083b8:	01002074 	movhi	r4,129
  8083bc:	2127cd04 	addi	r4,r4,-24780
  8083c0:	08083240 	call	808324 <alt_dev_reg>
}
  8083c4:	0001883a 	nop
  8083c8:	e037883a 	mov	sp,fp
  8083cc:	dfc00117 	ldw	ra,4(sp)
  8083d0:	df000017 	ldw	fp,0(sp)
  8083d4:	dec00204 	addi	sp,sp,8
  8083d8:	f800283a 	ret

008083dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8083dc:	defffa04 	addi	sp,sp,-24
  8083e0:	dfc00515 	stw	ra,20(sp)
  8083e4:	df000415 	stw	fp,16(sp)
  8083e8:	df000404 	addi	fp,sp,16
  8083ec:	e13ffd15 	stw	r4,-12(fp)
  8083f0:	e17ffe15 	stw	r5,-8(fp)
  8083f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8083f8:	e0bffd17 	ldw	r2,-12(fp)
  8083fc:	10800017 	ldw	r2,0(r2)
  808400:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  808404:	e0bffc17 	ldw	r2,-16(fp)
  808408:	10c00a04 	addi	r3,r2,40
  80840c:	e0bffd17 	ldw	r2,-12(fp)
  808410:	10800217 	ldw	r2,8(r2)
  808414:	100f883a 	mov	r7,r2
  808418:	e1bfff17 	ldw	r6,-4(fp)
  80841c:	e17ffe17 	ldw	r5,-8(fp)
  808420:	1809883a 	mov	r4,r3
  808424:	080849c0 	call	80849c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  808428:	e037883a 	mov	sp,fp
  80842c:	dfc00117 	ldw	ra,4(sp)
  808430:	df000017 	ldw	fp,0(sp)
  808434:	dec00204 	addi	sp,sp,8
  808438:	f800283a 	ret

0080843c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80843c:	defffa04 	addi	sp,sp,-24
  808440:	dfc00515 	stw	ra,20(sp)
  808444:	df000415 	stw	fp,16(sp)
  808448:	df000404 	addi	fp,sp,16
  80844c:	e13ffd15 	stw	r4,-12(fp)
  808450:	e17ffe15 	stw	r5,-8(fp)
  808454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  808458:	e0bffd17 	ldw	r2,-12(fp)
  80845c:	10800017 	ldw	r2,0(r2)
  808460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  808464:	e0bffc17 	ldw	r2,-16(fp)
  808468:	10c00a04 	addi	r3,r2,40
  80846c:	e0bffd17 	ldw	r2,-12(fp)
  808470:	10800217 	ldw	r2,8(r2)
  808474:	100f883a 	mov	r7,r2
  808478:	e1bfff17 	ldw	r6,-4(fp)
  80847c:	e17ffe17 	ldw	r5,-8(fp)
  808480:	1809883a 	mov	r4,r3
  808484:	08085880 	call	808588 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  808488:	e037883a 	mov	sp,fp
  80848c:	dfc00117 	ldw	ra,4(sp)
  808490:	df000017 	ldw	fp,0(sp)
  808494:	dec00204 	addi	sp,sp,8
  808498:	f800283a 	ret

0080849c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  80849c:	defff704 	addi	sp,sp,-36
  8084a0:	df000815 	stw	fp,32(sp)
  8084a4:	df000804 	addi	fp,sp,32
  8084a8:	e13ffc15 	stw	r4,-16(fp)
  8084ac:	e17ffd15 	stw	r5,-12(fp)
  8084b0:	e1bffe15 	stw	r6,-8(fp)
  8084b4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8084b8:	e0bffc17 	ldw	r2,-16(fp)
  8084bc:	10800017 	ldw	r2,0(r2)
  8084c0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  8084c4:	e0bffd17 	ldw	r2,-12(fp)
  8084c8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  8084cc:	e0bffe17 	ldw	r2,-8(fp)
  8084d0:	e0fffd17 	ldw	r3,-12(fp)
  8084d4:	1885883a 	add	r2,r3,r2
  8084d8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  8084dc:	00001206 	br	808528 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8084e0:	e0bff917 	ldw	r2,-28(fp)
  8084e4:	10800037 	ldwio	r2,0(r2)
  8084e8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8084ec:	e0bffb17 	ldw	r2,-20(fp)
  8084f0:	10a0000c 	andi	r2,r2,32768
  8084f4:	10000626 	beq	r2,zero,808510 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8084f8:	e0bff817 	ldw	r2,-32(fp)
  8084fc:	10c00044 	addi	r3,r2,1
  808500:	e0fff815 	stw	r3,-32(fp)
  808504:	e0fffb17 	ldw	r3,-20(fp)
  808508:	10c00005 	stb	r3,0(r2)
  80850c:	00000606 	br	808528 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
  808510:	e0fff817 	ldw	r3,-32(fp)
  808514:	e0bffd17 	ldw	r2,-12(fp)
  808518:	1880071e 	bne	r3,r2,808538 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
  80851c:	e0bfff17 	ldw	r2,-4(fp)
  808520:	1090000c 	andi	r2,r2,16384
  808524:	1000061e 	bne	r2,zero,808540 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  808528:	e0fff817 	ldw	r3,-32(fp)
  80852c:	e0bffa17 	ldw	r2,-24(fp)
  808530:	18bfeb36 	bltu	r3,r2,8084e0 <__alt_mem_onchip_memory2_0+0xff8044e0>
  808534:	00000306 	br	808544 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  808538:	0001883a 	nop
  80853c:	00000106 	br	808544 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
  808540:	0001883a 	nop
    
  }

  if (ptr != buffer)
  808544:	e0fff817 	ldw	r3,-32(fp)
  808548:	e0bffd17 	ldw	r2,-12(fp)
  80854c:	18800426 	beq	r3,r2,808560 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
  808550:	e0fff817 	ldw	r3,-32(fp)
  808554:	e0bffd17 	ldw	r2,-12(fp)
  808558:	1885c83a 	sub	r2,r3,r2
  80855c:	00000606 	br	808578 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
  808560:	e0bfff17 	ldw	r2,-4(fp)
  808564:	1090000c 	andi	r2,r2,16384
  808568:	10000226 	beq	r2,zero,808574 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  80856c:	00bffd44 	movi	r2,-11
  808570:	00000106 	br	808578 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
  808574:	00bffec4 	movi	r2,-5
}
  808578:	e037883a 	mov	sp,fp
  80857c:	df000017 	ldw	fp,0(sp)
  808580:	dec00104 	addi	sp,sp,4
  808584:	f800283a 	ret

00808588 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  808588:	defff904 	addi	sp,sp,-28
  80858c:	df000615 	stw	fp,24(sp)
  808590:	df000604 	addi	fp,sp,24
  808594:	e13ffc15 	stw	r4,-16(fp)
  808598:	e17ffd15 	stw	r5,-12(fp)
  80859c:	e1bffe15 	stw	r6,-8(fp)
  8085a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  8085a4:	e0bffc17 	ldw	r2,-16(fp)
  8085a8:	10800017 	ldw	r2,0(r2)
  8085ac:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  8085b0:	e0bffe17 	ldw	r2,-8(fp)
  8085b4:	e0fffd17 	ldw	r3,-12(fp)
  8085b8:	1885883a 	add	r2,r3,r2
  8085bc:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  8085c0:	00000e06 	br	8085fc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  8085c4:	e0bffa17 	ldw	r2,-24(fp)
  8085c8:	10800104 	addi	r2,r2,4
  8085cc:	10800037 	ldwio	r2,0(r2)
  8085d0:	10bfffec 	andhi	r2,r2,65535
  8085d4:	10000926 	beq	r2,zero,8085fc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  8085d8:	e0fffa17 	ldw	r3,-24(fp)
  8085dc:	e0bffd17 	ldw	r2,-12(fp)
  8085e0:	11000044 	addi	r4,r2,1
  8085e4:	e13ffd15 	stw	r4,-12(fp)
  8085e8:	10800003 	ldbu	r2,0(r2)
  8085ec:	10803fcc 	andi	r2,r2,255
  8085f0:	1080201c 	xori	r2,r2,128
  8085f4:	10bfe004 	addi	r2,r2,-128
  8085f8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  8085fc:	e0fffd17 	ldw	r3,-12(fp)
  808600:	e0bffb17 	ldw	r2,-20(fp)
  808604:	18bfef36 	bltu	r3,r2,8085c4 <__alt_mem_onchip_memory2_0+0xff8045c4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  808608:	e0bffe17 	ldw	r2,-8(fp)
}
  80860c:	e037883a 	mov	sp,fp
  808610:	df000017 	ldw	fp,0(sp)
  808614:	dec00104 	addi	sp,sp,4
  808618:	f800283a 	ret

0080861c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80861c:	defffa04 	addi	sp,sp,-24
  808620:	dfc00515 	stw	ra,20(sp)
  808624:	df000415 	stw	fp,16(sp)
  808628:	df000404 	addi	fp,sp,16
  80862c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  808630:	0007883a 	mov	r3,zero
  808634:	e0bfff17 	ldw	r2,-4(fp)
  808638:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80863c:	e0bfff17 	ldw	r2,-4(fp)
  808640:	10800104 	addi	r2,r2,4
  808644:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808648:	0005303a 	rdctl	r2,status
  80864c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808650:	e0fffd17 	ldw	r3,-12(fp)
  808654:	00bfff84 	movi	r2,-2
  808658:	1884703a 	and	r2,r3,r2
  80865c:	1001703a 	wrctl	status,r2
  
  return context;
  808660:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  808664:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  808668:	08091140 	call	809114 <alt_tick>
  80866c:	e0bffc17 	ldw	r2,-16(fp)
  808670:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808674:	e0bffe17 	ldw	r2,-8(fp)
  808678:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80867c:	0001883a 	nop
  808680:	e037883a 	mov	sp,fp
  808684:	dfc00117 	ldw	ra,4(sp)
  808688:	df000017 	ldw	fp,0(sp)
  80868c:	dec00204 	addi	sp,sp,8
  808690:	f800283a 	ret

00808694 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  808694:	defff804 	addi	sp,sp,-32
  808698:	dfc00715 	stw	ra,28(sp)
  80869c:	df000615 	stw	fp,24(sp)
  8086a0:	df000604 	addi	fp,sp,24
  8086a4:	e13ffc15 	stw	r4,-16(fp)
  8086a8:	e17ffd15 	stw	r5,-12(fp)
  8086ac:	e1bffe15 	stw	r6,-8(fp)
  8086b0:	e1ffff15 	stw	r7,-4(fp)
  8086b4:	e0bfff17 	ldw	r2,-4(fp)
  8086b8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8086bc:	d0a11f17 	ldw	r2,-31620(gp)
  8086c0:	1000021e 	bne	r2,zero,8086cc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8086c4:	e0bffb17 	ldw	r2,-20(fp)
  8086c8:	d0a11f15 	stw	r2,-31620(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8086cc:	e0bffc17 	ldw	r2,-16(fp)
  8086d0:	10800104 	addi	r2,r2,4
  8086d4:	00c001c4 	movi	r3,7
  8086d8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8086dc:	d8000015 	stw	zero,0(sp)
  8086e0:	e1fffc17 	ldw	r7,-16(fp)
  8086e4:	01802074 	movhi	r6,129
  8086e8:	31a18704 	addi	r6,r6,-31204
  8086ec:	e17ffe17 	ldw	r5,-8(fp)
  8086f0:	e13ffd17 	ldw	r4,-12(fp)
  8086f4:	08089700 	call	808970 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8086f8:	0001883a 	nop
  8086fc:	e037883a 	mov	sp,fp
  808700:	dfc00117 	ldw	ra,4(sp)
  808704:	df000017 	ldw	fp,0(sp)
  808708:	dec00204 	addi	sp,sp,8
  80870c:	f800283a 	ret

00808710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808710:	defffe04 	addi	sp,sp,-8
  808714:	dfc00115 	stw	ra,4(sp)
  808718:	df000015 	stw	fp,0(sp)
  80871c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808720:	d0a02617 	ldw	r2,-32616(gp)
  808724:	10000326 	beq	r2,zero,808734 <alt_get_errno+0x24>
  808728:	d0a02617 	ldw	r2,-32616(gp)
  80872c:	103ee83a 	callr	r2
  808730:	00000106 	br	808738 <alt_get_errno+0x28>
  808734:	d0a10104 	addi	r2,gp,-31740
}
  808738:	e037883a 	mov	sp,fp
  80873c:	dfc00117 	ldw	ra,4(sp)
  808740:	df000017 	ldw	fp,0(sp)
  808744:	dec00204 	addi	sp,sp,8
  808748:	f800283a 	ret

0080874c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80874c:	defffb04 	addi	sp,sp,-20
  808750:	dfc00415 	stw	ra,16(sp)
  808754:	df000315 	stw	fp,12(sp)
  808758:	df000304 	addi	fp,sp,12
  80875c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  808760:	e0bfff17 	ldw	r2,-4(fp)
  808764:	10000816 	blt	r2,zero,808788 <close+0x3c>
  808768:	01400304 	movi	r5,12
  80876c:	e13fff17 	ldw	r4,-4(fp)
  808770:	0809c740 	call	809c74 <__mulsi3>
  808774:	1007883a 	mov	r3,r2
  808778:	00802074 	movhi	r2,129
  80877c:	10a7e204 	addi	r2,r2,-24696
  808780:	1885883a 	add	r2,r3,r2
  808784:	00000106 	br	80878c <close+0x40>
  808788:	0005883a 	mov	r2,zero
  80878c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  808790:	e0bffd17 	ldw	r2,-12(fp)
  808794:	10001926 	beq	r2,zero,8087fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  808798:	e0bffd17 	ldw	r2,-12(fp)
  80879c:	10800017 	ldw	r2,0(r2)
  8087a0:	10800417 	ldw	r2,16(r2)
  8087a4:	10000626 	beq	r2,zero,8087c0 <close+0x74>
  8087a8:	e0bffd17 	ldw	r2,-12(fp)
  8087ac:	10800017 	ldw	r2,0(r2)
  8087b0:	10800417 	ldw	r2,16(r2)
  8087b4:	e13ffd17 	ldw	r4,-12(fp)
  8087b8:	103ee83a 	callr	r2
  8087bc:	00000106 	br	8087c4 <close+0x78>
  8087c0:	0005883a 	mov	r2,zero
  8087c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8087c8:	e13fff17 	ldw	r4,-4(fp)
  8087cc:	0808ff40 	call	808ff4 <alt_release_fd>
    if (rval < 0)
  8087d0:	e0bffe17 	ldw	r2,-8(fp)
  8087d4:	1000070e 	bge	r2,zero,8087f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  8087d8:	08087100 	call	808710 <alt_get_errno>
  8087dc:	1007883a 	mov	r3,r2
  8087e0:	e0bffe17 	ldw	r2,-8(fp)
  8087e4:	0085c83a 	sub	r2,zero,r2
  8087e8:	18800015 	stw	r2,0(r3)
      return -1;
  8087ec:	00bfffc4 	movi	r2,-1
  8087f0:	00000706 	br	808810 <close+0xc4>
    }
    return 0;
  8087f4:	0005883a 	mov	r2,zero
  8087f8:	00000506 	br	808810 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8087fc:	08087100 	call	808710 <alt_get_errno>
  808800:	1007883a 	mov	r3,r2
  808804:	00801444 	movi	r2,81
  808808:	18800015 	stw	r2,0(r3)
    return -1;
  80880c:	00bfffc4 	movi	r2,-1
  }
}
  808810:	e037883a 	mov	sp,fp
  808814:	dfc00117 	ldw	ra,4(sp)
  808818:	df000017 	ldw	fp,0(sp)
  80881c:	dec00204 	addi	sp,sp,8
  808820:	f800283a 	ret

00808824 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  808824:	deffff04 	addi	sp,sp,-4
  808828:	df000015 	stw	fp,0(sp)
  80882c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  808830:	0001883a 	nop
  808834:	e037883a 	mov	sp,fp
  808838:	df000017 	ldw	fp,0(sp)
  80883c:	dec00104 	addi	sp,sp,4
  808840:	f800283a 	ret

00808844 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  808844:	defffc04 	addi	sp,sp,-16
  808848:	df000315 	stw	fp,12(sp)
  80884c:	df000304 	addi	fp,sp,12
  808850:	e13ffd15 	stw	r4,-12(fp)
  808854:	e17ffe15 	stw	r5,-8(fp)
  808858:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80885c:	e0bfff17 	ldw	r2,-4(fp)
}
  808860:	e037883a 	mov	sp,fp
  808864:	df000017 	ldw	fp,0(sp)
  808868:	dec00104 	addi	sp,sp,4
  80886c:	f800283a 	ret

00808870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808870:	defffe04 	addi	sp,sp,-8
  808874:	dfc00115 	stw	ra,4(sp)
  808878:	df000015 	stw	fp,0(sp)
  80887c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808880:	d0a02617 	ldw	r2,-32616(gp)
  808884:	10000326 	beq	r2,zero,808894 <alt_get_errno+0x24>
  808888:	d0a02617 	ldw	r2,-32616(gp)
  80888c:	103ee83a 	callr	r2
  808890:	00000106 	br	808898 <alt_get_errno+0x28>
  808894:	d0a10104 	addi	r2,gp,-31740
}
  808898:	e037883a 	mov	sp,fp
  80889c:	dfc00117 	ldw	ra,4(sp)
  8088a0:	df000017 	ldw	fp,0(sp)
  8088a4:	dec00204 	addi	sp,sp,8
  8088a8:	f800283a 	ret

008088ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8088ac:	defffa04 	addi	sp,sp,-24
  8088b0:	dfc00515 	stw	ra,20(sp)
  8088b4:	df000415 	stw	fp,16(sp)
  8088b8:	df000404 	addi	fp,sp,16
  8088bc:	e13ffe15 	stw	r4,-8(fp)
  8088c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8088c4:	e0bffe17 	ldw	r2,-8(fp)
  8088c8:	10000326 	beq	r2,zero,8088d8 <alt_dev_llist_insert+0x2c>
  8088cc:	e0bffe17 	ldw	r2,-8(fp)
  8088d0:	10800217 	ldw	r2,8(r2)
  8088d4:	1000061e 	bne	r2,zero,8088f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8088d8:	08088700 	call	808870 <alt_get_errno>
  8088dc:	1007883a 	mov	r3,r2
  8088e0:	00800584 	movi	r2,22
  8088e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8088e8:	00bffa84 	movi	r2,-22
  8088ec:	00001306 	br	80893c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8088f0:	e0bffe17 	ldw	r2,-8(fp)
  8088f4:	e0ffff17 	ldw	r3,-4(fp)
  8088f8:	e0fffc15 	stw	r3,-16(fp)
  8088fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  808900:	e0bffd17 	ldw	r2,-12(fp)
  808904:	e0fffc17 	ldw	r3,-16(fp)
  808908:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80890c:	e0bffc17 	ldw	r2,-16(fp)
  808910:	10c00017 	ldw	r3,0(r2)
  808914:	e0bffd17 	ldw	r2,-12(fp)
  808918:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80891c:	e0bffc17 	ldw	r2,-16(fp)
  808920:	10800017 	ldw	r2,0(r2)
  808924:	e0fffd17 	ldw	r3,-12(fp)
  808928:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80892c:	e0bffc17 	ldw	r2,-16(fp)
  808930:	e0fffd17 	ldw	r3,-12(fp)
  808934:	10c00015 	stw	r3,0(r2)

  return 0;  
  808938:	0005883a 	mov	r2,zero
}
  80893c:	e037883a 	mov	sp,fp
  808940:	dfc00117 	ldw	ra,4(sp)
  808944:	df000017 	ldw	fp,0(sp)
  808948:	dec00204 	addi	sp,sp,8
  80894c:	f800283a 	ret

00808950 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  808950:	deffff04 	addi	sp,sp,-4
  808954:	df000015 	stw	fp,0(sp)
  808958:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80895c:	0001883a 	nop
  808960:	e037883a 	mov	sp,fp
  808964:	df000017 	ldw	fp,0(sp)
  808968:	dec00104 	addi	sp,sp,4
  80896c:	f800283a 	ret

00808970 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  808970:	defff904 	addi	sp,sp,-28
  808974:	dfc00615 	stw	ra,24(sp)
  808978:	df000515 	stw	fp,20(sp)
  80897c:	df000504 	addi	fp,sp,20
  808980:	e13ffc15 	stw	r4,-16(fp)
  808984:	e17ffd15 	stw	r5,-12(fp)
  808988:	e1bffe15 	stw	r6,-8(fp)
  80898c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  808990:	e0800217 	ldw	r2,8(fp)
  808994:	d8800015 	stw	r2,0(sp)
  808998:	e1ffff17 	ldw	r7,-4(fp)
  80899c:	e1bffe17 	ldw	r6,-8(fp)
  8089a0:	e17ffd17 	ldw	r5,-12(fp)
  8089a4:	e13ffc17 	ldw	r4,-16(fp)
  8089a8:	0808b200 	call	808b20 <alt_iic_isr_register>
}  
  8089ac:	e037883a 	mov	sp,fp
  8089b0:	dfc00117 	ldw	ra,4(sp)
  8089b4:	df000017 	ldw	fp,0(sp)
  8089b8:	dec00204 	addi	sp,sp,8
  8089bc:	f800283a 	ret

008089c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8089c0:	defff904 	addi	sp,sp,-28
  8089c4:	df000615 	stw	fp,24(sp)
  8089c8:	df000604 	addi	fp,sp,24
  8089cc:	e13ffe15 	stw	r4,-8(fp)
  8089d0:	e17fff15 	stw	r5,-4(fp)
  8089d4:	e0bfff17 	ldw	r2,-4(fp)
  8089d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8089dc:	0005303a 	rdctl	r2,status
  8089e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8089e4:	e0fffb17 	ldw	r3,-20(fp)
  8089e8:	00bfff84 	movi	r2,-2
  8089ec:	1884703a 	and	r2,r3,r2
  8089f0:	1001703a 	wrctl	status,r2
  
  return context;
  8089f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8089f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8089fc:	00c00044 	movi	r3,1
  808a00:	e0bffa17 	ldw	r2,-24(fp)
  808a04:	1884983a 	sll	r2,r3,r2
  808a08:	1007883a 	mov	r3,r2
  808a0c:	d0a11e17 	ldw	r2,-31624(gp)
  808a10:	1884b03a 	or	r2,r3,r2
  808a14:	d0a11e15 	stw	r2,-31624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  808a18:	d0a11e17 	ldw	r2,-31624(gp)
  808a1c:	100170fa 	wrctl	ienable,r2
  808a20:	e0bffc17 	ldw	r2,-16(fp)
  808a24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808a28:	e0bffd17 	ldw	r2,-12(fp)
  808a2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  808a30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  808a34:	0001883a 	nop
}
  808a38:	e037883a 	mov	sp,fp
  808a3c:	df000017 	ldw	fp,0(sp)
  808a40:	dec00104 	addi	sp,sp,4
  808a44:	f800283a 	ret

00808a48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  808a48:	defff904 	addi	sp,sp,-28
  808a4c:	df000615 	stw	fp,24(sp)
  808a50:	df000604 	addi	fp,sp,24
  808a54:	e13ffe15 	stw	r4,-8(fp)
  808a58:	e17fff15 	stw	r5,-4(fp)
  808a5c:	e0bfff17 	ldw	r2,-4(fp)
  808a60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808a64:	0005303a 	rdctl	r2,status
  808a68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808a6c:	e0fffb17 	ldw	r3,-20(fp)
  808a70:	00bfff84 	movi	r2,-2
  808a74:	1884703a 	and	r2,r3,r2
  808a78:	1001703a 	wrctl	status,r2
  
  return context;
  808a7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  808a80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  808a84:	00c00044 	movi	r3,1
  808a88:	e0bffa17 	ldw	r2,-24(fp)
  808a8c:	1884983a 	sll	r2,r3,r2
  808a90:	0084303a 	nor	r2,zero,r2
  808a94:	1007883a 	mov	r3,r2
  808a98:	d0a11e17 	ldw	r2,-31624(gp)
  808a9c:	1884703a 	and	r2,r3,r2
  808aa0:	d0a11e15 	stw	r2,-31624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  808aa4:	d0a11e17 	ldw	r2,-31624(gp)
  808aa8:	100170fa 	wrctl	ienable,r2
  808aac:	e0bffc17 	ldw	r2,-16(fp)
  808ab0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808ab4:	e0bffd17 	ldw	r2,-12(fp)
  808ab8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  808abc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  808ac0:	0001883a 	nop
}
  808ac4:	e037883a 	mov	sp,fp
  808ac8:	df000017 	ldw	fp,0(sp)
  808acc:	dec00104 	addi	sp,sp,4
  808ad0:	f800283a 	ret

00808ad4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  808ad4:	defffc04 	addi	sp,sp,-16
  808ad8:	df000315 	stw	fp,12(sp)
  808adc:	df000304 	addi	fp,sp,12
  808ae0:	e13ffe15 	stw	r4,-8(fp)
  808ae4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  808ae8:	000530fa 	rdctl	r2,ienable
  808aec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  808af0:	00c00044 	movi	r3,1
  808af4:	e0bfff17 	ldw	r2,-4(fp)
  808af8:	1884983a 	sll	r2,r3,r2
  808afc:	1007883a 	mov	r3,r2
  808b00:	e0bffd17 	ldw	r2,-12(fp)
  808b04:	1884703a 	and	r2,r3,r2
  808b08:	1004c03a 	cmpne	r2,r2,zero
  808b0c:	10803fcc 	andi	r2,r2,255
}
  808b10:	e037883a 	mov	sp,fp
  808b14:	df000017 	ldw	fp,0(sp)
  808b18:	dec00104 	addi	sp,sp,4
  808b1c:	f800283a 	ret

00808b20 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  808b20:	defff504 	addi	sp,sp,-44
  808b24:	dfc00a15 	stw	ra,40(sp)
  808b28:	df000915 	stw	fp,36(sp)
  808b2c:	df000904 	addi	fp,sp,36
  808b30:	e13ffc15 	stw	r4,-16(fp)
  808b34:	e17ffd15 	stw	r5,-12(fp)
  808b38:	e1bffe15 	stw	r6,-8(fp)
  808b3c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  808b40:	00bffa84 	movi	r2,-22
  808b44:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  808b48:	e0bffd17 	ldw	r2,-12(fp)
  808b4c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  808b50:	e0bff817 	ldw	r2,-32(fp)
  808b54:	10800808 	cmpgei	r2,r2,32
  808b58:	1000271e 	bne	r2,zero,808bf8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808b5c:	0005303a 	rdctl	r2,status
  808b60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808b64:	e0fffb17 	ldw	r3,-20(fp)
  808b68:	00bfff84 	movi	r2,-2
  808b6c:	1884703a 	and	r2,r3,r2
  808b70:	1001703a 	wrctl	status,r2
  
  return context;
  808b74:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  808b78:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  808b7c:	00802074 	movhi	r2,129
  808b80:	1085ed04 	addi	r2,r2,6068
  808b84:	e0fff817 	ldw	r3,-32(fp)
  808b88:	180690fa 	slli	r3,r3,3
  808b8c:	10c5883a 	add	r2,r2,r3
  808b90:	e0fffe17 	ldw	r3,-8(fp)
  808b94:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  808b98:	00802074 	movhi	r2,129
  808b9c:	1085ed04 	addi	r2,r2,6068
  808ba0:	e0fff817 	ldw	r3,-32(fp)
  808ba4:	180690fa 	slli	r3,r3,3
  808ba8:	10c5883a 	add	r2,r2,r3
  808bac:	10800104 	addi	r2,r2,4
  808bb0:	e0ffff17 	ldw	r3,-4(fp)
  808bb4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  808bb8:	e0bffe17 	ldw	r2,-8(fp)
  808bbc:	10000526 	beq	r2,zero,808bd4 <alt_iic_isr_register+0xb4>
  808bc0:	e0bff817 	ldw	r2,-32(fp)
  808bc4:	100b883a 	mov	r5,r2
  808bc8:	e13ffc17 	ldw	r4,-16(fp)
  808bcc:	08089c00 	call	8089c0 <alt_ic_irq_enable>
  808bd0:	00000406 	br	808be4 <alt_iic_isr_register+0xc4>
  808bd4:	e0bff817 	ldw	r2,-32(fp)
  808bd8:	100b883a 	mov	r5,r2
  808bdc:	e13ffc17 	ldw	r4,-16(fp)
  808be0:	0808a480 	call	808a48 <alt_ic_irq_disable>
  808be4:	e0bff715 	stw	r2,-36(fp)
  808be8:	e0bffa17 	ldw	r2,-24(fp)
  808bec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808bf0:	e0bff917 	ldw	r2,-28(fp)
  808bf4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  808bf8:	e0bff717 	ldw	r2,-36(fp)
}
  808bfc:	e037883a 	mov	sp,fp
  808c00:	dfc00117 	ldw	ra,4(sp)
  808c04:	df000017 	ldw	fp,0(sp)
  808c08:	dec00204 	addi	sp,sp,8
  808c0c:	f800283a 	ret

00808c10 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  808c10:	defff804 	addi	sp,sp,-32
  808c14:	dfc00715 	stw	ra,28(sp)
  808c18:	df000615 	stw	fp,24(sp)
  808c1c:	dc000515 	stw	r16,20(sp)
  808c20:	df000604 	addi	fp,sp,24
  808c24:	e13ffb15 	stw	r4,-20(fp)
  808c28:	e17ffc15 	stw	r5,-16(fp)
  808c2c:	e1bffd15 	stw	r6,-12(fp)
  808c30:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  808c34:	e1bffe17 	ldw	r6,-8(fp)
  808c38:	e17ffd17 	ldw	r5,-12(fp)
  808c3c:	e13ffc17 	ldw	r4,-16(fp)
  808c40:	0808e980 	call	808e98 <open>
  808c44:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  808c48:	e0bffa17 	ldw	r2,-24(fp)
  808c4c:	10002216 	blt	r2,zero,808cd8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  808c50:	04002074 	movhi	r16,129
  808c54:	8427e204 	addi	r16,r16,-24696
  808c58:	e0bffa17 	ldw	r2,-24(fp)
  808c5c:	01400304 	movi	r5,12
  808c60:	1009883a 	mov	r4,r2
  808c64:	0809c740 	call	809c74 <__mulsi3>
  808c68:	8085883a 	add	r2,r16,r2
  808c6c:	10c00017 	ldw	r3,0(r2)
  808c70:	e0bffb17 	ldw	r2,-20(fp)
  808c74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  808c78:	04002074 	movhi	r16,129
  808c7c:	8427e204 	addi	r16,r16,-24696
  808c80:	e0bffa17 	ldw	r2,-24(fp)
  808c84:	01400304 	movi	r5,12
  808c88:	1009883a 	mov	r4,r2
  808c8c:	0809c740 	call	809c74 <__mulsi3>
  808c90:	8085883a 	add	r2,r16,r2
  808c94:	10800104 	addi	r2,r2,4
  808c98:	10c00017 	ldw	r3,0(r2)
  808c9c:	e0bffb17 	ldw	r2,-20(fp)
  808ca0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  808ca4:	04002074 	movhi	r16,129
  808ca8:	8427e204 	addi	r16,r16,-24696
  808cac:	e0bffa17 	ldw	r2,-24(fp)
  808cb0:	01400304 	movi	r5,12
  808cb4:	1009883a 	mov	r4,r2
  808cb8:	0809c740 	call	809c74 <__mulsi3>
  808cbc:	8085883a 	add	r2,r16,r2
  808cc0:	10800204 	addi	r2,r2,8
  808cc4:	10c00017 	ldw	r3,0(r2)
  808cc8:	e0bffb17 	ldw	r2,-20(fp)
  808ccc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  808cd0:	e13ffa17 	ldw	r4,-24(fp)
  808cd4:	0808ff40 	call	808ff4 <alt_release_fd>
  }
} 
  808cd8:	0001883a 	nop
  808cdc:	e6ffff04 	addi	sp,fp,-4
  808ce0:	dfc00217 	ldw	ra,8(sp)
  808ce4:	df000117 	ldw	fp,4(sp)
  808ce8:	dc000017 	ldw	r16,0(sp)
  808cec:	dec00304 	addi	sp,sp,12
  808cf0:	f800283a 	ret

00808cf4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  808cf4:	defffb04 	addi	sp,sp,-20
  808cf8:	dfc00415 	stw	ra,16(sp)
  808cfc:	df000315 	stw	fp,12(sp)
  808d00:	df000304 	addi	fp,sp,12
  808d04:	e13ffd15 	stw	r4,-12(fp)
  808d08:	e17ffe15 	stw	r5,-8(fp)
  808d0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  808d10:	01c07fc4 	movi	r7,511
  808d14:	01800044 	movi	r6,1
  808d18:	e17ffd17 	ldw	r5,-12(fp)
  808d1c:	01002074 	movhi	r4,129
  808d20:	2127e504 	addi	r4,r4,-24684
  808d24:	0808c100 	call	808c10 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  808d28:	01c07fc4 	movi	r7,511
  808d2c:	000d883a 	mov	r6,zero
  808d30:	e17ffe17 	ldw	r5,-8(fp)
  808d34:	01002074 	movhi	r4,129
  808d38:	2127e204 	addi	r4,r4,-24696
  808d3c:	0808c100 	call	808c10 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  808d40:	01c07fc4 	movi	r7,511
  808d44:	01800044 	movi	r6,1
  808d48:	e17fff17 	ldw	r5,-4(fp)
  808d4c:	01002074 	movhi	r4,129
  808d50:	2127e804 	addi	r4,r4,-24672
  808d54:	0808c100 	call	808c10 <alt_open_fd>
}  
  808d58:	0001883a 	nop
  808d5c:	e037883a 	mov	sp,fp
  808d60:	dfc00117 	ldw	ra,4(sp)
  808d64:	df000017 	ldw	fp,0(sp)
  808d68:	dec00204 	addi	sp,sp,8
  808d6c:	f800283a 	ret

00808d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  808d70:	defffe04 	addi	sp,sp,-8
  808d74:	dfc00115 	stw	ra,4(sp)
  808d78:	df000015 	stw	fp,0(sp)
  808d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  808d80:	d0a02617 	ldw	r2,-32616(gp)
  808d84:	10000326 	beq	r2,zero,808d94 <alt_get_errno+0x24>
  808d88:	d0a02617 	ldw	r2,-32616(gp)
  808d8c:	103ee83a 	callr	r2
  808d90:	00000106 	br	808d98 <alt_get_errno+0x28>
  808d94:	d0a10104 	addi	r2,gp,-31740
}
  808d98:	e037883a 	mov	sp,fp
  808d9c:	dfc00117 	ldw	ra,4(sp)
  808da0:	df000017 	ldw	fp,0(sp)
  808da4:	dec00204 	addi	sp,sp,8
  808da8:	f800283a 	ret

00808dac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  808dac:	defffb04 	addi	sp,sp,-20
  808db0:	dfc00415 	stw	ra,16(sp)
  808db4:	df000315 	stw	fp,12(sp)
  808db8:	dc000215 	stw	r16,8(sp)
  808dbc:	df000304 	addi	fp,sp,12
  808dc0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  808dc4:	e0bffe17 	ldw	r2,-8(fp)
  808dc8:	10800217 	ldw	r2,8(r2)
  808dcc:	10d00034 	orhi	r3,r2,16384
  808dd0:	e0bffe17 	ldw	r2,-8(fp)
  808dd4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  808dd8:	e03ffd15 	stw	zero,-12(fp)
  808ddc:	00002306 	br	808e6c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808de0:	04002074 	movhi	r16,129
  808de4:	8427e204 	addi	r16,r16,-24696
  808de8:	e0bffd17 	ldw	r2,-12(fp)
  808dec:	01400304 	movi	r5,12
  808df0:	1009883a 	mov	r4,r2
  808df4:	0809c740 	call	809c74 <__mulsi3>
  808df8:	8085883a 	add	r2,r16,r2
  808dfc:	10c00017 	ldw	r3,0(r2)
  808e00:	e0bffe17 	ldw	r2,-8(fp)
  808e04:	10800017 	ldw	r2,0(r2)
  808e08:	1880151e 	bne	r3,r2,808e60 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  808e0c:	04002074 	movhi	r16,129
  808e10:	8427e204 	addi	r16,r16,-24696
  808e14:	e0bffd17 	ldw	r2,-12(fp)
  808e18:	01400304 	movi	r5,12
  808e1c:	1009883a 	mov	r4,r2
  808e20:	0809c740 	call	809c74 <__mulsi3>
  808e24:	8085883a 	add	r2,r16,r2
  808e28:	10800204 	addi	r2,r2,8
  808e2c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  808e30:	10000b0e 	bge	r2,zero,808e60 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  808e34:	01400304 	movi	r5,12
  808e38:	e13ffd17 	ldw	r4,-12(fp)
  808e3c:	0809c740 	call	809c74 <__mulsi3>
  808e40:	1007883a 	mov	r3,r2
  808e44:	00802074 	movhi	r2,129
  808e48:	10a7e204 	addi	r2,r2,-24696
  808e4c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  808e50:	e0bffe17 	ldw	r2,-8(fp)
  808e54:	18800226 	beq	r3,r2,808e60 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  808e58:	00bffcc4 	movi	r2,-13
  808e5c:	00000806 	br	808e80 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  808e60:	e0bffd17 	ldw	r2,-12(fp)
  808e64:	10800044 	addi	r2,r2,1
  808e68:	e0bffd15 	stw	r2,-12(fp)
  808e6c:	d0a02517 	ldw	r2,-32620(gp)
  808e70:	1007883a 	mov	r3,r2
  808e74:	e0bffd17 	ldw	r2,-12(fp)
  808e78:	18bfd92e 	bgeu	r3,r2,808de0 <__alt_mem_onchip_memory2_0+0xff804de0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  808e7c:	0005883a 	mov	r2,zero
}
  808e80:	e6ffff04 	addi	sp,fp,-4
  808e84:	dfc00217 	ldw	ra,8(sp)
  808e88:	df000117 	ldw	fp,4(sp)
  808e8c:	dc000017 	ldw	r16,0(sp)
  808e90:	dec00304 	addi	sp,sp,12
  808e94:	f800283a 	ret

00808e98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  808e98:	defff604 	addi	sp,sp,-40
  808e9c:	dfc00915 	stw	ra,36(sp)
  808ea0:	df000815 	stw	fp,32(sp)
  808ea4:	df000804 	addi	fp,sp,32
  808ea8:	e13ffd15 	stw	r4,-12(fp)
  808eac:	e17ffe15 	stw	r5,-8(fp)
  808eb0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  808eb4:	00bfffc4 	movi	r2,-1
  808eb8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  808ebc:	00bffb44 	movi	r2,-19
  808ec0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  808ec4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  808ec8:	d1602304 	addi	r5,gp,-32628
  808ecc:	e13ffd17 	ldw	r4,-12(fp)
  808ed0:	08095980 	call	809598 <alt_find_dev>
  808ed4:	e0bff815 	stw	r2,-32(fp)
  808ed8:	e0bff817 	ldw	r2,-32(fp)
  808edc:	1000051e 	bne	r2,zero,808ef4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  808ee0:	e13ffd17 	ldw	r4,-12(fp)
  808ee4:	08096280 	call	809628 <alt_find_file>
  808ee8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  808eec:	00800044 	movi	r2,1
  808ef0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  808ef4:	e0bff817 	ldw	r2,-32(fp)
  808ef8:	10002b26 	beq	r2,zero,808fa8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  808efc:	e13ff817 	ldw	r4,-32(fp)
  808f00:	08097300 	call	809730 <alt_get_fd>
  808f04:	e0bff915 	stw	r2,-28(fp)
  808f08:	e0bff917 	ldw	r2,-28(fp)
  808f0c:	1000030e 	bge	r2,zero,808f1c <open+0x84>
    {
      status = index;
  808f10:	e0bff917 	ldw	r2,-28(fp)
  808f14:	e0bffa15 	stw	r2,-24(fp)
  808f18:	00002506 	br	808fb0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  808f1c:	01400304 	movi	r5,12
  808f20:	e13ff917 	ldw	r4,-28(fp)
  808f24:	0809c740 	call	809c74 <__mulsi3>
  808f28:	1007883a 	mov	r3,r2
  808f2c:	00802074 	movhi	r2,129
  808f30:	10a7e204 	addi	r2,r2,-24696
  808f34:	1885883a 	add	r2,r3,r2
  808f38:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  808f3c:	e0fffe17 	ldw	r3,-8(fp)
  808f40:	00900034 	movhi	r2,16384
  808f44:	10bfffc4 	addi	r2,r2,-1
  808f48:	1886703a 	and	r3,r3,r2
  808f4c:	e0bffc17 	ldw	r2,-16(fp)
  808f50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  808f54:	e0bffb17 	ldw	r2,-20(fp)
  808f58:	1000051e 	bne	r2,zero,808f70 <open+0xd8>
  808f5c:	e13ffc17 	ldw	r4,-16(fp)
  808f60:	0808dac0 	call	808dac <alt_file_locked>
  808f64:	e0bffa15 	stw	r2,-24(fp)
  808f68:	e0bffa17 	ldw	r2,-24(fp)
  808f6c:	10001016 	blt	r2,zero,808fb0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  808f70:	e0bff817 	ldw	r2,-32(fp)
  808f74:	10800317 	ldw	r2,12(r2)
  808f78:	10000826 	beq	r2,zero,808f9c <open+0x104>
  808f7c:	e0bff817 	ldw	r2,-32(fp)
  808f80:	10800317 	ldw	r2,12(r2)
  808f84:	e1ffff17 	ldw	r7,-4(fp)
  808f88:	e1bffe17 	ldw	r6,-8(fp)
  808f8c:	e17ffd17 	ldw	r5,-12(fp)
  808f90:	e13ffc17 	ldw	r4,-16(fp)
  808f94:	103ee83a 	callr	r2
  808f98:	00000106 	br	808fa0 <open+0x108>
  808f9c:	0005883a 	mov	r2,zero
  808fa0:	e0bffa15 	stw	r2,-24(fp)
  808fa4:	00000206 	br	808fb0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  808fa8:	00bffb44 	movi	r2,-19
  808fac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  808fb0:	e0bffa17 	ldw	r2,-24(fp)
  808fb4:	1000090e 	bge	r2,zero,808fdc <open+0x144>
  {
    alt_release_fd (index);  
  808fb8:	e13ff917 	ldw	r4,-28(fp)
  808fbc:	0808ff40 	call	808ff4 <alt_release_fd>
    ALT_ERRNO = -status;
  808fc0:	0808d700 	call	808d70 <alt_get_errno>
  808fc4:	1007883a 	mov	r3,r2
  808fc8:	e0bffa17 	ldw	r2,-24(fp)
  808fcc:	0085c83a 	sub	r2,zero,r2
  808fd0:	18800015 	stw	r2,0(r3)
    return -1;
  808fd4:	00bfffc4 	movi	r2,-1
  808fd8:	00000106 	br	808fe0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  808fdc:	e0bff917 	ldw	r2,-28(fp)
}
  808fe0:	e037883a 	mov	sp,fp
  808fe4:	dfc00117 	ldw	ra,4(sp)
  808fe8:	df000017 	ldw	fp,0(sp)
  808fec:	dec00204 	addi	sp,sp,8
  808ff0:	f800283a 	ret

00808ff4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  808ff4:	defffc04 	addi	sp,sp,-16
  808ff8:	dfc00315 	stw	ra,12(sp)
  808ffc:	df000215 	stw	fp,8(sp)
  809000:	dc000115 	stw	r16,4(sp)
  809004:	df000204 	addi	fp,sp,8
  809008:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80900c:	e0bffe17 	ldw	r2,-8(fp)
  809010:	108000d0 	cmplti	r2,r2,3
  809014:	1000111e 	bne	r2,zero,80905c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  809018:	04002074 	movhi	r16,129
  80901c:	8427e204 	addi	r16,r16,-24696
  809020:	e0bffe17 	ldw	r2,-8(fp)
  809024:	01400304 	movi	r5,12
  809028:	1009883a 	mov	r4,r2
  80902c:	0809c740 	call	809c74 <__mulsi3>
  809030:	8085883a 	add	r2,r16,r2
  809034:	10800204 	addi	r2,r2,8
  809038:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80903c:	04002074 	movhi	r16,129
  809040:	8427e204 	addi	r16,r16,-24696
  809044:	e0bffe17 	ldw	r2,-8(fp)
  809048:	01400304 	movi	r5,12
  80904c:	1009883a 	mov	r4,r2
  809050:	0809c740 	call	809c74 <__mulsi3>
  809054:	8085883a 	add	r2,r16,r2
  809058:	10000015 	stw	zero,0(r2)
  }
}
  80905c:	0001883a 	nop
  809060:	e6ffff04 	addi	sp,fp,-4
  809064:	dfc00217 	ldw	ra,8(sp)
  809068:	df000117 	ldw	fp,4(sp)
  80906c:	dc000017 	ldw	r16,0(sp)
  809070:	dec00304 	addi	sp,sp,12
  809074:	f800283a 	ret

00809078 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  809078:	defffa04 	addi	sp,sp,-24
  80907c:	df000515 	stw	fp,20(sp)
  809080:	df000504 	addi	fp,sp,20
  809084:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  809088:	0005303a 	rdctl	r2,status
  80908c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  809090:	e0fffc17 	ldw	r3,-16(fp)
  809094:	00bfff84 	movi	r2,-2
  809098:	1884703a 	and	r2,r3,r2
  80909c:	1001703a 	wrctl	status,r2
  
  return context;
  8090a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8090a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8090a8:	e0bfff17 	ldw	r2,-4(fp)
  8090ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8090b0:	e0bffd17 	ldw	r2,-12(fp)
  8090b4:	10800017 	ldw	r2,0(r2)
  8090b8:	e0fffd17 	ldw	r3,-12(fp)
  8090bc:	18c00117 	ldw	r3,4(r3)
  8090c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8090c4:	e0bffd17 	ldw	r2,-12(fp)
  8090c8:	10800117 	ldw	r2,4(r2)
  8090cc:	e0fffd17 	ldw	r3,-12(fp)
  8090d0:	18c00017 	ldw	r3,0(r3)
  8090d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8090d8:	e0bffd17 	ldw	r2,-12(fp)
  8090dc:	e0fffd17 	ldw	r3,-12(fp)
  8090e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8090e4:	e0bffd17 	ldw	r2,-12(fp)
  8090e8:	e0fffd17 	ldw	r3,-12(fp)
  8090ec:	10c00015 	stw	r3,0(r2)
  8090f0:	e0bffb17 	ldw	r2,-20(fp)
  8090f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8090f8:	e0bffe17 	ldw	r2,-8(fp)
  8090fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  809100:	0001883a 	nop
  809104:	e037883a 	mov	sp,fp
  809108:	df000017 	ldw	fp,0(sp)
  80910c:	dec00104 	addi	sp,sp,4
  809110:	f800283a 	ret

00809114 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  809114:	defffb04 	addi	sp,sp,-20
  809118:	dfc00415 	stw	ra,16(sp)
  80911c:	df000315 	stw	fp,12(sp)
  809120:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  809124:	d0a02817 	ldw	r2,-32608(gp)
  809128:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80912c:	d0a12017 	ldw	r2,-31616(gp)
  809130:	10800044 	addi	r2,r2,1
  809134:	d0a12015 	stw	r2,-31616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  809138:	00002e06 	br	8091f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80913c:	e0bffd17 	ldw	r2,-12(fp)
  809140:	10800017 	ldw	r2,0(r2)
  809144:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  809148:	e0bffd17 	ldw	r2,-12(fp)
  80914c:	10800403 	ldbu	r2,16(r2)
  809150:	10803fcc 	andi	r2,r2,255
  809154:	10000426 	beq	r2,zero,809168 <alt_tick+0x54>
  809158:	d0a12017 	ldw	r2,-31616(gp)
  80915c:	1000021e 	bne	r2,zero,809168 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  809160:	e0bffd17 	ldw	r2,-12(fp)
  809164:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  809168:	e0bffd17 	ldw	r2,-12(fp)
  80916c:	10800217 	ldw	r2,8(r2)
  809170:	d0e12017 	ldw	r3,-31616(gp)
  809174:	18801d36 	bltu	r3,r2,8091ec <alt_tick+0xd8>
  809178:	e0bffd17 	ldw	r2,-12(fp)
  80917c:	10800403 	ldbu	r2,16(r2)
  809180:	10803fcc 	andi	r2,r2,255
  809184:	1000191e 	bne	r2,zero,8091ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  809188:	e0bffd17 	ldw	r2,-12(fp)
  80918c:	10800317 	ldw	r2,12(r2)
  809190:	e0fffd17 	ldw	r3,-12(fp)
  809194:	18c00517 	ldw	r3,20(r3)
  809198:	1809883a 	mov	r4,r3
  80919c:	103ee83a 	callr	r2
  8091a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8091a4:	e0bfff17 	ldw	r2,-4(fp)
  8091a8:	1000031e 	bne	r2,zero,8091b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8091ac:	e13ffd17 	ldw	r4,-12(fp)
  8091b0:	08090780 	call	809078 <alt_alarm_stop>
  8091b4:	00000d06 	br	8091ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8091b8:	e0bffd17 	ldw	r2,-12(fp)
  8091bc:	10c00217 	ldw	r3,8(r2)
  8091c0:	e0bfff17 	ldw	r2,-4(fp)
  8091c4:	1887883a 	add	r3,r3,r2
  8091c8:	e0bffd17 	ldw	r2,-12(fp)
  8091cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8091d0:	e0bffd17 	ldw	r2,-12(fp)
  8091d4:	10c00217 	ldw	r3,8(r2)
  8091d8:	d0a12017 	ldw	r2,-31616(gp)
  8091dc:	1880032e 	bgeu	r3,r2,8091ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8091e0:	e0bffd17 	ldw	r2,-12(fp)
  8091e4:	00c00044 	movi	r3,1
  8091e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8091ec:	e0bffe17 	ldw	r2,-8(fp)
  8091f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8091f4:	e0fffd17 	ldw	r3,-12(fp)
  8091f8:	d0a02804 	addi	r2,gp,-32608
  8091fc:	18bfcf1e 	bne	r3,r2,80913c <__alt_mem_onchip_memory2_0+0xff80513c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  809200:	08017c00 	call	8017c0 <OSTimeTick>
}
  809204:	0001883a 	nop
  809208:	e037883a 	mov	sp,fp
  80920c:	dfc00117 	ldw	ra,4(sp)
  809210:	df000017 	ldw	fp,0(sp)
  809214:	dec00204 	addi	sp,sp,8
  809218:	f800283a 	ret

0080921c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80921c:	deffff04 	addi	sp,sp,-4
  809220:	df000015 	stw	fp,0(sp)
  809224:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  809228:	000170fa 	wrctl	ienable,zero
}
  80922c:	0001883a 	nop
  809230:	e037883a 	mov	sp,fp
  809234:	df000017 	ldw	fp,0(sp)
  809238:	dec00104 	addi	sp,sp,4
  80923c:	f800283a 	ret

00809240 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  809240:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  809244:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  809248:	d1211817 	ldw	r4,-31648(gp)

      stw ra,  0(sp)
  80924c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  809250:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  809254:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  809258:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  80925c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  809260:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  809264:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  809268:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  80926c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  809270:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  809274:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  809278:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  80927c:	08094b40 	call	8094b4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  809280:	d1211317 	ldw	r4,-31668(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  809284:	d1610b07 	ldb	r5,-31700(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  809288:	d1211815 	stw	r4,-31648(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  80928c:	d1610b45 	stb	r5,-31699(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  809290:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  809294:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  809298:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  80929c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  8092a0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  8092a4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  8092a8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  8092ac:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  8092b0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  8092b4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  8092b8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8092bc:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8092c0:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8092c4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8092c8:	f800283a 	ret

008092cc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8092cc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8092d0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8092d4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  8092d8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8092dc:	08094b40 	call	8094b4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  8092e0:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  8092e4:	d4a10945 	stb	r18,-31707(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  8092e8:	003fe506 	br	809280 <__alt_mem_onchip_memory2_0+0xff805280>

008092ec <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  8092ec:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  8092f0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8092f4:	10800054 	ori	r2,r2,1
      wrctl status, r2
  8092f8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  8092fc:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  809300:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  809304:	dec00204 	addi	sp,sp,8

      callr r2
  809308:	103ee83a 	callr	r2

      nop
  80930c:	0001883a 	nop

00809310 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  809310:	defff704 	addi	sp,sp,-36
  809314:	dfc00815 	stw	ra,32(sp)
  809318:	df000715 	stw	fp,28(sp)
  80931c:	df000704 	addi	fp,sp,28
  809320:	e13ffc15 	stw	r4,-16(fp)
  809324:	e17ffd15 	stw	r5,-12(fp)
  809328:	e1bffe15 	stw	r6,-8(fp)
  80932c:	3805883a 	mov	r2,r7
  809330:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  809334:	e0fffe17 	ldw	r3,-8(fp)
  809338:	00bfff04 	movi	r2,-4
  80933c:	1884703a 	and	r2,r3,r2
  809340:	10bef704 	addi	r2,r2,-1060
  809344:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  809348:	01810904 	movi	r6,1060
  80934c:	000b883a 	mov	r5,zero
  809350:	e13ff917 	ldw	r4,-28(fp)
  809354:	08099100 	call	809910 <memset>
  809358:	e0bff917 	ldw	r2,-28(fp)
  80935c:	10c0bb04 	addi	r3,r2,748
  809360:	e0bff917 	ldw	r2,-28(fp)
  809364:	10c00115 	stw	r3,4(r2)
  809368:	e0bff917 	ldw	r2,-28(fp)
  80936c:	10c0d504 	addi	r3,r2,852
  809370:	e0bff917 	ldw	r2,-28(fp)
  809374:	10c00215 	stw	r3,8(r2)
  809378:	e0bff917 	ldw	r2,-28(fp)
  80937c:	10c0ef04 	addi	r3,r2,956
  809380:	e0bff917 	ldw	r2,-28(fp)
  809384:	10c00315 	stw	r3,12(r2)
  809388:	e0fff917 	ldw	r3,-28(fp)
  80938c:	00802074 	movhi	r2,129
  809390:	10a79404 	addi	r2,r2,-25008
  809394:	18800d15 	stw	r2,52(r3)
  809398:	e0bff917 	ldw	r2,-28(fp)
  80939c:	00c00044 	movi	r3,1
  8093a0:	10c02915 	stw	r3,164(r2)
  8093a4:	10002a15 	stw	zero,168(r2)
  8093a8:	e0bff917 	ldw	r2,-28(fp)
  8093ac:	00ccc384 	movi	r3,13070
  8093b0:	10c02b0d 	sth	r3,172(r2)
  8093b4:	e0bff917 	ldw	r2,-28(fp)
  8093b8:	00eaf344 	movi	r3,-21555
  8093bc:	10c02b8d 	sth	r3,174(r2)
  8093c0:	e0bff917 	ldw	r2,-28(fp)
  8093c4:	00c48d04 	movi	r3,4660
  8093c8:	10c02c0d 	sth	r3,176(r2)
  8093cc:	e0bff917 	ldw	r2,-28(fp)
  8093d0:	00f99b44 	movi	r3,-6547
  8093d4:	10c02c8d 	sth	r3,178(r2)
  8093d8:	e0bff917 	ldw	r2,-28(fp)
  8093dc:	00f7bb04 	movi	r3,-8468
  8093e0:	10c02d0d 	sth	r3,180(r2)
  8093e4:	e0bff917 	ldw	r2,-28(fp)
  8093e8:	00c00144 	movi	r3,5
  8093ec:	10c02d8d 	sth	r3,182(r2)
  8093f0:	e0bff917 	ldw	r2,-28(fp)
  8093f4:	00c002c4 	movi	r3,11
  8093f8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  8093fc:	e0bff917 	ldw	r2,-28(fp)
  809400:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  809404:	e0bffa17 	ldw	r2,-24(fp)
  809408:	10bff304 	addi	r2,r2,-52
  80940c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  809410:	e0bffb17 	ldw	r2,-20(fp)
  809414:	10800c04 	addi	r2,r2,48
  809418:	e0fffc17 	ldw	r3,-16(fp)
  80941c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  809420:	e0bffb17 	ldw	r2,-20(fp)
  809424:	10800b04 	addi	r2,r2,44
  809428:	e0fffd17 	ldw	r3,-12(fp)
  80942c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  809430:	e0bffb17 	ldw	r2,-20(fp)
  809434:	10800a04 	addi	r2,r2,40
  809438:	e0fff917 	ldw	r3,-28(fp)
  80943c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  809440:	00802074 	movhi	r2,129
  809444:	10a4bb04 	addi	r2,r2,-27924
  809448:	10c00104 	addi	r3,r2,4
  80944c:	e0bffb17 	ldw	r2,-20(fp)
  809450:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  809454:	e0bffb17 	ldw	r2,-20(fp)
}
  809458:	e037883a 	mov	sp,fp
  80945c:	dfc00117 	ldw	ra,4(sp)
  809460:	df000017 	ldw	fp,0(sp)
  809464:	dec00204 	addi	sp,sp,8
  809468:	f800283a 	ret

0080946c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  80946c:	defffe04 	addi	sp,sp,-8
  809470:	df000115 	stw	fp,4(sp)
  809474:	df000104 	addi	fp,sp,4
  809478:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  80947c:	0001883a 	nop
  809480:	e037883a 	mov	sp,fp
  809484:	df000017 	ldw	fp,0(sp)
  809488:	dec00104 	addi	sp,sp,4
  80948c:	f800283a 	ret

00809490 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  809490:	defffe04 	addi	sp,sp,-8
  809494:	df000115 	stw	fp,4(sp)
  809498:	df000104 	addi	fp,sp,4
  80949c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  8094a0:	0001883a 	nop
  8094a4:	e037883a 	mov	sp,fp
  8094a8:	df000017 	ldw	fp,0(sp)
  8094ac:	dec00104 	addi	sp,sp,4
  8094b0:	f800283a 	ret

008094b4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  8094b4:	deffff04 	addi	sp,sp,-4
  8094b8:	df000015 	stw	fp,0(sp)
  8094bc:	d839883a 	mov	fp,sp
}
  8094c0:	0001883a 	nop
  8094c4:	e037883a 	mov	sp,fp
  8094c8:	df000017 	ldw	fp,0(sp)
  8094cc:	dec00104 	addi	sp,sp,4
  8094d0:	f800283a 	ret

008094d4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  8094d4:	deffff04 	addi	sp,sp,-4
  8094d8:	df000015 	stw	fp,0(sp)
  8094dc:	d839883a 	mov	fp,sp
}
  8094e0:	0001883a 	nop
  8094e4:	e037883a 	mov	sp,fp
  8094e8:	df000017 	ldw	fp,0(sp)
  8094ec:	dec00104 	addi	sp,sp,4
  8094f0:	f800283a 	ret

008094f4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  8094f4:	deffff04 	addi	sp,sp,-4
  8094f8:	df000015 	stw	fp,0(sp)
  8094fc:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  809500:	0001883a 	nop
  809504:	e037883a 	mov	sp,fp
  809508:	df000017 	ldw	fp,0(sp)
  80950c:	dec00104 	addi	sp,sp,4
  809510:	f800283a 	ret

00809514 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  809514:	deffff04 	addi	sp,sp,-4
  809518:	df000015 	stw	fp,0(sp)
  80951c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  809520:	0001883a 	nop
  809524:	e037883a 	mov	sp,fp
  809528:	df000017 	ldw	fp,0(sp)
  80952c:	dec00104 	addi	sp,sp,4
  809530:	f800283a 	ret

00809534 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  809534:	deffff04 	addi	sp,sp,-4
  809538:	df000015 	stw	fp,0(sp)
  80953c:	d839883a 	mov	fp,sp
}
  809540:	0001883a 	nop
  809544:	e037883a 	mov	sp,fp
  809548:	df000017 	ldw	fp,0(sp)
  80954c:	dec00104 	addi	sp,sp,4
  809550:	f800283a 	ret

00809554 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  809554:	deffff04 	addi	sp,sp,-4
  809558:	df000015 	stw	fp,0(sp)
  80955c:	d839883a 	mov	fp,sp
}
  809560:	0001883a 	nop
  809564:	e037883a 	mov	sp,fp
  809568:	df000017 	ldw	fp,0(sp)
  80956c:	dec00104 	addi	sp,sp,4
  809570:	f800283a 	ret

00809574 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  809574:	defffe04 	addi	sp,sp,-8
  809578:	df000115 	stw	fp,4(sp)
  80957c:	df000104 	addi	fp,sp,4
  809580:	e13fff15 	stw	r4,-4(fp)
}
  809584:	0001883a 	nop
  809588:	e037883a 	mov	sp,fp
  80958c:	df000017 	ldw	fp,0(sp)
  809590:	dec00104 	addi	sp,sp,4
  809594:	f800283a 	ret

00809598 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  809598:	defffa04 	addi	sp,sp,-24
  80959c:	dfc00515 	stw	ra,20(sp)
  8095a0:	df000415 	stw	fp,16(sp)
  8095a4:	df000404 	addi	fp,sp,16
  8095a8:	e13ffe15 	stw	r4,-8(fp)
  8095ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8095b0:	e0bfff17 	ldw	r2,-4(fp)
  8095b4:	10800017 	ldw	r2,0(r2)
  8095b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8095bc:	e13ffe17 	ldw	r4,-8(fp)
  8095c0:	080041c0 	call	80041c <strlen>
  8095c4:	10800044 	addi	r2,r2,1
  8095c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8095cc:	00000d06 	br	809604 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8095d0:	e0bffc17 	ldw	r2,-16(fp)
  8095d4:	10800217 	ldw	r2,8(r2)
  8095d8:	e0fffd17 	ldw	r3,-12(fp)
  8095dc:	180d883a 	mov	r6,r3
  8095e0:	e17ffe17 	ldw	r5,-8(fp)
  8095e4:	1009883a 	mov	r4,r2
  8095e8:	08098e00 	call	8098e0 <memcmp>
  8095ec:	1000021e 	bne	r2,zero,8095f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8095f0:	e0bffc17 	ldw	r2,-16(fp)
  8095f4:	00000706 	br	809614 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8095f8:	e0bffc17 	ldw	r2,-16(fp)
  8095fc:	10800017 	ldw	r2,0(r2)
  809600:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  809604:	e0fffc17 	ldw	r3,-16(fp)
  809608:	e0bfff17 	ldw	r2,-4(fp)
  80960c:	18bff01e 	bne	r3,r2,8095d0 <__alt_mem_onchip_memory2_0+0xff8055d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  809610:	0005883a 	mov	r2,zero
}
  809614:	e037883a 	mov	sp,fp
  809618:	dfc00117 	ldw	ra,4(sp)
  80961c:	df000017 	ldw	fp,0(sp)
  809620:	dec00204 	addi	sp,sp,8
  809624:	f800283a 	ret

00809628 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  809628:	defffb04 	addi	sp,sp,-20
  80962c:	dfc00415 	stw	ra,16(sp)
  809630:	df000315 	stw	fp,12(sp)
  809634:	df000304 	addi	fp,sp,12
  809638:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80963c:	d0a02117 	ldw	r2,-32636(gp)
  809640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  809644:	00003106 	br	80970c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  809648:	e0bffd17 	ldw	r2,-12(fp)
  80964c:	10800217 	ldw	r2,8(r2)
  809650:	1009883a 	mov	r4,r2
  809654:	080041c0 	call	80041c <strlen>
  809658:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80965c:	e0bffd17 	ldw	r2,-12(fp)
  809660:	10c00217 	ldw	r3,8(r2)
  809664:	e0bffe17 	ldw	r2,-8(fp)
  809668:	10bfffc4 	addi	r2,r2,-1
  80966c:	1885883a 	add	r2,r3,r2
  809670:	10800003 	ldbu	r2,0(r2)
  809674:	10803fcc 	andi	r2,r2,255
  809678:	1080201c 	xori	r2,r2,128
  80967c:	10bfe004 	addi	r2,r2,-128
  809680:	10800bd8 	cmpnei	r2,r2,47
  809684:	1000031e 	bne	r2,zero,809694 <alt_find_file+0x6c>
    {
      len -= 1;
  809688:	e0bffe17 	ldw	r2,-8(fp)
  80968c:	10bfffc4 	addi	r2,r2,-1
  809690:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  809694:	e0bffe17 	ldw	r2,-8(fp)
  809698:	e0ffff17 	ldw	r3,-4(fp)
  80969c:	1885883a 	add	r2,r3,r2
  8096a0:	10800003 	ldbu	r2,0(r2)
  8096a4:	10803fcc 	andi	r2,r2,255
  8096a8:	1080201c 	xori	r2,r2,128
  8096ac:	10bfe004 	addi	r2,r2,-128
  8096b0:	10800be0 	cmpeqi	r2,r2,47
  8096b4:	1000081e 	bne	r2,zero,8096d8 <alt_find_file+0xb0>
  8096b8:	e0bffe17 	ldw	r2,-8(fp)
  8096bc:	e0ffff17 	ldw	r3,-4(fp)
  8096c0:	1885883a 	add	r2,r3,r2
  8096c4:	10800003 	ldbu	r2,0(r2)
  8096c8:	10803fcc 	andi	r2,r2,255
  8096cc:	1080201c 	xori	r2,r2,128
  8096d0:	10bfe004 	addi	r2,r2,-128
  8096d4:	10000a1e 	bne	r2,zero,809700 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8096d8:	e0bffd17 	ldw	r2,-12(fp)
  8096dc:	10800217 	ldw	r2,8(r2)
  8096e0:	e0fffe17 	ldw	r3,-8(fp)
  8096e4:	180d883a 	mov	r6,r3
  8096e8:	e17fff17 	ldw	r5,-4(fp)
  8096ec:	1009883a 	mov	r4,r2
  8096f0:	08098e00 	call	8098e0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8096f4:	1000021e 	bne	r2,zero,809700 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8096f8:	e0bffd17 	ldw	r2,-12(fp)
  8096fc:	00000706 	br	80971c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  809700:	e0bffd17 	ldw	r2,-12(fp)
  809704:	10800017 	ldw	r2,0(r2)
  809708:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80970c:	e0fffd17 	ldw	r3,-12(fp)
  809710:	d0a02104 	addi	r2,gp,-32636
  809714:	18bfcc1e 	bne	r3,r2,809648 <__alt_mem_onchip_memory2_0+0xff805648>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  809718:	0005883a 	mov	r2,zero
}
  80971c:	e037883a 	mov	sp,fp
  809720:	dfc00117 	ldw	ra,4(sp)
  809724:	df000017 	ldw	fp,0(sp)
  809728:	dec00204 	addi	sp,sp,8
  80972c:	f800283a 	ret

00809730 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  809730:	defff804 	addi	sp,sp,-32
  809734:	dfc00715 	stw	ra,28(sp)
  809738:	df000615 	stw	fp,24(sp)
  80973c:	dc000515 	stw	r16,20(sp)
  809740:	df000604 	addi	fp,sp,24
  809744:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  809748:	00bffa04 	movi	r2,-24
  80974c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  809750:	d0a11d17 	ldw	r2,-31628(gp)
  809754:	e0bffc15 	stw	r2,-16(fp)
  809758:	e03ffd0d 	sth	zero,-12(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  80975c:	e0bffd0b 	ldhu	r2,-12(fp)
  809760:	e0fffd84 	addi	r3,fp,-10
  809764:	180d883a 	mov	r6,r3
  809768:	100b883a 	mov	r5,r2
  80976c:	e13ffc17 	ldw	r4,-16(fp)
  809770:	08060100 	call	806010 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  809774:	e03ffa15 	stw	zero,-24(fp)
  809778:	00001d06 	br	8097f0 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  80977c:	04002074 	movhi	r16,129
  809780:	8427e204 	addi	r16,r16,-24696
  809784:	e0bffa17 	ldw	r2,-24(fp)
  809788:	01400304 	movi	r5,12
  80978c:	1009883a 	mov	r4,r2
  809790:	0809c740 	call	809c74 <__mulsi3>
  809794:	8085883a 	add	r2,r16,r2
  809798:	10800017 	ldw	r2,0(r2)
  80979c:	1000111e 	bne	r2,zero,8097e4 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  8097a0:	04002074 	movhi	r16,129
  8097a4:	8427e204 	addi	r16,r16,-24696
  8097a8:	e0bffa17 	ldw	r2,-24(fp)
  8097ac:	01400304 	movi	r5,12
  8097b0:	1009883a 	mov	r4,r2
  8097b4:	0809c740 	call	809c74 <__mulsi3>
  8097b8:	8085883a 	add	r2,r16,r2
  8097bc:	e0fffe17 	ldw	r3,-8(fp)
  8097c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8097c4:	d0e02517 	ldw	r3,-32620(gp)
  8097c8:	e0bffa17 	ldw	r2,-24(fp)
  8097cc:	1880020e 	bge	r3,r2,8097d8 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  8097d0:	e0bffa17 	ldw	r2,-24(fp)
  8097d4:	d0a02515 	stw	r2,-32620(gp)
      }
      rc = i;
  8097d8:	e0bffa17 	ldw	r2,-24(fp)
  8097dc:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
  8097e0:	00000606 	br	8097fc <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8097e4:	e0bffa17 	ldw	r2,-24(fp)
  8097e8:	10800044 	addi	r2,r2,1
  8097ec:	e0bffa15 	stw	r2,-24(fp)
  8097f0:	e0bffa17 	ldw	r2,-24(fp)
  8097f4:	10800810 	cmplti	r2,r2,32
  8097f8:	103fe01e 	bne	r2,zero,80977c <__alt_mem_onchip_memory2_0+0xff80577c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  8097fc:	d0a11d17 	ldw	r2,-31628(gp)
  809800:	1009883a 	mov	r4,r2
  809804:	08063880 	call	806388 <OSSemPost>

  return rc;
  809808:	e0bffb17 	ldw	r2,-20(fp)
}
  80980c:	e6ffff04 	addi	sp,fp,-4
  809810:	dfc00217 	ldw	ra,8(sp)
  809814:	df000117 	ldw	fp,4(sp)
  809818:	dc000017 	ldw	r16,0(sp)
  80981c:	dec00304 	addi	sp,sp,12
  809820:	f800283a 	ret

00809824 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  809824:	defffe04 	addi	sp,sp,-8
  809828:	df000115 	stw	fp,4(sp)
  80982c:	df000104 	addi	fp,sp,4
  809830:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  809834:	e0bfff17 	ldw	r2,-4(fp)
  809838:	10bffe84 	addi	r2,r2,-6
  80983c:	10c00428 	cmpgeui	r3,r2,16
  809840:	18001a1e 	bne	r3,zero,8098ac <alt_exception_cause_generated_bad_addr+0x88>
  809844:	100690ba 	slli	r3,r2,2
  809848:	00802074 	movhi	r2,129
  80984c:	10a61704 	addi	r2,r2,-26532
  809850:	1885883a 	add	r2,r3,r2
  809854:	10800017 	ldw	r2,0(r2)
  809858:	1000683a 	jmp	r2
  80985c:	0080989c 	xori	r2,zero,610
  809860:	0080989c 	xori	r2,zero,610
  809864:	008098ac 	andhi	r2,zero,610
  809868:	008098ac 	andhi	r2,zero,610
  80986c:	008098ac 	andhi	r2,zero,610
  809870:	0080989c 	xori	r2,zero,610
  809874:	008098a4 	muli	r2,zero,610
  809878:	008098ac 	andhi	r2,zero,610
  80987c:	0080989c 	xori	r2,zero,610
  809880:	0080989c 	xori	r2,zero,610
  809884:	008098ac 	andhi	r2,zero,610
  809888:	0080989c 	xori	r2,zero,610
  80988c:	008098a4 	muli	r2,zero,610
  809890:	008098ac 	andhi	r2,zero,610
  809894:	008098ac 	andhi	r2,zero,610
  809898:	0080989c 	xori	r2,zero,610
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80989c:	00800044 	movi	r2,1
  8098a0:	00000306 	br	8098b0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8098a4:	0005883a 	mov	r2,zero
  8098a8:	00000106 	br	8098b0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8098ac:	0005883a 	mov	r2,zero
  }
}
  8098b0:	e037883a 	mov	sp,fp
  8098b4:	df000017 	ldw	fp,0(sp)
  8098b8:	dec00104 	addi	sp,sp,4
  8098bc:	f800283a 	ret

008098c0 <exit>:
  8098c0:	defffe04 	addi	sp,sp,-8
  8098c4:	000b883a 	mov	r5,zero
  8098c8:	dc000015 	stw	r16,0(sp)
  8098cc:	dfc00115 	stw	ra,4(sp)
  8098d0:	2021883a 	mov	r16,r4
  8098d4:	08099300 	call	809930 <__call_exitprocs>
  8098d8:	8009883a 	mov	r4,r16
  8098dc:	0809c9c0 	call	809c9c <_exit>

008098e0 <memcmp>:
  8098e0:	218d883a 	add	r6,r4,r6
  8098e4:	21800826 	beq	r4,r6,809908 <memcmp+0x28>
  8098e8:	20800003 	ldbu	r2,0(r4)
  8098ec:	28c00003 	ldbu	r3,0(r5)
  8098f0:	10c00226 	beq	r2,r3,8098fc <memcmp+0x1c>
  8098f4:	10c5c83a 	sub	r2,r2,r3
  8098f8:	f800283a 	ret
  8098fc:	21000044 	addi	r4,r4,1
  809900:	29400044 	addi	r5,r5,1
  809904:	003ff706 	br	8098e4 <__alt_mem_onchip_memory2_0+0xff8058e4>
  809908:	0005883a 	mov	r2,zero
  80990c:	f800283a 	ret

00809910 <memset>:
  809910:	2005883a 	mov	r2,r4
  809914:	2007883a 	mov	r3,r4
  809918:	218d883a 	add	r6,r4,r6
  80991c:	19800326 	beq	r3,r6,80992c <memset+0x1c>
  809920:	19400005 	stb	r5,0(r3)
  809924:	18c00044 	addi	r3,r3,1
  809928:	003ffc06 	br	80991c <__alt_mem_onchip_memory2_0+0xff80591c>
  80992c:	f800283a 	ret

00809930 <__call_exitprocs>:
  809930:	defff504 	addi	sp,sp,-44
  809934:	dd000515 	stw	r20,20(sp)
  809938:	05002074 	movhi	r20,129
  80993c:	dc800315 	stw	r18,12(sp)
  809940:	dfc00a15 	stw	ra,40(sp)
  809944:	df000915 	stw	fp,36(sp)
  809948:	ddc00815 	stw	r23,32(sp)
  80994c:	dd800715 	stw	r22,28(sp)
  809950:	dd400615 	stw	r21,24(sp)
  809954:	dcc00415 	stw	r19,16(sp)
  809958:	dc400215 	stw	r17,8(sp)
  80995c:	dc000115 	stw	r16,4(sp)
  809960:	d9000015 	stw	r4,0(sp)
  809964:	2825883a 	mov	r18,r5
  809968:	a5284204 	addi	r20,r20,-24312
  80996c:	a4400017 	ldw	r17,0(r20)
  809970:	8cc00c17 	ldw	r19,48(r17)
  809974:	8c400c04 	addi	r17,r17,48
  809978:	98004526 	beq	r19,zero,809a90 <__call_exitprocs+0x160>
  80997c:	9c000117 	ldw	r16,4(r19)
  809980:	00900034 	movhi	r2,16384
  809984:	10bfffc4 	addi	r2,r2,-1
  809988:	9d402217 	ldw	r21,136(r19)
  80998c:	85bfffc4 	addi	r22,r16,-1
  809990:	80a1883a 	add	r16,r16,r2
  809994:	8421883a 	add	r16,r16,r16
  809998:	8421883a 	add	r16,r16,r16
  80999c:	ac2f883a 	add	r23,r21,r16
  8099a0:	84000204 	addi	r16,r16,8
  8099a4:	9c21883a 	add	r16,r19,r16
  8099a8:	b0002716 	blt	r22,zero,809a48 <__call_exitprocs+0x118>
  8099ac:	90000726 	beq	r18,zero,8099cc <__call_exitprocs+0x9c>
  8099b0:	a800041e 	bne	r21,zero,8099c4 <__call_exitprocs+0x94>
  8099b4:	b5bfffc4 	addi	r22,r22,-1
  8099b8:	bdffff04 	addi	r23,r23,-4
  8099bc:	843fff04 	addi	r16,r16,-4
  8099c0:	003ff906 	br	8099a8 <__alt_mem_onchip_memory2_0+0xff8059a8>
  8099c4:	b9002017 	ldw	r4,128(r23)
  8099c8:	913ffa1e 	bne	r18,r4,8099b4 <__alt_mem_onchip_memory2_0+0xff8059b4>
  8099cc:	99000117 	ldw	r4,4(r19)
  8099d0:	82000017 	ldw	r8,0(r16)
  8099d4:	213fffc4 	addi	r4,r4,-1
  8099d8:	b100021e 	bne	r22,r4,8099e4 <__call_exitprocs+0xb4>
  8099dc:	9d800115 	stw	r22,4(r19)
  8099e0:	00000106 	br	8099e8 <__call_exitprocs+0xb8>
  8099e4:	80000015 	stw	zero,0(r16)
  8099e8:	403ff226 	beq	r8,zero,8099b4 <__alt_mem_onchip_memory2_0+0xff8059b4>
  8099ec:	9f000117 	ldw	fp,4(r19)
  8099f0:	a8000526 	beq	r21,zero,809a08 <__call_exitprocs+0xd8>
  8099f4:	00800044 	movi	r2,1
  8099f8:	1592983a 	sll	r9,r2,r22
  8099fc:	a9404017 	ldw	r5,256(r21)
  809a00:	494a703a 	and	r5,r9,r5
  809a04:	2800021e 	bne	r5,zero,809a10 <__call_exitprocs+0xe0>
  809a08:	403ee83a 	callr	r8
  809a0c:	00000906 	br	809a34 <__call_exitprocs+0x104>
  809a10:	a9004117 	ldw	r4,260(r21)
  809a14:	4908703a 	and	r4,r9,r4
  809a18:	2000041e 	bne	r4,zero,809a2c <__call_exitprocs+0xfc>
  809a1c:	b9400017 	ldw	r5,0(r23)
  809a20:	d9000017 	ldw	r4,0(sp)
  809a24:	403ee83a 	callr	r8
  809a28:	00000206 	br	809a34 <__call_exitprocs+0x104>
  809a2c:	b9000017 	ldw	r4,0(r23)
  809a30:	403ee83a 	callr	r8
  809a34:	99000117 	ldw	r4,4(r19)
  809a38:	e13fcc1e 	bne	fp,r4,80996c <__alt_mem_onchip_memory2_0+0xff80596c>
  809a3c:	89000017 	ldw	r4,0(r17)
  809a40:	993fdc26 	beq	r19,r4,8099b4 <__alt_mem_onchip_memory2_0+0xff8059b4>
  809a44:	003fc906 	br	80996c <__alt_mem_onchip_memory2_0+0xff80596c>
  809a48:	00800034 	movhi	r2,0
  809a4c:	10800004 	addi	r2,r2,0
  809a50:	10000f26 	beq	r2,zero,809a90 <__call_exitprocs+0x160>
  809a54:	99400117 	ldw	r5,4(r19)
  809a58:	99000017 	ldw	r4,0(r19)
  809a5c:	2800091e 	bne	r5,zero,809a84 <__call_exitprocs+0x154>
  809a60:	20000826 	beq	r4,zero,809a84 <__call_exitprocs+0x154>
  809a64:	89000015 	stw	r4,0(r17)
  809a68:	a8000226 	beq	r21,zero,809a74 <__call_exitprocs+0x144>
  809a6c:	a809883a 	mov	r4,r21
  809a70:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  809a74:	9809883a 	mov	r4,r19
  809a78:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  809a7c:	8cc00017 	ldw	r19,0(r17)
  809a80:	003fbd06 	br	809978 <__alt_mem_onchip_memory2_0+0xff805978>
  809a84:	9823883a 	mov	r17,r19
  809a88:	2027883a 	mov	r19,r4
  809a8c:	003fba06 	br	809978 <__alt_mem_onchip_memory2_0+0xff805978>
  809a90:	dfc00a17 	ldw	ra,40(sp)
  809a94:	df000917 	ldw	fp,36(sp)
  809a98:	ddc00817 	ldw	r23,32(sp)
  809a9c:	dd800717 	ldw	r22,28(sp)
  809aa0:	dd400617 	ldw	r21,24(sp)
  809aa4:	dd000517 	ldw	r20,20(sp)
  809aa8:	dcc00417 	ldw	r19,16(sp)
  809aac:	dc800317 	ldw	r18,12(sp)
  809ab0:	dc400217 	ldw	r17,8(sp)
  809ab4:	dc000117 	ldw	r16,4(sp)
  809ab8:	dec00b04 	addi	sp,sp,44
  809abc:	f800283a 	ret

00809ac0 <__divsi3>:
  809ac0:	20001b16 	blt	r4,zero,809b30 <__divsi3+0x70>
  809ac4:	000f883a 	mov	r7,zero
  809ac8:	28001616 	blt	r5,zero,809b24 <__divsi3+0x64>
  809acc:	200d883a 	mov	r6,r4
  809ad0:	29001a2e 	bgeu	r5,r4,809b3c <__divsi3+0x7c>
  809ad4:	00800804 	movi	r2,32
  809ad8:	00c00044 	movi	r3,1
  809adc:	00000106 	br	809ae4 <__divsi3+0x24>
  809ae0:	10000d26 	beq	r2,zero,809b18 <__divsi3+0x58>
  809ae4:	294b883a 	add	r5,r5,r5
  809ae8:	10bfffc4 	addi	r2,r2,-1
  809aec:	18c7883a 	add	r3,r3,r3
  809af0:	293ffb36 	bltu	r5,r4,809ae0 <__alt_mem_onchip_memory2_0+0xff805ae0>
  809af4:	0005883a 	mov	r2,zero
  809af8:	18000726 	beq	r3,zero,809b18 <__divsi3+0x58>
  809afc:	0005883a 	mov	r2,zero
  809b00:	31400236 	bltu	r6,r5,809b0c <__divsi3+0x4c>
  809b04:	314dc83a 	sub	r6,r6,r5
  809b08:	10c4b03a 	or	r2,r2,r3
  809b0c:	1806d07a 	srli	r3,r3,1
  809b10:	280ad07a 	srli	r5,r5,1
  809b14:	183ffa1e 	bne	r3,zero,809b00 <__alt_mem_onchip_memory2_0+0xff805b00>
  809b18:	38000126 	beq	r7,zero,809b20 <__divsi3+0x60>
  809b1c:	0085c83a 	sub	r2,zero,r2
  809b20:	f800283a 	ret
  809b24:	014bc83a 	sub	r5,zero,r5
  809b28:	39c0005c 	xori	r7,r7,1
  809b2c:	003fe706 	br	809acc <__alt_mem_onchip_memory2_0+0xff805acc>
  809b30:	0109c83a 	sub	r4,zero,r4
  809b34:	01c00044 	movi	r7,1
  809b38:	003fe306 	br	809ac8 <__alt_mem_onchip_memory2_0+0xff805ac8>
  809b3c:	00c00044 	movi	r3,1
  809b40:	003fee06 	br	809afc <__alt_mem_onchip_memory2_0+0xff805afc>

00809b44 <__modsi3>:
  809b44:	20001716 	blt	r4,zero,809ba4 <__modsi3+0x60>
  809b48:	000f883a 	mov	r7,zero
  809b4c:	2005883a 	mov	r2,r4
  809b50:	28001216 	blt	r5,zero,809b9c <__modsi3+0x58>
  809b54:	2900162e 	bgeu	r5,r4,809bb0 <__modsi3+0x6c>
  809b58:	01800804 	movi	r6,32
  809b5c:	00c00044 	movi	r3,1
  809b60:	00000106 	br	809b68 <__modsi3+0x24>
  809b64:	30000a26 	beq	r6,zero,809b90 <__modsi3+0x4c>
  809b68:	294b883a 	add	r5,r5,r5
  809b6c:	31bfffc4 	addi	r6,r6,-1
  809b70:	18c7883a 	add	r3,r3,r3
  809b74:	293ffb36 	bltu	r5,r4,809b64 <__alt_mem_onchip_memory2_0+0xff805b64>
  809b78:	18000526 	beq	r3,zero,809b90 <__modsi3+0x4c>
  809b7c:	1806d07a 	srli	r3,r3,1
  809b80:	11400136 	bltu	r2,r5,809b88 <__modsi3+0x44>
  809b84:	1145c83a 	sub	r2,r2,r5
  809b88:	280ad07a 	srli	r5,r5,1
  809b8c:	183ffb1e 	bne	r3,zero,809b7c <__alt_mem_onchip_memory2_0+0xff805b7c>
  809b90:	38000126 	beq	r7,zero,809b98 <__modsi3+0x54>
  809b94:	0085c83a 	sub	r2,zero,r2
  809b98:	f800283a 	ret
  809b9c:	014bc83a 	sub	r5,zero,r5
  809ba0:	003fec06 	br	809b54 <__alt_mem_onchip_memory2_0+0xff805b54>
  809ba4:	0109c83a 	sub	r4,zero,r4
  809ba8:	01c00044 	movi	r7,1
  809bac:	003fe706 	br	809b4c <__alt_mem_onchip_memory2_0+0xff805b4c>
  809bb0:	00c00044 	movi	r3,1
  809bb4:	003ff106 	br	809b7c <__alt_mem_onchip_memory2_0+0xff805b7c>

00809bb8 <__udivsi3>:
  809bb8:	200d883a 	mov	r6,r4
  809bbc:	2900152e 	bgeu	r5,r4,809c14 <__udivsi3+0x5c>
  809bc0:	28001416 	blt	r5,zero,809c14 <__udivsi3+0x5c>
  809bc4:	00800804 	movi	r2,32
  809bc8:	00c00044 	movi	r3,1
  809bcc:	00000206 	br	809bd8 <__udivsi3+0x20>
  809bd0:	10000e26 	beq	r2,zero,809c0c <__udivsi3+0x54>
  809bd4:	28000516 	blt	r5,zero,809bec <__udivsi3+0x34>
  809bd8:	294b883a 	add	r5,r5,r5
  809bdc:	10bfffc4 	addi	r2,r2,-1
  809be0:	18c7883a 	add	r3,r3,r3
  809be4:	293ffa36 	bltu	r5,r4,809bd0 <__alt_mem_onchip_memory2_0+0xff805bd0>
  809be8:	18000826 	beq	r3,zero,809c0c <__udivsi3+0x54>
  809bec:	0005883a 	mov	r2,zero
  809bf0:	31400236 	bltu	r6,r5,809bfc <__udivsi3+0x44>
  809bf4:	314dc83a 	sub	r6,r6,r5
  809bf8:	10c4b03a 	or	r2,r2,r3
  809bfc:	1806d07a 	srli	r3,r3,1
  809c00:	280ad07a 	srli	r5,r5,1
  809c04:	183ffa1e 	bne	r3,zero,809bf0 <__alt_mem_onchip_memory2_0+0xff805bf0>
  809c08:	f800283a 	ret
  809c0c:	0005883a 	mov	r2,zero
  809c10:	f800283a 	ret
  809c14:	00c00044 	movi	r3,1
  809c18:	003ff406 	br	809bec <__alt_mem_onchip_memory2_0+0xff805bec>

00809c1c <__umodsi3>:
  809c1c:	2005883a 	mov	r2,r4
  809c20:	2900122e 	bgeu	r5,r4,809c6c <__umodsi3+0x50>
  809c24:	28001116 	blt	r5,zero,809c6c <__umodsi3+0x50>
  809c28:	01800804 	movi	r6,32
  809c2c:	00c00044 	movi	r3,1
  809c30:	00000206 	br	809c3c <__umodsi3+0x20>
  809c34:	30000c26 	beq	r6,zero,809c68 <__umodsi3+0x4c>
  809c38:	28000516 	blt	r5,zero,809c50 <__umodsi3+0x34>
  809c3c:	294b883a 	add	r5,r5,r5
  809c40:	31bfffc4 	addi	r6,r6,-1
  809c44:	18c7883a 	add	r3,r3,r3
  809c48:	293ffa36 	bltu	r5,r4,809c34 <__alt_mem_onchip_memory2_0+0xff805c34>
  809c4c:	18000626 	beq	r3,zero,809c68 <__umodsi3+0x4c>
  809c50:	1806d07a 	srli	r3,r3,1
  809c54:	11400136 	bltu	r2,r5,809c5c <__umodsi3+0x40>
  809c58:	1145c83a 	sub	r2,r2,r5
  809c5c:	280ad07a 	srli	r5,r5,1
  809c60:	183ffb1e 	bne	r3,zero,809c50 <__alt_mem_onchip_memory2_0+0xff805c50>
  809c64:	f800283a 	ret
  809c68:	f800283a 	ret
  809c6c:	00c00044 	movi	r3,1
  809c70:	003ff706 	br	809c50 <__alt_mem_onchip_memory2_0+0xff805c50>

00809c74 <__mulsi3>:
  809c74:	0005883a 	mov	r2,zero
  809c78:	20000726 	beq	r4,zero,809c98 <__mulsi3+0x24>
  809c7c:	20c0004c 	andi	r3,r4,1
  809c80:	2008d07a 	srli	r4,r4,1
  809c84:	18000126 	beq	r3,zero,809c8c <__mulsi3+0x18>
  809c88:	1145883a 	add	r2,r2,r5
  809c8c:	294b883a 	add	r5,r5,r5
  809c90:	203ffa1e 	bne	r4,zero,809c7c <__alt_mem_onchip_memory2_0+0xff805c7c>
  809c94:	f800283a 	ret
  809c98:	f800283a 	ret

00809c9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  809c9c:	defffd04 	addi	sp,sp,-12
  809ca0:	df000215 	stw	fp,8(sp)
  809ca4:	df000204 	addi	fp,sp,8
  809ca8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  809cac:	d0210945 	stb	zero,-31707(gp)
  809cb0:	e0bfff17 	ldw	r2,-4(fp)
  809cb4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  809cb8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  809cbc:	10000226 	beq	r2,zero,809cc8 <_exit+0x2c>
    ALT_SIM_FAIL();
  809cc0:	002af070 	cmpltui	zero,zero,43969
  809cc4:	00000106 	br	809ccc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  809cc8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  809ccc:	003fff06 	br	809ccc <__alt_mem_onchip_memory2_0+0xff805ccc>
